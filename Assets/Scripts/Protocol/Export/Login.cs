// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: login.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SmalBox {

  /// <summary>Holder for reflection information generated from login.proto</summary>
  public static partial class LoginReflection {

    #region Descriptor
    /// <summary>File descriptor for login.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LoginReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgtsb2dpbi5wcm90bxIKS29tb3JpVGltZSJCChNBZGRBdHRyaWJ1dGVSZXF1",
            "ZXN0EisKCGF0dHJMaXN0GAEgAygLMhkuS29tb3JpVGltZS5BdHRyaWJ1dGVJ",
            "bmZvIhYKFEFkZEF0dHJpYnV0ZVJlc3BvbnNlIkkKDUF0dHJpYnV0ZUluZm8S",
            "KQoGYXR0cklkGAEgASgOMhkuS29tb3JpVGltZS5BdHRyaWJ1dGVUeXBlEg0K",
            "BXZhbHVlGAIgASgFIkAKEUF0dHJpYnV0ZUluZm9QdXNoEisKCGF0dHJMaXN0",
            "GAEgAygLMhkuS29tb3JpVGltZS5BdHRyaWJ1dGVJbmZvIhUKE1N0cmVuZ3Ro",
            "U3luY1JlcXVlc3QiNAoUU3RyZW5ndGhTeW5jUmVzcG9uc2USDgoGc1ZhbHVl",
            "GAEgASgFEgwKBHRpbWUYAiABKAUiSwoIRmlzaFVuaXQSDgoGZmlzaElkGAEg",
            "ASgEEg4KBmNvbmZJZBgCIAEoBRIMCgRzaXplGAMgASgFEhEKCW1pc3Npb25J",
            "ZBgEIAEoBSJWCgxGaXNoQXJlYVVuaXQSDgoGYXJlYUlkGAEgASgEEg4KBmNv",
            "bmZJZBgCIAEoBRImCghmaXNoTGlzdBgDIAMoCzIULktvbW9yaVRpbWUuRmlz",
            "aFVuaXQiPQoPRmlzaGluZ0luZm9QdXNoEioKCGFyZWFMaXN0GAEgAygLMhgu",
            "S29tb3JpVGltZS5GaXNoQXJlYVVuaXQiNQoTRmlzaGluZ1N0YXJ0UmVxdWVz",
            "dBIOCgZhcmVhSWQYASABKAQSDgoGZmlzaElkGAIgASgEIiYKFEZpc2hpbmdT",
            "dGFydFJlc3BvbnNlEg4KBmZpc2hJZBgBIAEoBCI1ChNGaXNoaW5nQ2F0Y2hS",
            "ZXF1ZXN0Eg4KBmFyZWFJZBgBIAEoBBIOCgZmaXNoSWQYAiABKAQiNwoURmlz",
            "aGluZ0NhdGNoUmVzcG9uc2USDwoHaXNGaXJzdBgBIAEoCBIOCgZmaXNoSWQY",
            "AiABKAQiVQocRmlzaGluZ1JlZnJlc2hVc2VJdGVtUmVxdWVzdBIOCgZhcmVh",
            "SWQYASABKAQSJQoEaXRlbRgCIAEoCzIXLktvbW9yaVRpbWUuSXRlbVVzZUlu",
            "Zm8iHwodRmlzaGluZ1JlZnJlc2hVc2VJdGVtUmVzcG9uc2UiQAoKQ2hhbmdl",
            "RmlzaBIOCgZwb25kSWQYASABKAQSIgoEZmlzaBgCIAEoCzIULktvbW9yaVRp",
            "bWUuRmlzaFVuaXQiagoSRmlzaGluZ1JlZnJlc2hQdXNoEioKCHB1c2hUeXBl",
            "GAEgASgOMhguS29tb3JpVGltZS5GaXNoUHVzaFR5cGUSKAoIZmlzaExpc3QY",
            "AiADKAsyFi5Lb21vcmlUaW1lLkNoYW5nZUZpc2giUwoUR01DaGFuZ2VBc3Nl",
            "dFJlcXVlc3QSDgoGaXNDb3N0GAEgASgIEisKCmNoYW5nZUxpc3QYAiADKAsy",
            "Fy5Lb21vcmlUaW1lLkl0ZW1Vc2VJbmZvIhcKFUdNQ2hhbmdlQXNzZXRSZXNw",
            "b25zZSIjChJHTVVubG9ja01hcFJlcXVlc3QSDQoFbWFwSWQYASABKAUiJAoT",
            "R01VbmxvY2tNYXBSZXNwb25zZRINCgVtYXBJZBgBIAEoBSI6ChdHTVNob3dj",
            "YXNlQWRkRXhwUmVxdWVzdBISCgpzaG93Y2FzZUlkGAEgASgDEgsKA2V4cBgC",
            "IAEoBSJKChhHTVNob3djYXNlQWRkRXhwUmVzcG9uc2USEgoKc2hvd2Nhc2VJ",
            "ZBgBIAEoAxILCgNleHAYAiABKAUSDQoFbGV2ZWwYAyABKAUiNAoWR01WaXNp",
            "dG9yQWRkRXhwUmVxdWVzdBINCgVjZmdJZBgBIAEoBRILCgNleHAYAiABKAUi",
            "NQoXR01WaXNpdG9yQWRkRXhwUmVzcG9uc2USDQoFY2ZnSWQYASABKAUSCwoD",
            "ZXhwGAIgASgFIkIKGEdNQWRkQ29sbGVjdGlvbkx2UmVxdWVzdBIUCgxjb2xs",
            "ZWN0aW9uSWQYASABKAUSEAoIYWRkTGV2ZWwYAiABKAUiGwoZR01BZGRDb2xs",
            "ZWN0aW9uTHZSZXNwb25zZSIzChdHTVVubG9ja0hhbmRib29rUmVxdWVzdBIY",
            "ChBjb2xsZWN0aW9uSXRlbUlkGAEgASgFIhoKGEdNVW5sb2NrSGFuZGJvb2tS",
            "ZXNwb25zZSIcChpHTVVubG9ja0FsbEhhbmRib29rUmVxdWVzdCIdChtHTVVu",
            "bG9ja0FsbEhhbmRib29rUmVzcG9uc2UiKwoZR01VbmxvY2tNdXNldW1BcmVh",
            "UmVxdWVzdBIOCgZhcmVhSWQYASABKAUiLAoaR01VbmxvY2tNdXNldW1BcmVh",
            "UmVzcG9uc2USDgoGYXJlYUlkGAEgASgFIisKFkdtRmluaXNoTWlzc2lvblJl",
            "cXVlc3QSEQoJbWlzc2lvbklkGAEgASgFIhkKF0dtRmluaXNoTWlzc2lvblJl",
            "c3BvbnNlIiUKF0dNVW5sb2NrUmVzZWFyY2hSZXF1ZXN0EgoKAmlkGAEgASgF",
            "IiYKGEdNVW5sb2NrUmVzZWFyY2hSZXNwb25zZRIKCgJpZBgBIAEoBSItChhH",
            "TVNraXBNaXNzaW9uQnlJZFJlcXVlc3QSEQoJbWlzc2lvbklkGAEgASgFIhsK",
            "GUdNU2tpcE1pc3Npb25CeUlkUmVzcG9uc2UiywEKEkhhbmRib29rQ29sbGVj",
            "dGlvbhIUCgxjb2xsZWN0aW9uSWQYASABKAUSCgoCbHYYAiABKAUSCwoDZXhw",
            "GAMgASgFEgsKA21pbhgEIAEoBRILCgNtYXgYBSABKAUSPAoHcmV3YXJkcxgG",
            "IAMoCzIrLktvbW9yaVRpbWUuSGFuZGJvb2tDb2xsZWN0aW9uLlJld2FyZHNF",
            "bnRyeRouCgxSZXdhcmRzRW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIg",
            "ASgFOgI4ASIVChNIYW5kYm9va0luZm9SZXF1ZXN0ItcBChRIYW5kYm9va0lu",
            "Zm9SZXNwb25zZRIKCgJsdhgBIAEoBRILCgNleHAYAiABKAUSPgoHcmV3YXJk",
            "cxgDIAMoCzItLktvbW9yaVRpbWUuSGFuZGJvb2tJbmZvUmVzcG9uc2UuUmV3",
            "YXJkc0VudHJ5EjYKDmNvbGxlY3Rpb25MaXN0GAQgAygLMh4uS29tb3JpVGlt",
            "ZS5IYW5kYm9va0NvbGxlY3Rpb24aLgoMUmV3YXJkc0VudHJ5EgsKA2tleRgB",
            "IAEoBRINCgV2YWx1ZRgCIAEoBToCOAEiNAoWSGFuZGJvb2tSZWNlaXZlUmVx",
            "dWVzdBIOCgZjb25mSWQYASABKAUSCgoCbHYYAiABKAUiGQoXSGFuZGJvb2tS",
            "ZWNlaXZlUmVzcG9uc2UizwEKEkhhbmRib29rQ2hhbmdlUHVzaBIKCgJsdhgB",
            "IAEoBRILCgNleHAYAiABKAUSPAoHcmV3YXJkcxgDIAMoCzIrLktvbW9yaVRp",
            "bWUuSGFuZGJvb2tDaGFuZ2VQdXNoLlJld2FyZHNFbnRyeRIyCgpjaGFuZ2VM",
            "aXN0GAQgAygLMh4uS29tb3JpVGltZS5IYW5kYm9va0NvbGxlY3Rpb24aLgoM",
            "UmV3YXJkc0VudHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoBToCOAEi",
            "agoKSW5zZWN0VW5pdBIKCgJpZBgBIAEoBBIOCgZjb25mSWQYAiABKAUSDAoE",
            "c2l6ZRgDIAEoBRINCgVzd2FybRgEIAEoBBIQCghvdmVyVGltZRgFIAEoAxIR",
            "CgltaXNzaW9uSWQYBiABKAUiWwoLSW5zZWN0U3dhcm0SCgoCaWQYASABKAQS",
            "DgoGY29uZklkGAIgASgFEhQKDHJlZnJlc2hDb3VudBgDIAEoBRIKCgJjZBgE",
            "IAEoAxIOCgZpdGVtSWQYBSABKAUidAoKSW5zZWN0QXJlYRIOCgZhcmVhSWQY",
            "ASABKAUSKgoJc3dhcm1MaXN0GAIgAygLMhcuS29tb3JpVGltZS5JbnNlY3RT",
            "d2FybRIqCgppbnNlY3RMaXN0GAMgAygLMhYuS29tb3JpVGltZS5JbnNlY3RV",
            "bml0IlAKDkluc2VjdEluZm9QdXNoEhMKC2NhdGNoVG9vbElkGAEgASgEEikK",
            "CWFyZWFfbGlzdBgCIAMoCzIWLktvbW9yaVRpbWUuSW5zZWN0QXJlYSI2ChJJ",
            "bnNlY3RTdGFydFJlcXVlc3QSDgoGYXJlYUlkGAEgASgFEhAKCGluc2VjdElk",
            "GAIgASgEIhUKE0luc2VjdFN0YXJ0UmVzcG9uc2UiNgoSSW5zZWN0Q2F0Y2hS",
            "ZXF1ZXN0Eg4KBmFyZWFJZBgBIAEoBRIQCghpbnNlY3RJZBgCIAEoBCI3ChNJ",
            "bnNlY3RDYXRjaFJlc3BvbnNlEg8KB2lzRmlyc3QYASABKAgSDwoHc3VjY2Vz",
            "cxgCIAEoCCJeChBJbnNlY3RRVEVSZXF1ZXN0Eg4KBmFyZWFJZBgBIAEoBRIP",
            "Cgdzd2FybUlkGAIgASgEEhQKDGl0ZW1VbmlxdWVJZBgDIAEoBBITCgtlZmZl",
            "Y3RWYWx1ZRgEIAEoBSITChFJbnNlY3RRVEVSZXNwb25zZSIuChdJbnNlY3RD",
            "aGFuZ2VUb29sUmVxdWVzdBITCgtjYXRjaFRvb2xJZBgBIAEoBCIaChhJbnNl",
            "Y3RDaGFuZ2VUb29sUmVzcG9uc2UiPgoRSW5zZWN0UmVmcmVzaFB1c2gSKQoJ",
            "YXJlYV9saXN0GAEgAygLMhYuS29tb3JpVGltZS5JbnNlY3RBcmVhIsECCghJ",
            "dGVtSW5mbxImCghwcm9wVHlwZRgBIAEoDjIULktvbW9yaVRpbWUuSXRlbVR5",
            "cGUSDgoGY29uZklkGAIgASgFEgsKA251bRgDIAEoBRIyCg1jYXRjaFRvb2xJ",
            "bmZvGAQgASgLMhkuS29tb3JpVGltZS5DYXRjaFRvb2xJbmZvSAASOAoQcm9s",
            "ZVNob3djYXNlSW5mbxgFIAEoCzIcLktvbW9yaVRpbWUuUm9sZVNob3djYXNl",
            "SW5mb0gAEkEKEmNvbGxlY3Rpb25JdGVtSW5mbxgGIAEoCzIjLktvbW9yaVRp",
            "bWUuQ29sbGVjdGlvbkl0ZW1FeHRyYUluZm9IABIyCg1hdHRyRXh0cmFJbmZv",
            "GAcgASgLMhkuS29tb3JpVGltZS5BdHRyRXh0cmFJbmZvSABCCwoJZXh0cmFJ",
            "bmZvIjUKDUNhdGNoVG9vbEluZm8SEAoIdW5pcXVlSWQYASABKAQSEgoKZHVy",
            "YWJpbGl0eRgCIAEoBSJAChBSb2xlU2hvd2Nhc2VJbmZvEhAKCHVuaXF1ZUlk",
            "GAEgASgEEg0KBWxldmVsGAIgASgFEgsKA2V4cBgDIAEoBSJLChdDb2xsZWN0",
            "aW9uSXRlbUV4dHJhSW5mbxIQCgh1bmlxdWVJZBgBIAEoBBIMCgRzaXplGAIg",
            "ASgFEhAKCG1hbnVhbElkGAMgASgFIjQKDlVzZUl0ZW1SZXF1ZXN0EiIKBGl0",
            "ZW0YASABKAsyFC5Lb21vcmlUaW1lLkl0ZW1JbmZvIhEKD1VzZUl0ZW1SZXNw",
            "b25zZSIhCg1BdHRyRXh0cmFJbmZvEhAKCGRpZmZUaW1lGAEgASgDImQKC0l0",
            "ZW1Vc2VJbmZvEiYKCHByb3BUeXBlGAEgASgOMhQuS29tb3JpVGltZS5JdGVt",
            "VHlwZRIOCgZjb25mSWQYAiABKAUSCwoDbnVtGAMgASgFEhAKCHVuaXF1ZUlk",
            "GAQgASgEIjgKDkl0ZW1DaGFuZ2VQdXNoEiYKCGl0ZW1MaXN0GAEgAygLMhQu",
            "S29tb3JpVGltZS5JdGVtSW5mbyIuCgxMb2dpblJlcXVlc3QSDwoHYWNjb3Vu",
            "dBgBIAEoCRINCgV0b2tlbhgCIAEoCSI3Cg1Mb2dpblJlc3BvbnNlEiYKCHVz",
            "ZXJJbmZvGAEgASgLMhQuS29tb3JpVGltZS5Vc2VySW5mbyISChBIZWFydEJl",
            "YXRSZXF1ZXN0IhMKEUhlYXJ0QmVhdFJlc3BvbnNlIngKCFVzZXJJbmZvEg4K",
            "BnJvbGVJZBgBIAEoBBIMCgRuYW1lGAIgASgJEiYKCGl0ZW1MaXN0GAMgAygL",
            "MhQuS29tb3JpVGltZS5JdGVtSW5mbxIVCg11bmxvY2tlZE1hcElkGAQgAygF",
            "Eg8KB2hlYWRVcmwYBSABKAkijgEKC01pc3Npb25Vbml0EhIKCm1pc3Npb25f",
            "aWQYASABKAUSJwoFc3RhdGUYAiABKA4yGC5Lb21vcmlUaW1lLk1pc3Npb25T",
            "dGF0ZRItCghwcm9ncmVzcxgDIAMoCzIbLktvbW9yaVRpbWUuTWlzc2lvblBy",
            "b2dyZXNzEhMKC3JlY2VpdmVUaW1lGAQgASgDIkEKD01pc3Npb25Qcm9ncmVz",
            "cxIRCgl0cmlnZ2VySWQYASABKAUSDgoGY29uZklkGAIgASgFEgsKA251bRgD",
            "IAEoBSIVChNNaXNzaW9uUXVlcnlSZXF1ZXN0IkUKFE1pc3Npb25RdWVyeVJl",
            "c3BvbnNlEi0KDG1pc3Npb25fbGlzdBgBIAMoCzIXLktvbW9yaVRpbWUuTWlz",
            "c2lvblVuaXQiKwoVTWlzc2lvblJlY2VpdmVSZXF1ZXN0EhIKCm1pc3Npb25f",
            "aWQYASABKAUiGAoWTWlzc2lvblJlY2VpdmVSZXNwb25zZSIqChRNaXNzaW9u",
            "UmV3YXJkUmVxdWVzdBISCgptaXNzaW9uX2lkGAEgASgFIhcKFU1pc3Npb25S",
            "ZXdhcmRSZXNwb25zZSJAChRNaXNzaW9uQ2hhbmdlT25lUHVzaBIoCgdtaXNz",
            "aW9uGAEgASgLMhcuS29tb3JpVGltZS5NaXNzaW9uVW5pdCJGChVNaXNzaW9u",
            "Q2hhbmdlTWFueVB1c2gSLQoMbWlzc2lvbl9saXN0GAEgAygLMhcuS29tb3Jp",
            "VGltZS5NaXNzaW9uVW5pdCKlAQoTRW50ZXJNdXNldW1JbmZvUHVzaBIUCgx1",
            "bmxvY2tBcmVhSWQYASADKAUSKwoJc2hvd2Nhc2VzGAIgAygLMhguS29tb3Jp",
            "VGltZS5TaG93Y2FzZUluZm8SFgoOcmVzZWFyY2hQb2ludHMYAyABKAUSDAoE",
            "Y29pbhgEIAEoBRIlCghib3hJbmZvcxgFIAMoCzITLktvbW9yaVRpbWUuQm94",
            "SW5mbyJFChNMZXZlbHVwU2hvd2Nhc2VQdXNoEhIKCnNob3djYXNlSWQYASAB",
            "KAQSDQoFbGV2ZWwYAiABKAUSCwoDZXhwGAMgASgFInwKFFBsYWNlU2hvd2Nh",
            "c2VSZXF1ZXN0EhYKDnNob3djYXNlSXRlbUlkGAEgASgEEigKCWRpcmVjdGlv",
            "bhgCIAEoDjIVLktvbW9yaVRpbWUuRGlyZWN0aW9uEiIKBXBvaW50GAMgASgL",
            "MhMuS29tb3JpVGltZS5Qb2ludDJEIj8KFVBsYWNlU2hvd2Nhc2VSZXNwb25z",
            "ZRImCgRpbmZvGAEgASgLMhguS29tb3JpVGltZS5TaG93Y2FzZUluZm8idwoT",
            "TW92ZVNob3djYXNlUmVxdWVzdBISCgpzaG93Y2FzZUlkGAEgASgEEigKCWRp",
            "cmVjdGlvbhgCIAEoDjIVLktvbW9yaVRpbWUuRGlyZWN0aW9uEiIKBXBvaW50",
            "GAMgASgLMhMuS29tb3JpVGltZS5Qb2ludDJEIj4KFE1vdmVTaG93Y2FzZVJl",
            "c3BvbnNlEiYKBGluZm8YASABKAsyGC5Lb21vcmlUaW1lLlNob3djYXNlSW5m",
            "byIpChNQYWNrU2hvd2Nhc2VSZXF1ZXN0EhIKCnNob3djYXNlSWQYASABKAQi",
            "KgoUUGFja1Nob3djYXNlUmVzcG9uc2USEgoKc2hvd2Nhc2VJZBgBIAEoBCJT",
            "ChRQbGFjZUV4aGliaXRzUmVxdWVzdBISCgpzaG93Y2FzZUlkGAEgASgEEg0K",
            "BWluZGV4GAIgASgFEhgKEGNvbGxlY3Rpb25JdGVtSWQYAyABKAQiYgoVUGxh",
            "Y2VFeGhpYml0c1Jlc3BvbnNlEhIKCnNob3djYXNlSWQYASABKAQSDQoFaW5k",
            "ZXgYAiABKAUSJgoIZXhoaWJpdHMYAyABKAsyFC5Lb21vcmlUaW1lLkV4aGli",
            "aXRzIjoKFVJlbW92ZUV4aGliaXRzUmVxdWVzdBISCgpzaG93Y2FzZUlkGAEg",
            "ASgEEg0KBWluZGV4GAIgASgFIjsKFlJlbW92ZUV4aGliaXRzUmVzcG9uc2US",
            "EgoKc2hvd2Nhc2VJZBgBIAEoBBINCgVpbmRleBgCIAEoBSIyChxSZWNlaXZl",
            "U2hvd2Nhc2VSZXdhcmRSZXF1ZXN0EhIKCnNob3djYXNlSWQYASABKAQiMwod",
            "UmVjZWl2ZVNob3djYXNlUmV3YXJkUmVzcG9uc2USEgoKc2hvd2Nhc2VJZBgB",
            "IAEoBCJNChNNb3ZlRXhoaWJpdHNSZXF1ZXN0EhIKCnNob3djYXNlSWQYASAB",
            "KAQSEQoJZnJvbUluZGV4GAIgASgFEg8KB3RvSW5kZXgYAyABKAUinAEKFE1v",
            "dmVFeGhpYml0c1Jlc3BvbnNlEj4KB2NoYW5nZWQYASADKAsyLS5Lb21vcmlU",
            "aW1lLk1vdmVFeGhpYml0c1Jlc3BvbnNlLkNoYW5nZWRFbnRyeRpECgxDaGFu",
            "Z2VkRW50cnkSCwoDa2V5GAEgASgFEiMKBXZhbHVlGAIgASgLMhQuS29tb3Jp",
            "VGltZS5FeGhpYml0czoCOAEiKQoXVW5sb2NrTXVzZXVtQXJlYVJlcXVlc3QS",
            "DgoGYXJlYUlkGAEgASgFIioKGFVubG9ja011c2V1bUFyZWFSZXNwb25zZRIO",
            "CgZhcmVhSWQYASABKAUiIQoQUmVwYWlyQm94UmVxdWVzdBINCgVjZmdJZBgB",
            "IAEoBSJOChFSZXBhaXJCb3hSZXNwb25zZRIqCghzaG93Y2FzZRgBIAEoCzIY",
            "LktvbW9yaVRpbWUuU2hvd2Nhc2VJbmZvEg0KBWNmZ0lkGAIgASgFIsECCgxT",
            "aG93Y2FzZUluZm8SEgoKc2hvd2Nhc2VJZBgBIAEoBBINCgVjZmdJZBgCIAEo",
            "BRIoCglkaXJlY3Rpb24YAyABKA4yFS5Lb21vcmlUaW1lLkRpcmVjdGlvbhIi",
            "CgVwb2ludBgEIAEoCzITLktvbW9yaVRpbWUuUG9pbnQyRBILCgNleHAYBSAB",
            "KAUSDQoFbGV2ZWwYBiABKAUSFQoNcmVzZWFyY2hQb2ludBgHIAEoBRIMCgRj",
            "b2luGAggASgFEjgKCGV4aGliaXRzGAkgAygLMiYuS29tb3JpVGltZS5TaG93",
            "Y2FzZUluZm8uRXhoaWJpdHNFbnRyeRpFCg1FeGhpYml0c0VudHJ5EgsKA2tl",
            "eRgBIAEoBRIjCgV2YWx1ZRgCIAEoCzIULktvbW9yaVRpbWUuRXhoaWJpdHM6",
            "AjgBImYKB0JveEluZm8SDQoFY2ZnSWQYASABKAUSIgoFcG9pbnQYAiABKAsy",
            "Ey5Lb21vcmlUaW1lLlBvaW50MkQSKAoJZGlyZWN0aW9uGAMgASgOMhUuS29t",
            "b3JpVGltZS5EaXJlY3Rpb24iOAoIRXhoaWJpdHMSCgoCaWQYASABKAQSEgoK",
            "ZXhoaWJpdHNJZBgCIAEoBRIMCgRzaXplGAMgASgFIm8KFUdldEFsbFZpc2l0",
            "b3JJbmZvUHVzaBIrCglncm91cEluZm8YASADKAsyGC5Lb21vcmlUaW1lLlZp",
            "c2l0b3JHcm91cBIpCgh2aXNpdG9ycxgCIAMoCzIXLktvbW9yaVRpbWUuVmlz",
            "aXRvckluZm8iQgoWQ3JlYXRlVmlzaXRvckdyb3VwUHVzaBIoCgZncm91cHMY",
            "ASADKAsyGC5Lb21vcmlUaW1lLlZpc2l0b3JHcm91cCI+ChFDcmVhdGVWaXNp",
            "dG9yUHVzaBIpCgh2aXNpdG9ycxgBIAMoCzIXLktvbW9yaVRpbWUuVmlzaXRv",
            "ckluZm8iJgoVTGV2ZWx1cFZpc2l0b3JSZXF1ZXN0Eg0KBWNmZ0lkGAEgASgF",
            "IkUKFkxldmVsdXBWaXNpdG9yUmVzcG9uc2USKwoJZ3JvdXBJbmZvGAEgASgL",
            "MhguS29tb3JpVGltZS5WaXNpdG9yR3JvdXAiLgoZVmlzaXRvckxlYXZlTXVz",
            "ZXVtUmVxdWVzdBIRCgl2aXNpdG9ySWQYASABKAMiLwoaVmlzaXRvckxlYXZl",
            "TXVzZXVtUmVzcG9uc2USEQoJdmlzaXRvcklkGAEgASgDIiYKEUdpdmVVcFBh",
            "dGhSZXF1ZXN0EhEKCXZpc2l0b3JJZBgBIAEoAyInChJHaXZlVXBQYXRoUmVz",
            "cG9uc2USEQoJdmlzaXRvcklkGAEgASgDIikKFFZpc2l0U2hvd2Nhc2VSZXF1",
            "ZXN0EhEKCXZpc2l0b3JJZBgBIAEoAyJwChVWaXNpdFNob3djYXNlUmVzcG9u",
            "c2USLgoMc2hvd2Nhc2VJbmZvGAEgASgLMhguS29tb3JpVGltZS5TaG93Y2Fz",
            "ZUluZm8SJwoFZ3JvdXAYAiABKAsyGC5Lb21vcmlUaW1lLlZpc2l0b3JHcm91",
            "cCKMAQoLVmlzaXRvckluZm8SCgoCaWQYASABKAMSDQoFY2ZnSWQYAiABKAUS",
            "DQoFbGV2ZWwYAyABKAUSFgoOcmVzZWFyY2hQb2ludHMYBCABKAUSDAoEY29p",
            "bhgFIAEoBRItCghwYXRoSW5mbxgGIAMoCzIbLktvbW9yaVRpbWUuVmlzaXRv",
            "clBhdGhJbmZvIjkKDFZpc2l0b3JHcm91cBINCgVjZmdJZBgBIAEoBRILCgNl",
            "eHAYAiABKAUSDQoFbGV2ZWwYAyABKAUicQoPVmlzaXRvclBhdGhJbmZvEhIK",
            "CnNob3djYXNlSWQYASABKAMSEgoKZXhoaWJpdHNJZBgCIAEoBRIPCgdldmVu",
            "dElkGAMgASgFEhcKD2Z1bmN0aW9uQnVpbGRJZBgEIAEoAxIMCgRzdGVwGAUg",
            "ASgFIi8KDk5wY1RhbGtSZXF1ZXN0Eg0KBW5wY0lkGAEgASgFEg4KBnBsb3RJ",
            "ZBgCIAEoBSIRCg9OcGNUYWxrUmVzcG9uc2UiHwoHUG9pbnQyRBIJCgF4GAEg",
            "ASgFEgkKAXkYAiABKAUiGQoXR2V0QWxsUmVzZWFyY2hJZFJlcXVlc3QiRgoY",
            "R2V0QWxsUmVzZWFyY2hJZFJlc3BvbnNlEioKCGluZm9MaXN0GAEgAygLMhgu",
            "S29tb3JpVGltZS5SZXNlYXJjaEluZm8iLgoMUmVzZWFyY2hJbmZvEgoKAmlk",
            "GAEgASgFEhIKCnJlc2VhcmNoZWQYAiABKAgiHQoPUmVzZWFyY2hSZXF1ZXN0",
            "EgoKAmlkGAEgASgFIhIKEFJlc2VhcmNoUmVzcG9uc2UiMgoHUm9kVW5pdBIK",
            "CgJpZBgBIAEoBBIPCgdjb25mX2lkGAIgASgNEgoKAmhwGAMgASgNIg8KDVJv",
            "ZEJhZ1JlcXVlc3QiNwoOUm9kQmFnUmVzcG9uc2USJQoIcm9kX2xpc3QYASAD",
            "KAsyEy5Lb21vcmlUaW1lLlJvZFVuaXQiNgoNUm9kQ2hhbmdlUHVzaBIlCghy",
            "b2RfbGlzdBgBIAMoCzITLktvbW9yaVRpbWUuUm9kVW5pdCJQChJTY2VuZUNo",
            "YW5nZVJlcXVlc3QSKwoIcG9zaXRpb24YASABKA4yGS5Lb21vcmlUaW1lLlNj",
            "ZW5lUG9zaXRpb24SDQoFbWFwSWQYAiABKAUiFQoTU2NlbmVDaGFuZ2VSZXNw",
            "b25zZSIgCg9TY2VuZVVubG9ja1B1c2gSDQoFbWFwSWQYASADKAUiKAoUUHVy",
            "Y2hhc2VHb29kc1JlcXVlc3QSEAoIY29uZmlnSWQYASABKAUiNgoVUHVyY2hh",
            "c2VHb29kc1Jlc3BvbnNlEhAKCGNvbmZpZ0lkGAEgASgFEgsKA2FnZRgCIAEo",
            "BSIpChZSZXBsYWNlTmlja05hbWVSZXF1ZXN0Eg8KB25ld05hbWUYASABKAki",
            "GQoXUmVwbGFjZU5pY2tOYW1lUmVzcG9uc2UiKAoVUmVwbGFjZUhlYWRVcmxS",
            "ZXF1ZXN0Eg8KB2hlYWRVcmwYAiABKAkiGAoWUmVwbGFjZUhlYWRVcmxSZXNw",
            "b25zZSqJAQoNQXR0cmlidXRlVHlwZRIPCgtEZWZhdWx0QXR0chAAEhAKDEZh",
            "dGlndWVWYWx1ZRABEggKBENvaW4QAhIRCg1SZXNlYXJjaFBvaW50EAMSCwoH",
            "RGlhbW9uZBAEEg0KCU11c2V1bUV4cBAFEg8KC011c2V1bUxldmVsEAYSCwoH",
            "RXhwRmlzaBALKj8KDEZpc2hQdXNoVHlwZRIHCgNEYXkQABIMCghJbnRlcnZh",
            "bBABEgsKB0l0ZW1Vc2UQAhILCgdNaXNzaW9uEAMqYQoISXRlbVR5cGUSBwoD",
            "TklMEAASCAoESXRlbRABEggKBEFUVFIQAhINCglDYXRjaFRvb2wQCBISCg5D",
            "b2xsZWN0aW9uSXRlbRAPEgwKCFNob3djYXNlEBoSBwoDUk1CECMqRQoMTWlz",
            "c2lvblN0YXRlEg8KC05vdFJlY2VpdmVkEAASDAoIUmVjZWl2ZWQQARIKCgZG",
            "aW5pc2gQAhIKCgZSZXdhcmQQAyo1CglEaXJlY3Rpb24SCQoFZnJvbnQQABII",
            "CgRiYWNrEAESCAoEbGVmdBACEgkKBXJpZ2h0EAMqQQoNU2NlbmVQb3NpdGlv",
            "bhILCgdEZWZhdWx0EAASCwoHRmlzaGluZxABEgoKBkluc2VjdBACEgoKBk11",
            "c2V1bRADQgtIAVoHbXNnL2NsaWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::SmalBox.AttributeType), typeof(global::SmalBox.FishPushType), typeof(global::SmalBox.ItemType), typeof(global::SmalBox.MissionState), typeof(global::SmalBox.Direction), typeof(global::SmalBox.ScenePosition), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.AddAttributeRequest), global::SmalBox.AddAttributeRequest.Parser, new[]{ "AttrList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.AddAttributeResponse), global::SmalBox.AddAttributeResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.AttributeInfo), global::SmalBox.AttributeInfo.Parser, new[]{ "AttrId", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.AttributeInfoPush), global::SmalBox.AttributeInfoPush.Parser, new[]{ "AttrList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.StrengthSyncRequest), global::SmalBox.StrengthSyncRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.StrengthSyncResponse), global::SmalBox.StrengthSyncResponse.Parser, new[]{ "SValue", "Time" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.FishUnit), global::SmalBox.FishUnit.Parser, new[]{ "FishId", "ConfId", "Size", "MissionId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.FishAreaUnit), global::SmalBox.FishAreaUnit.Parser, new[]{ "AreaId", "ConfId", "FishList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.FishingInfoPush), global::SmalBox.FishingInfoPush.Parser, new[]{ "AreaList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.FishingStartRequest), global::SmalBox.FishingStartRequest.Parser, new[]{ "AreaId", "FishId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.FishingStartResponse), global::SmalBox.FishingStartResponse.Parser, new[]{ "FishId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.FishingCatchRequest), global::SmalBox.FishingCatchRequest.Parser, new[]{ "AreaId", "FishId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.FishingCatchResponse), global::SmalBox.FishingCatchResponse.Parser, new[]{ "IsFirst", "FishId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.FishingRefreshUseItemRequest), global::SmalBox.FishingRefreshUseItemRequest.Parser, new[]{ "AreaId", "Item" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.FishingRefreshUseItemResponse), global::SmalBox.FishingRefreshUseItemResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.ChangeFish), global::SmalBox.ChangeFish.Parser, new[]{ "PondId", "Fish" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.FishingRefreshPush), global::SmalBox.FishingRefreshPush.Parser, new[]{ "PushType", "FishList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.GMChangeAssetRequest), global::SmalBox.GMChangeAssetRequest.Parser, new[]{ "IsCost", "ChangeList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.GMChangeAssetResponse), global::SmalBox.GMChangeAssetResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.GMUnlockMapRequest), global::SmalBox.GMUnlockMapRequest.Parser, new[]{ "MapId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.GMUnlockMapResponse), global::SmalBox.GMUnlockMapResponse.Parser, new[]{ "MapId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.GMShowcaseAddExpRequest), global::SmalBox.GMShowcaseAddExpRequest.Parser, new[]{ "ShowcaseId", "Exp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.GMShowcaseAddExpResponse), global::SmalBox.GMShowcaseAddExpResponse.Parser, new[]{ "ShowcaseId", "Exp", "Level" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.GMVisitorAddExpRequest), global::SmalBox.GMVisitorAddExpRequest.Parser, new[]{ "CfgId", "Exp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.GMVisitorAddExpResponse), global::SmalBox.GMVisitorAddExpResponse.Parser, new[]{ "CfgId", "Exp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.GMAddCollectionLvRequest), global::SmalBox.GMAddCollectionLvRequest.Parser, new[]{ "CollectionId", "AddLevel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.GMAddCollectionLvResponse), global::SmalBox.GMAddCollectionLvResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.GMUnlockHandbookRequest), global::SmalBox.GMUnlockHandbookRequest.Parser, new[]{ "CollectionItemId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.GMUnlockHandbookResponse), global::SmalBox.GMUnlockHandbookResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.GMUnlockAllHandbookRequest), global::SmalBox.GMUnlockAllHandbookRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.GMUnlockAllHandbookResponse), global::SmalBox.GMUnlockAllHandbookResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.GMUnlockMuseumAreaRequest), global::SmalBox.GMUnlockMuseumAreaRequest.Parser, new[]{ "AreaId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.GMUnlockMuseumAreaResponse), global::SmalBox.GMUnlockMuseumAreaResponse.Parser, new[]{ "AreaId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.GmFinishMissionRequest), global::SmalBox.GmFinishMissionRequest.Parser, new[]{ "MissionId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.GmFinishMissionResponse), global::SmalBox.GmFinishMissionResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.GMUnlockResearchRequest), global::SmalBox.GMUnlockResearchRequest.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.GMUnlockResearchResponse), global::SmalBox.GMUnlockResearchResponse.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.GMSkipMissionByIdRequest), global::SmalBox.GMSkipMissionByIdRequest.Parser, new[]{ "MissionId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.GMSkipMissionByIdResponse), global::SmalBox.GMSkipMissionByIdResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.HandbookCollection), global::SmalBox.HandbookCollection.Parser, new[]{ "CollectionId", "Lv", "Exp", "Min", "Max", "Rewards" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.HandbookInfoRequest), global::SmalBox.HandbookInfoRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.HandbookInfoResponse), global::SmalBox.HandbookInfoResponse.Parser, new[]{ "Lv", "Exp", "Rewards", "CollectionList" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.HandbookReceiveRequest), global::SmalBox.HandbookReceiveRequest.Parser, new[]{ "ConfId", "Lv" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.HandbookReceiveResponse), global::SmalBox.HandbookReceiveResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.HandbookChangePush), global::SmalBox.HandbookChangePush.Parser, new[]{ "Lv", "Exp", "Rewards", "ChangeList" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.InsectUnit), global::SmalBox.InsectUnit.Parser, new[]{ "Id", "ConfId", "Size", "Swarm", "OverTime", "MissionId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.InsectSwarm), global::SmalBox.InsectSwarm.Parser, new[]{ "Id", "ConfId", "RefreshCount", "Cd", "ItemId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.InsectArea), global::SmalBox.InsectArea.Parser, new[]{ "AreaId", "SwarmList", "InsectList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.InsectInfoPush), global::SmalBox.InsectInfoPush.Parser, new[]{ "CatchToolId", "AreaList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.InsectStartRequest), global::SmalBox.InsectStartRequest.Parser, new[]{ "AreaId", "InsectId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.InsectStartResponse), global::SmalBox.InsectStartResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.InsectCatchRequest), global::SmalBox.InsectCatchRequest.Parser, new[]{ "AreaId", "InsectId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.InsectCatchResponse), global::SmalBox.InsectCatchResponse.Parser, new[]{ "IsFirst", "Success" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.InsectQTERequest), global::SmalBox.InsectQTERequest.Parser, new[]{ "AreaId", "SwarmId", "ItemUniqueId", "EffectValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.InsectQTEResponse), global::SmalBox.InsectQTEResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.InsectChangeToolRequest), global::SmalBox.InsectChangeToolRequest.Parser, new[]{ "CatchToolId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.InsectChangeToolResponse), global::SmalBox.InsectChangeToolResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.InsectRefreshPush), global::SmalBox.InsectRefreshPush.Parser, new[]{ "AreaList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.ItemInfo), global::SmalBox.ItemInfo.Parser, new[]{ "PropType", "ConfId", "Num", "CatchToolInfo", "RoleShowcaseInfo", "CollectionItemInfo", "AttrExtraInfo" }, new[]{ "ExtraInfo" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.CatchToolInfo), global::SmalBox.CatchToolInfo.Parser, new[]{ "UniqueId", "Durability" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.RoleShowcaseInfo), global::SmalBox.RoleShowcaseInfo.Parser, new[]{ "UniqueId", "Level", "Exp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.CollectionItemExtraInfo), global::SmalBox.CollectionItemExtraInfo.Parser, new[]{ "UniqueId", "Size", "ManualId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.UseItemRequest), global::SmalBox.UseItemRequest.Parser, new[]{ "Item" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.UseItemResponse), global::SmalBox.UseItemResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.AttrExtraInfo), global::SmalBox.AttrExtraInfo.Parser, new[]{ "DiffTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.ItemUseInfo), global::SmalBox.ItemUseInfo.Parser, new[]{ "PropType", "ConfId", "Num", "UniqueId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.ItemChangePush), global::SmalBox.ItemChangePush.Parser, new[]{ "ItemList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.LoginRequest), global::SmalBox.LoginRequest.Parser, new[]{ "Account", "Token" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.LoginResponse), global::SmalBox.LoginResponse.Parser, new[]{ "UserInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.HeartBeatRequest), global::SmalBox.HeartBeatRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.HeartBeatResponse), global::SmalBox.HeartBeatResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.UserInfo), global::SmalBox.UserInfo.Parser, new[]{ "RoleId", "Name", "ItemList", "UnlockedMapId", "HeadUrl" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.MissionUnit), global::SmalBox.MissionUnit.Parser, new[]{ "MissionId", "State", "Progress", "ReceiveTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.MissionProgress), global::SmalBox.MissionProgress.Parser, new[]{ "TriggerId", "ConfId", "Num" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.MissionQueryRequest), global::SmalBox.MissionQueryRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.MissionQueryResponse), global::SmalBox.MissionQueryResponse.Parser, new[]{ "MissionList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.MissionReceiveRequest), global::SmalBox.MissionReceiveRequest.Parser, new[]{ "MissionId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.MissionReceiveResponse), global::SmalBox.MissionReceiveResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.MissionRewardRequest), global::SmalBox.MissionRewardRequest.Parser, new[]{ "MissionId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.MissionRewardResponse), global::SmalBox.MissionRewardResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.MissionChangeOnePush), global::SmalBox.MissionChangeOnePush.Parser, new[]{ "Mission" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.MissionChangeManyPush), global::SmalBox.MissionChangeManyPush.Parser, new[]{ "MissionList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.EnterMuseumInfoPush), global::SmalBox.EnterMuseumInfoPush.Parser, new[]{ "UnlockAreaId", "Showcases", "ResearchPoints", "Coin", "BoxInfos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.LevelupShowcasePush), global::SmalBox.LevelupShowcasePush.Parser, new[]{ "ShowcaseId", "Level", "Exp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.PlaceShowcaseRequest), global::SmalBox.PlaceShowcaseRequest.Parser, new[]{ "ShowcaseItemId", "Direction", "Point" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.PlaceShowcaseResponse), global::SmalBox.PlaceShowcaseResponse.Parser, new[]{ "Info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.MoveShowcaseRequest), global::SmalBox.MoveShowcaseRequest.Parser, new[]{ "ShowcaseId", "Direction", "Point" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.MoveShowcaseResponse), global::SmalBox.MoveShowcaseResponse.Parser, new[]{ "Info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.PackShowcaseRequest), global::SmalBox.PackShowcaseRequest.Parser, new[]{ "ShowcaseId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.PackShowcaseResponse), global::SmalBox.PackShowcaseResponse.Parser, new[]{ "ShowcaseId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.PlaceExhibitsRequest), global::SmalBox.PlaceExhibitsRequest.Parser, new[]{ "ShowcaseId", "Index", "CollectionItemId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.PlaceExhibitsResponse), global::SmalBox.PlaceExhibitsResponse.Parser, new[]{ "ShowcaseId", "Index", "Exhibits" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.RemoveExhibitsRequest), global::SmalBox.RemoveExhibitsRequest.Parser, new[]{ "ShowcaseId", "Index" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.RemoveExhibitsResponse), global::SmalBox.RemoveExhibitsResponse.Parser, new[]{ "ShowcaseId", "Index" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.ReceiveShowcaseRewardRequest), global::SmalBox.ReceiveShowcaseRewardRequest.Parser, new[]{ "ShowcaseId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.ReceiveShowcaseRewardResponse), global::SmalBox.ReceiveShowcaseRewardResponse.Parser, new[]{ "ShowcaseId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.MoveExhibitsRequest), global::SmalBox.MoveExhibitsRequest.Parser, new[]{ "ShowcaseId", "FromIndex", "ToIndex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.MoveExhibitsResponse), global::SmalBox.MoveExhibitsResponse.Parser, new[]{ "Changed" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.UnlockMuseumAreaRequest), global::SmalBox.UnlockMuseumAreaRequest.Parser, new[]{ "AreaId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.UnlockMuseumAreaResponse), global::SmalBox.UnlockMuseumAreaResponse.Parser, new[]{ "AreaId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.RepairBoxRequest), global::SmalBox.RepairBoxRequest.Parser, new[]{ "CfgId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.RepairBoxResponse), global::SmalBox.RepairBoxResponse.Parser, new[]{ "Showcase", "CfgId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.ShowcaseInfo), global::SmalBox.ShowcaseInfo.Parser, new[]{ "ShowcaseId", "CfgId", "Direction", "Point", "Exp", "Level", "ResearchPoint", "Coin", "Exhibits" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.BoxInfo), global::SmalBox.BoxInfo.Parser, new[]{ "CfgId", "Point", "Direction" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.Exhibits), global::SmalBox.Exhibits.Parser, new[]{ "Id", "ExhibitsId", "Size" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.GetAllVisitorInfoPush), global::SmalBox.GetAllVisitorInfoPush.Parser, new[]{ "GroupInfo", "Visitors" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.CreateVisitorGroupPush), global::SmalBox.CreateVisitorGroupPush.Parser, new[]{ "Groups" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.CreateVisitorPush), global::SmalBox.CreateVisitorPush.Parser, new[]{ "Visitors" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.LevelupVisitorRequest), global::SmalBox.LevelupVisitorRequest.Parser, new[]{ "CfgId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.LevelupVisitorResponse), global::SmalBox.LevelupVisitorResponse.Parser, new[]{ "GroupInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.VisitorLeaveMuseumRequest), global::SmalBox.VisitorLeaveMuseumRequest.Parser, new[]{ "VisitorId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.VisitorLeaveMuseumResponse), global::SmalBox.VisitorLeaveMuseumResponse.Parser, new[]{ "VisitorId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.GiveUpPathRequest), global::SmalBox.GiveUpPathRequest.Parser, new[]{ "VisitorId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.GiveUpPathResponse), global::SmalBox.GiveUpPathResponse.Parser, new[]{ "VisitorId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.VisitShowcaseRequest), global::SmalBox.VisitShowcaseRequest.Parser, new[]{ "VisitorId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.VisitShowcaseResponse), global::SmalBox.VisitShowcaseResponse.Parser, new[]{ "ShowcaseInfo", "Group" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.VisitorInfo), global::SmalBox.VisitorInfo.Parser, new[]{ "Id", "CfgId", "Level", "ResearchPoints", "Coin", "PathInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.VisitorGroup), global::SmalBox.VisitorGroup.Parser, new[]{ "CfgId", "Exp", "Level" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.VisitorPathInfo), global::SmalBox.VisitorPathInfo.Parser, new[]{ "ShowcaseId", "ExhibitsId", "EventId", "FunctionBuildId", "Step" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.NpcTalkRequest), global::SmalBox.NpcTalkRequest.Parser, new[]{ "NpcId", "PlotId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.NpcTalkResponse), global::SmalBox.NpcTalkResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.Point2D), global::SmalBox.Point2D.Parser, new[]{ "X", "Y" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.GetAllResearchIdRequest), global::SmalBox.GetAllResearchIdRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.GetAllResearchIdResponse), global::SmalBox.GetAllResearchIdResponse.Parser, new[]{ "InfoList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.ResearchInfo), global::SmalBox.ResearchInfo.Parser, new[]{ "Id", "Researched" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.ResearchRequest), global::SmalBox.ResearchRequest.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.ResearchResponse), global::SmalBox.ResearchResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.RodUnit), global::SmalBox.RodUnit.Parser, new[]{ "Id", "ConfId", "Hp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.RodBagRequest), global::SmalBox.RodBagRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.RodBagResponse), global::SmalBox.RodBagResponse.Parser, new[]{ "RodList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.RodChangePush), global::SmalBox.RodChangePush.Parser, new[]{ "RodList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.SceneChangeRequest), global::SmalBox.SceneChangeRequest.Parser, new[]{ "Position", "MapId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.SceneChangeResponse), global::SmalBox.SceneChangeResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.SceneUnlockPush), global::SmalBox.SceneUnlockPush.Parser, new[]{ "MapId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.PurchaseGoodsRequest), global::SmalBox.PurchaseGoodsRequest.Parser, new[]{ "ConfigId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.PurchaseGoodsResponse), global::SmalBox.PurchaseGoodsResponse.Parser, new[]{ "ConfigId", "Age" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.ReplaceNickNameRequest), global::SmalBox.ReplaceNickNameRequest.Parser, new[]{ "NewName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.ReplaceNickNameResponse), global::SmalBox.ReplaceNickNameResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.ReplaceHeadUrlRequest), global::SmalBox.ReplaceHeadUrlRequest.Parser, new[]{ "HeadUrl" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmalBox.ReplaceHeadUrlResponse), global::SmalBox.ReplaceHeadUrlResponse.Parser, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum AttributeType {
    [pbr::OriginalName("DefaultAttr")] DefaultAttr = 0,
    /// <summary>
    ///疲劳值
    /// </summary>
    [pbr::OriginalName("FatigueValue")] FatigueValue = 1,
    /// <summary>
    ///金币
    /// </summary>
    [pbr::OriginalName("Coin")] Coin = 2,
    /// <summary>
    ///研究点
    /// </summary>
    [pbr::OriginalName("ResearchPoint")] ResearchPoint = 3,
    /// <summary>
    ///砖石
    /// </summary>
    [pbr::OriginalName("Diamond")] Diamond = 4,
    /// <summary>
    ///博物馆经验
    /// </summary>
    [pbr::OriginalName("MuseumExp")] MuseumExp = 5,
    /// <summary>
    ///博物馆等级
    /// </summary>
    [pbr::OriginalName("MuseumLevel")] MuseumLevel = 6,
    /// <summary>
    ///钓鱼经验值
    /// </summary>
    [pbr::OriginalName("ExpFish")] ExpFish = 11,
  }

  public enum FishPushType {
    /// <summary>
    ///0=隔天
    /// </summary>
    [pbr::OriginalName("Day")] Day = 0,
    /// <summary>
    ///间隔
    /// </summary>
    [pbr::OriginalName("Interval")] Interval = 1,
    /// <summary>
    ///道具
    /// </summary>
    [pbr::OriginalName("ItemUse")] ItemUse = 2,
    /// <summary>
    ///接取任务刷新
    /// </summary>
    [pbr::OriginalName("Mission")] Mission = 3,
  }

  public enum ItemType {
    [pbr::OriginalName("NIL")] Nil = 0,
    [pbr::OriginalName("Item")] Item = 1,
    [pbr::OriginalName("ATTR")] Attr = 2,
    [pbr::OriginalName("CatchTool")] CatchTool = 8,
    /// <summary>
    ///仅后端调内部用,不支持reward配置
    /// </summary>
    [pbr::OriginalName("CollectionItem")] CollectionItem = 15,
    [pbr::OriginalName("Showcase")] Showcase = 26,
    [pbr::OriginalName("RMB")] Rmb = 35,
  }

  public enum MissionState {
    /// <summary>
    ///未领取
    /// </summary>
    [pbr::OriginalName("NotReceived")] NotReceived = 0,
    /// <summary>
    ///领取任务
    /// </summary>
    [pbr::OriginalName("Received")] Received = 1,
    /// <summary>
    ///进度已完成
    /// </summary>
    [pbr::OriginalName("Finish")] Finish = 2,
    /// <summary>
    ///已领取奖励
    /// </summary>
    [pbr::OriginalName("Reward")] Reward = 3,
  }

  public enum Direction {
    [pbr::OriginalName("front")] Front = 0,
    [pbr::OriginalName("back")] Back = 1,
    [pbr::OriginalName("left")] Left = 2,
    [pbr::OriginalName("right")] Right = 3,
  }

  public enum ScenePosition {
    [pbr::OriginalName("Default")] Default = 0,
    [pbr::OriginalName("Fishing")] Fishing = 1,
    [pbr::OriginalName("Insect")] Insect = 2,
    [pbr::OriginalName("Museum")] Museum = 3,
  }

  #endregion

  #region Messages
  /// <summary>
  ///用于测试添加属性
  /// </summary>
  public sealed partial class AddAttributeRequest : pb::IMessage<AddAttributeRequest> {
    private static readonly pb::MessageParser<AddAttributeRequest> _parser = new pb::MessageParser<AddAttributeRequest>(() => new AddAttributeRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddAttributeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddAttributeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddAttributeRequest(AddAttributeRequest other) : this() {
      attrList_ = other.attrList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddAttributeRequest Clone() {
      return new AddAttributeRequest(this);
    }

    /// <summary>Field number for the "attrList" field.</summary>
    public const int AttrListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SmalBox.AttributeInfo> _repeated_attrList_codec
        = pb::FieldCodec.ForMessage(10, global::SmalBox.AttributeInfo.Parser);
    private readonly pbc::RepeatedField<global::SmalBox.AttributeInfo> attrList_ = new pbc::RepeatedField<global::SmalBox.AttributeInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SmalBox.AttributeInfo> AttrList {
      get { return attrList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddAttributeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddAttributeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!attrList_.Equals(other.attrList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= attrList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      attrList_.WriteTo(output, _repeated_attrList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += attrList_.CalculateSize(_repeated_attrList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddAttributeRequest other) {
      if (other == null) {
        return;
      }
      attrList_.Add(other.attrList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            attrList_.AddEntriesFrom(input, _repeated_attrList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddAttributeResponse : pb::IMessage<AddAttributeResponse> {
    private static readonly pb::MessageParser<AddAttributeResponse> _parser = new pb::MessageParser<AddAttributeResponse>(() => new AddAttributeResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddAttributeResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddAttributeResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddAttributeResponse(AddAttributeResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddAttributeResponse Clone() {
      return new AddAttributeResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddAttributeResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddAttributeResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddAttributeResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class AttributeInfo : pb::IMessage<AttributeInfo> {
    private static readonly pb::MessageParser<AttributeInfo> _parser = new pb::MessageParser<AttributeInfo>(() => new AttributeInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttributeInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttributeInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttributeInfo(AttributeInfo other) : this() {
      attrId_ = other.attrId_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttributeInfo Clone() {
      return new AttributeInfo(this);
    }

    /// <summary>Field number for the "attrId" field.</summary>
    public const int AttrIdFieldNumber = 1;
    private global::SmalBox.AttributeType attrId_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SmalBox.AttributeType AttrId {
      get { return attrId_; }
      set {
        attrId_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttributeInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttributeInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AttrId != other.AttrId) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AttrId != 0) hash ^= AttrId.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AttrId != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) AttrId);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AttrId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AttrId);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttributeInfo other) {
      if (other == null) {
        return;
      }
      if (other.AttrId != 0) {
        AttrId = other.AttrId;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            attrId_ = (global::SmalBox.AttributeType) input.ReadEnum();
            break;
          }
          case 16: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///属性变动推送
  /// </summary>
  public sealed partial class AttributeInfoPush : pb::IMessage<AttributeInfoPush> {
    private static readonly pb::MessageParser<AttributeInfoPush> _parser = new pb::MessageParser<AttributeInfoPush>(() => new AttributeInfoPush());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttributeInfoPush> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttributeInfoPush() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttributeInfoPush(AttributeInfoPush other) : this() {
      attrList_ = other.attrList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttributeInfoPush Clone() {
      return new AttributeInfoPush(this);
    }

    /// <summary>Field number for the "attrList" field.</summary>
    public const int AttrListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SmalBox.AttributeInfo> _repeated_attrList_codec
        = pb::FieldCodec.ForMessage(10, global::SmalBox.AttributeInfo.Parser);
    private readonly pbc::RepeatedField<global::SmalBox.AttributeInfo> attrList_ = new pbc::RepeatedField<global::SmalBox.AttributeInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SmalBox.AttributeInfo> AttrList {
      get { return attrList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttributeInfoPush);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttributeInfoPush other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!attrList_.Equals(other.attrList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= attrList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      attrList_.WriteTo(output, _repeated_attrList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += attrList_.CalculateSize(_repeated_attrList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttributeInfoPush other) {
      if (other == null) {
        return;
      }
      attrList_.Add(other.attrList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            attrList_.AddEntriesFrom(input, _repeated_attrList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 同步体力信息 推送
  /// </summary>
  public sealed partial class StrengthSyncRequest : pb::IMessage<StrengthSyncRequest> {
    private static readonly pb::MessageParser<StrengthSyncRequest> _parser = new pb::MessageParser<StrengthSyncRequest>(() => new StrengthSyncRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StrengthSyncRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StrengthSyncRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StrengthSyncRequest(StrengthSyncRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StrengthSyncRequest Clone() {
      return new StrengthSyncRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StrengthSyncRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StrengthSyncRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StrengthSyncRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class StrengthSyncResponse : pb::IMessage<StrengthSyncResponse> {
    private static readonly pb::MessageParser<StrengthSyncResponse> _parser = new pb::MessageParser<StrengthSyncResponse>(() => new StrengthSyncResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StrengthSyncResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StrengthSyncResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StrengthSyncResponse(StrengthSyncResponse other) : this() {
      sValue_ = other.sValue_;
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StrengthSyncResponse Clone() {
      return new StrengthSyncResponse(this);
    }

    /// <summary>Field number for the "sValue" field.</summary>
    public const int SValueFieldNumber = 1;
    private int sValue_;
    /// <summary>
    ///当前体力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SValue {
      get { return sValue_; }
      set {
        sValue_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private int time_;
    /// <summary>
    ///剩余时间second
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StrengthSyncResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StrengthSyncResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SValue != other.SValue) return false;
      if (Time != other.Time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SValue != 0) hash ^= SValue.GetHashCode();
      if (Time != 0) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SValue != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SValue);
      }
      if (Time != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SValue);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StrengthSyncResponse other) {
      if (other == null) {
        return;
      }
      if (other.SValue != 0) {
        SValue = other.SValue;
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SValue = input.ReadInt32();
            break;
          }
          case 16: {
            Time = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///鱼信息
  /// </summary>
  public sealed partial class FishUnit : pb::IMessage<FishUnit> {
    private static readonly pb::MessageParser<FishUnit> _parser = new pb::MessageParser<FishUnit>(() => new FishUnit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FishUnit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishUnit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishUnit(FishUnit other) : this() {
      fishId_ = other.fishId_;
      confId_ = other.confId_;
      size_ = other.size_;
      missionId_ = other.missionId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishUnit Clone() {
      return new FishUnit(this);
    }

    /// <summary>Field number for the "fishId" field.</summary>
    public const int FishIdFieldNumber = 1;
    private ulong fishId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FishId {
      get { return fishId_; }
      set {
        fishId_ = value;
      }
    }

    /// <summary>Field number for the "confId" field.</summary>
    public const int ConfIdFieldNumber = 2;
    private int confId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfId {
      get { return confId_; }
      set {
        confId_ = value;
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 3;
    private int size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "missionId" field.</summary>
    public const int MissionIdFieldNumber = 4;
    private int missionId_;
    /// <summary>
    ///任务ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MissionId {
      get { return missionId_; }
      set {
        missionId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FishUnit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FishUnit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FishId != other.FishId) return false;
      if (ConfId != other.ConfId) return false;
      if (Size != other.Size) return false;
      if (MissionId != other.MissionId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FishId != 0UL) hash ^= FishId.GetHashCode();
      if (ConfId != 0) hash ^= ConfId.GetHashCode();
      if (Size != 0) hash ^= Size.GetHashCode();
      if (MissionId != 0) hash ^= MissionId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FishId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(FishId);
      }
      if (ConfId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ConfId);
      }
      if (Size != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Size);
      }
      if (MissionId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MissionId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FishId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FishId);
      }
      if (ConfId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfId);
      }
      if (Size != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Size);
      }
      if (MissionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MissionId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FishUnit other) {
      if (other == null) {
        return;
      }
      if (other.FishId != 0UL) {
        FishId = other.FishId;
      }
      if (other.ConfId != 0) {
        ConfId = other.ConfId;
      }
      if (other.Size != 0) {
        Size = other.Size;
      }
      if (other.MissionId != 0) {
        MissionId = other.MissionId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FishId = input.ReadUInt64();
            break;
          }
          case 16: {
            ConfId = input.ReadInt32();
            break;
          }
          case 24: {
            Size = input.ReadInt32();
            break;
          }
          case 32: {
            MissionId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///鱼塘 区域
  /// </summary>
  public sealed partial class FishAreaUnit : pb::IMessage<FishAreaUnit> {
    private static readonly pb::MessageParser<FishAreaUnit> _parser = new pb::MessageParser<FishAreaUnit>(() => new FishAreaUnit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FishAreaUnit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishAreaUnit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishAreaUnit(FishAreaUnit other) : this() {
      areaId_ = other.areaId_;
      confId_ = other.confId_;
      fishList_ = other.fishList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishAreaUnit Clone() {
      return new FishAreaUnit(this);
    }

    /// <summary>Field number for the "areaId" field.</summary>
    public const int AreaIdFieldNumber = 1;
    private ulong areaId_;
    /// <summary>
    ///随机的唯一ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AreaId {
      get { return areaId_; }
      set {
        areaId_ = value;
      }
    }

    /// <summary>Field number for the "confId" field.</summary>
    public const int ConfIdFieldNumber = 2;
    private int confId_;
    /// <summary>
    ///鱼塘ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfId {
      get { return confId_; }
      set {
        confId_ = value;
      }
    }

    /// <summary>Field number for the "fishList" field.</summary>
    public const int FishListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::SmalBox.FishUnit> _repeated_fishList_codec
        = pb::FieldCodec.ForMessage(26, global::SmalBox.FishUnit.Parser);
    private readonly pbc::RepeatedField<global::SmalBox.FishUnit> fishList_ = new pbc::RepeatedField<global::SmalBox.FishUnit>();
    /// <summary>
    ///区域内所有鱼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SmalBox.FishUnit> FishList {
      get { return fishList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FishAreaUnit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FishAreaUnit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AreaId != other.AreaId) return false;
      if (ConfId != other.ConfId) return false;
      if(!fishList_.Equals(other.fishList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AreaId != 0UL) hash ^= AreaId.GetHashCode();
      if (ConfId != 0) hash ^= ConfId.GetHashCode();
      hash ^= fishList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AreaId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(AreaId);
      }
      if (ConfId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ConfId);
      }
      fishList_.WriteTo(output, _repeated_fishList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AreaId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AreaId);
      }
      if (ConfId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfId);
      }
      size += fishList_.CalculateSize(_repeated_fishList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FishAreaUnit other) {
      if (other == null) {
        return;
      }
      if (other.AreaId != 0UL) {
        AreaId = other.AreaId;
      }
      if (other.ConfId != 0) {
        ConfId = other.ConfId;
      }
      fishList_.Add(other.fishList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AreaId = input.ReadUInt64();
            break;
          }
          case 16: {
            ConfId = input.ReadInt32();
            break;
          }
          case 26: {
            fishList_.AddEntriesFrom(input, _repeated_fishList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///message FishingInfoRequest {
  /////    int32 mapId = 1;//场景ID ps:这里参数->  改变场景通用协议 SceneChangeRequest
  ///}
  /// </summary>
  public sealed partial class FishingInfoPush : pb::IMessage<FishingInfoPush> {
    private static readonly pb::MessageParser<FishingInfoPush> _parser = new pb::MessageParser<FishingInfoPush>(() => new FishingInfoPush());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FishingInfoPush> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishingInfoPush() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishingInfoPush(FishingInfoPush other) : this() {
      areaList_ = other.areaList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishingInfoPush Clone() {
      return new FishingInfoPush(this);
    }

    /// <summary>Field number for the "areaList" field.</summary>
    public const int AreaListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SmalBox.FishAreaUnit> _repeated_areaList_codec
        = pb::FieldCodec.ForMessage(10, global::SmalBox.FishAreaUnit.Parser);
    private readonly pbc::RepeatedField<global::SmalBox.FishAreaUnit> areaList_ = new pbc::RepeatedField<global::SmalBox.FishAreaUnit>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SmalBox.FishAreaUnit> AreaList {
      get { return areaList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FishingInfoPush);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FishingInfoPush other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!areaList_.Equals(other.areaList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= areaList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      areaList_.WriteTo(output, _repeated_areaList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += areaList_.CalculateSize(_repeated_areaList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FishingInfoPush other) {
      if (other == null) {
        return;
      }
      areaList_.Add(other.areaList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            areaList_.AddEntriesFrom(input, _repeated_areaList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FishingStartRequest : pb::IMessage<FishingStartRequest> {
    private static readonly pb::MessageParser<FishingStartRequest> _parser = new pb::MessageParser<FishingStartRequest>(() => new FishingStartRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FishingStartRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishingStartRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishingStartRequest(FishingStartRequest other) : this() {
      areaId_ = other.areaId_;
      fishId_ = other.fishId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishingStartRequest Clone() {
      return new FishingStartRequest(this);
    }

    /// <summary>Field number for the "areaId" field.</summary>
    public const int AreaIdFieldNumber = 1;
    private ulong areaId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AreaId {
      get { return areaId_; }
      set {
        areaId_ = value;
      }
    }

    /// <summary>Field number for the "fishId" field.</summary>
    public const int FishIdFieldNumber = 2;
    private ulong fishId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FishId {
      get { return fishId_; }
      set {
        fishId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FishingStartRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FishingStartRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AreaId != other.AreaId) return false;
      if (FishId != other.FishId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AreaId != 0UL) hash ^= AreaId.GetHashCode();
      if (FishId != 0UL) hash ^= FishId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AreaId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(AreaId);
      }
      if (FishId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(FishId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AreaId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AreaId);
      }
      if (FishId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FishId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FishingStartRequest other) {
      if (other == null) {
        return;
      }
      if (other.AreaId != 0UL) {
        AreaId = other.AreaId;
      }
      if (other.FishId != 0UL) {
        FishId = other.FishId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AreaId = input.ReadUInt64();
            break;
          }
          case 16: {
            FishId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FishingStartResponse : pb::IMessage<FishingStartResponse> {
    private static readonly pb::MessageParser<FishingStartResponse> _parser = new pb::MessageParser<FishingStartResponse>(() => new FishingStartResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FishingStartResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishingStartResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishingStartResponse(FishingStartResponse other) : this() {
      fishId_ = other.fishId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishingStartResponse Clone() {
      return new FishingStartResponse(this);
    }

    /// <summary>Field number for the "fishId" field.</summary>
    public const int FishIdFieldNumber = 1;
    private ulong fishId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FishId {
      get { return fishId_; }
      set {
        fishId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FishingStartResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FishingStartResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FishId != other.FishId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FishId != 0UL) hash ^= FishId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FishId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(FishId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FishId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FishId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FishingStartResponse other) {
      if (other == null) {
        return;
      }
      if (other.FishId != 0UL) {
        FishId = other.FishId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FishId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FishingCatchRequest : pb::IMessage<FishingCatchRequest> {
    private static readonly pb::MessageParser<FishingCatchRequest> _parser = new pb::MessageParser<FishingCatchRequest>(() => new FishingCatchRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FishingCatchRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishingCatchRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishingCatchRequest(FishingCatchRequest other) : this() {
      areaId_ = other.areaId_;
      fishId_ = other.fishId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishingCatchRequest Clone() {
      return new FishingCatchRequest(this);
    }

    /// <summary>Field number for the "areaId" field.</summary>
    public const int AreaIdFieldNumber = 1;
    private ulong areaId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AreaId {
      get { return areaId_; }
      set {
        areaId_ = value;
      }
    }

    /// <summary>Field number for the "fishId" field.</summary>
    public const int FishIdFieldNumber = 2;
    private ulong fishId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FishId {
      get { return fishId_; }
      set {
        fishId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FishingCatchRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FishingCatchRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AreaId != other.AreaId) return false;
      if (FishId != other.FishId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AreaId != 0UL) hash ^= AreaId.GetHashCode();
      if (FishId != 0UL) hash ^= FishId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AreaId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(AreaId);
      }
      if (FishId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(FishId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AreaId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AreaId);
      }
      if (FishId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FishId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FishingCatchRequest other) {
      if (other == null) {
        return;
      }
      if (other.AreaId != 0UL) {
        AreaId = other.AreaId;
      }
      if (other.FishId != 0UL) {
        FishId = other.FishId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AreaId = input.ReadUInt64();
            break;
          }
          case 16: {
            FishId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FishingCatchResponse : pb::IMessage<FishingCatchResponse> {
    private static readonly pb::MessageParser<FishingCatchResponse> _parser = new pb::MessageParser<FishingCatchResponse>(() => new FishingCatchResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FishingCatchResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishingCatchResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishingCatchResponse(FishingCatchResponse other) : this() {
      isFirst_ = other.isFirst_;
      fishId_ = other.fishId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishingCatchResponse Clone() {
      return new FishingCatchResponse(this);
    }

    /// <summary>Field number for the "isFirst" field.</summary>
    public const int IsFirstFieldNumber = 1;
    private bool isFirst_;
    /// <summary>
    ///是否第一次捕获该鱼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFirst {
      get { return isFirst_; }
      set {
        isFirst_ = value;
      }
    }

    /// <summary>Field number for the "fishId" field.</summary>
    public const int FishIdFieldNumber = 2;
    private ulong fishId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FishId {
      get { return fishId_; }
      set {
        fishId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FishingCatchResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FishingCatchResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsFirst != other.IsFirst) return false;
      if (FishId != other.FishId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsFirst != false) hash ^= IsFirst.GetHashCode();
      if (FishId != 0UL) hash ^= FishId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsFirst != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsFirst);
      }
      if (FishId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(FishId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsFirst != false) {
        size += 1 + 1;
      }
      if (FishId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FishId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FishingCatchResponse other) {
      if (other == null) {
        return;
      }
      if (other.IsFirst != false) {
        IsFirst = other.IsFirst;
      }
      if (other.FishId != 0UL) {
        FishId = other.FishId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsFirst = input.ReadBool();
            break;
          }
          case 16: {
            FishId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FishingRefreshUseItemRequest : pb::IMessage<FishingRefreshUseItemRequest> {
    private static readonly pb::MessageParser<FishingRefreshUseItemRequest> _parser = new pb::MessageParser<FishingRefreshUseItemRequest>(() => new FishingRefreshUseItemRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FishingRefreshUseItemRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishingRefreshUseItemRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishingRefreshUseItemRequest(FishingRefreshUseItemRequest other) : this() {
      areaId_ = other.areaId_;
      item_ = other.item_ != null ? other.item_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishingRefreshUseItemRequest Clone() {
      return new FishingRefreshUseItemRequest(this);
    }

    /// <summary>Field number for the "areaId" field.</summary>
    public const int AreaIdFieldNumber = 1;
    private ulong areaId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AreaId {
      get { return areaId_; }
      set {
        areaId_ = value;
      }
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 2;
    private global::SmalBox.ItemUseInfo item_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SmalBox.ItemUseInfo Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FishingRefreshUseItemRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FishingRefreshUseItemRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AreaId != other.AreaId) return false;
      if (!object.Equals(Item, other.Item)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AreaId != 0UL) hash ^= AreaId.GetHashCode();
      if (item_ != null) hash ^= Item.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AreaId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(AreaId);
      }
      if (item_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Item);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AreaId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AreaId);
      }
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FishingRefreshUseItemRequest other) {
      if (other == null) {
        return;
      }
      if (other.AreaId != 0UL) {
        AreaId = other.AreaId;
      }
      if (other.item_ != null) {
        if (item_ == null) {
          item_ = new global::SmalBox.ItemUseInfo();
        }
        Item.MergeFrom(other.Item);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AreaId = input.ReadUInt64();
            break;
          }
          case 18: {
            if (item_ == null) {
              item_ = new global::SmalBox.ItemUseInfo();
            }
            input.ReadMessage(item_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FishingRefreshUseItemResponse : pb::IMessage<FishingRefreshUseItemResponse> {
    private static readonly pb::MessageParser<FishingRefreshUseItemResponse> _parser = new pb::MessageParser<FishingRefreshUseItemResponse>(() => new FishingRefreshUseItemResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FishingRefreshUseItemResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishingRefreshUseItemResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishingRefreshUseItemResponse(FishingRefreshUseItemResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishingRefreshUseItemResponse Clone() {
      return new FishingRefreshUseItemResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FishingRefreshUseItemResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FishingRefreshUseItemResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FishingRefreshUseItemResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class ChangeFish : pb::IMessage<ChangeFish> {
    private static readonly pb::MessageParser<ChangeFish> _parser = new pb::MessageParser<ChangeFish>(() => new ChangeFish());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeFish> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeFish() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeFish(ChangeFish other) : this() {
      pondId_ = other.pondId_;
      fish_ = other.fish_ != null ? other.fish_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeFish Clone() {
      return new ChangeFish(this);
    }

    /// <summary>Field number for the "pondId" field.</summary>
    public const int PondIdFieldNumber = 1;
    private ulong pondId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PondId {
      get { return pondId_; }
      set {
        pondId_ = value;
      }
    }

    /// <summary>Field number for the "fish" field.</summary>
    public const int FishFieldNumber = 2;
    private global::SmalBox.FishUnit fish_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SmalBox.FishUnit Fish {
      get { return fish_; }
      set {
        fish_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeFish);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeFish other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PondId != other.PondId) return false;
      if (!object.Equals(Fish, other.Fish)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PondId != 0UL) hash ^= PondId.GetHashCode();
      if (fish_ != null) hash ^= Fish.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PondId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PondId);
      }
      if (fish_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Fish);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PondId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PondId);
      }
      if (fish_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Fish);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeFish other) {
      if (other == null) {
        return;
      }
      if (other.PondId != 0UL) {
        PondId = other.PondId;
      }
      if (other.fish_ != null) {
        if (fish_ == null) {
          fish_ = new global::SmalBox.FishUnit();
        }
        Fish.MergeFrom(other.Fish);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PondId = input.ReadUInt64();
            break;
          }
          case 18: {
            if (fish_ == null) {
              fish_ = new global::SmalBox.FishUnit();
            }
            input.ReadMessage(fish_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FishingRefreshPush : pb::IMessage<FishingRefreshPush> {
    private static readonly pb::MessageParser<FishingRefreshPush> _parser = new pb::MessageParser<FishingRefreshPush>(() => new FishingRefreshPush());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FishingRefreshPush> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishingRefreshPush() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishingRefreshPush(FishingRefreshPush other) : this() {
      pushType_ = other.pushType_;
      fishList_ = other.fishList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishingRefreshPush Clone() {
      return new FishingRefreshPush(this);
    }

    /// <summary>Field number for the "pushType" field.</summary>
    public const int PushTypeFieldNumber = 1;
    private global::SmalBox.FishPushType pushType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SmalBox.FishPushType PushType {
      get { return pushType_; }
      set {
        pushType_ = value;
      }
    }

    /// <summary>Field number for the "fishList" field.</summary>
    public const int FishListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SmalBox.ChangeFish> _repeated_fishList_codec
        = pb::FieldCodec.ForMessage(18, global::SmalBox.ChangeFish.Parser);
    private readonly pbc::RepeatedField<global::SmalBox.ChangeFish> fishList_ = new pbc::RepeatedField<global::SmalBox.ChangeFish>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SmalBox.ChangeFish> FishList {
      get { return fishList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FishingRefreshPush);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FishingRefreshPush other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PushType != other.PushType) return false;
      if(!fishList_.Equals(other.fishList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PushType != 0) hash ^= PushType.GetHashCode();
      hash ^= fishList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PushType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PushType);
      }
      fishList_.WriteTo(output, _repeated_fishList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PushType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PushType);
      }
      size += fishList_.CalculateSize(_repeated_fishList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FishingRefreshPush other) {
      if (other == null) {
        return;
      }
      if (other.PushType != 0) {
        PushType = other.PushType;
      }
      fishList_.Add(other.fishList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            pushType_ = (global::SmalBox.FishPushType) input.ReadEnum();
            break;
          }
          case 18: {
            fishList_.AddEntriesFrom(input, _repeated_fishList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GMChangeAssetRequest : pb::IMessage<GMChangeAssetRequest> {
    private static readonly pb::MessageParser<GMChangeAssetRequest> _parser = new pb::MessageParser<GMChangeAssetRequest>(() => new GMChangeAssetRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GMChangeAssetRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMChangeAssetRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMChangeAssetRequest(GMChangeAssetRequest other) : this() {
      isCost_ = other.isCost_;
      changeList_ = other.changeList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMChangeAssetRequest Clone() {
      return new GMChangeAssetRequest(this);
    }

    /// <summary>Field number for the "isCost" field.</summary>
    public const int IsCostFieldNumber = 1;
    private bool isCost_;
    /// <summary>
    ///true=扣除 false=add
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCost {
      get { return isCost_; }
      set {
        isCost_ = value;
      }
    }

    /// <summary>Field number for the "changeList" field.</summary>
    public const int ChangeListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SmalBox.ItemUseInfo> _repeated_changeList_codec
        = pb::FieldCodec.ForMessage(18, global::SmalBox.ItemUseInfo.Parser);
    private readonly pbc::RepeatedField<global::SmalBox.ItemUseInfo> changeList_ = new pbc::RepeatedField<global::SmalBox.ItemUseInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SmalBox.ItemUseInfo> ChangeList {
      get { return changeList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GMChangeAssetRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GMChangeAssetRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsCost != other.IsCost) return false;
      if(!changeList_.Equals(other.changeList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsCost != false) hash ^= IsCost.GetHashCode();
      hash ^= changeList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsCost != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsCost);
      }
      changeList_.WriteTo(output, _repeated_changeList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsCost != false) {
        size += 1 + 1;
      }
      size += changeList_.CalculateSize(_repeated_changeList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GMChangeAssetRequest other) {
      if (other == null) {
        return;
      }
      if (other.IsCost != false) {
        IsCost = other.IsCost;
      }
      changeList_.Add(other.changeList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsCost = input.ReadBool();
            break;
          }
          case 18: {
            changeList_.AddEntriesFrom(input, _repeated_changeList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GMChangeAssetResponse : pb::IMessage<GMChangeAssetResponse> {
    private static readonly pb::MessageParser<GMChangeAssetResponse> _parser = new pb::MessageParser<GMChangeAssetResponse>(() => new GMChangeAssetResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GMChangeAssetResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMChangeAssetResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMChangeAssetResponse(GMChangeAssetResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMChangeAssetResponse Clone() {
      return new GMChangeAssetResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GMChangeAssetResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GMChangeAssetResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GMChangeAssetResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class GMUnlockMapRequest : pb::IMessage<GMUnlockMapRequest> {
    private static readonly pb::MessageParser<GMUnlockMapRequest> _parser = new pb::MessageParser<GMUnlockMapRequest>(() => new GMUnlockMapRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GMUnlockMapRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMUnlockMapRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMUnlockMapRequest(GMUnlockMapRequest other) : this() {
      mapId_ = other.mapId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMUnlockMapRequest Clone() {
      return new GMUnlockMapRequest(this);
    }

    /// <summary>Field number for the "mapId" field.</summary>
    public const int MapIdFieldNumber = 1;
    private int mapId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MapId {
      get { return mapId_; }
      set {
        mapId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GMUnlockMapRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GMUnlockMapRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MapId != other.MapId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MapId != 0) hash ^= MapId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MapId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MapId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GMUnlockMapRequest other) {
      if (other == null) {
        return;
      }
      if (other.MapId != 0) {
        MapId = other.MapId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MapId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GMUnlockMapResponse : pb::IMessage<GMUnlockMapResponse> {
    private static readonly pb::MessageParser<GMUnlockMapResponse> _parser = new pb::MessageParser<GMUnlockMapResponse>(() => new GMUnlockMapResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GMUnlockMapResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMUnlockMapResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMUnlockMapResponse(GMUnlockMapResponse other) : this() {
      mapId_ = other.mapId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMUnlockMapResponse Clone() {
      return new GMUnlockMapResponse(this);
    }

    /// <summary>Field number for the "mapId" field.</summary>
    public const int MapIdFieldNumber = 1;
    private int mapId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MapId {
      get { return mapId_; }
      set {
        mapId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GMUnlockMapResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GMUnlockMapResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MapId != other.MapId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MapId != 0) hash ^= MapId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MapId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MapId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GMUnlockMapResponse other) {
      if (other == null) {
        return;
      }
      if (other.MapId != 0) {
        MapId = other.MapId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MapId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GMShowcaseAddExpRequest : pb::IMessage<GMShowcaseAddExpRequest> {
    private static readonly pb::MessageParser<GMShowcaseAddExpRequest> _parser = new pb::MessageParser<GMShowcaseAddExpRequest>(() => new GMShowcaseAddExpRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GMShowcaseAddExpRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMShowcaseAddExpRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMShowcaseAddExpRequest(GMShowcaseAddExpRequest other) : this() {
      showcaseId_ = other.showcaseId_;
      exp_ = other.exp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMShowcaseAddExpRequest Clone() {
      return new GMShowcaseAddExpRequest(this);
    }

    /// <summary>Field number for the "showcaseId" field.</summary>
    public const int ShowcaseIdFieldNumber = 1;
    private long showcaseId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ShowcaseId {
      get { return showcaseId_; }
      set {
        showcaseId_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 2;
    private int exp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GMShowcaseAddExpRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GMShowcaseAddExpRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShowcaseId != other.ShowcaseId) return false;
      if (Exp != other.Exp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ShowcaseId != 0L) hash ^= ShowcaseId.GetHashCode();
      if (Exp != 0) hash ^= Exp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShowcaseId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ShowcaseId);
      }
      if (Exp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Exp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShowcaseId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ShowcaseId);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GMShowcaseAddExpRequest other) {
      if (other == null) {
        return;
      }
      if (other.ShowcaseId != 0L) {
        ShowcaseId = other.ShowcaseId;
      }
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ShowcaseId = input.ReadInt64();
            break;
          }
          case 16: {
            Exp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GMShowcaseAddExpResponse : pb::IMessage<GMShowcaseAddExpResponse> {
    private static readonly pb::MessageParser<GMShowcaseAddExpResponse> _parser = new pb::MessageParser<GMShowcaseAddExpResponse>(() => new GMShowcaseAddExpResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GMShowcaseAddExpResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMShowcaseAddExpResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMShowcaseAddExpResponse(GMShowcaseAddExpResponse other) : this() {
      showcaseId_ = other.showcaseId_;
      exp_ = other.exp_;
      level_ = other.level_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMShowcaseAddExpResponse Clone() {
      return new GMShowcaseAddExpResponse(this);
    }

    /// <summary>Field number for the "showcaseId" field.</summary>
    public const int ShowcaseIdFieldNumber = 1;
    private long showcaseId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ShowcaseId {
      get { return showcaseId_; }
      set {
        showcaseId_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 2;
    private int exp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GMShowcaseAddExpResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GMShowcaseAddExpResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShowcaseId != other.ShowcaseId) return false;
      if (Exp != other.Exp) return false;
      if (Level != other.Level) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ShowcaseId != 0L) hash ^= ShowcaseId.GetHashCode();
      if (Exp != 0) hash ^= Exp.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShowcaseId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ShowcaseId);
      }
      if (Exp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Exp);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShowcaseId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ShowcaseId);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GMShowcaseAddExpResponse other) {
      if (other == null) {
        return;
      }
      if (other.ShowcaseId != 0L) {
        ShowcaseId = other.ShowcaseId;
      }
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ShowcaseId = input.ReadInt64();
            break;
          }
          case 16: {
            Exp = input.ReadInt32();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GMVisitorAddExpRequest : pb::IMessage<GMVisitorAddExpRequest> {
    private static readonly pb::MessageParser<GMVisitorAddExpRequest> _parser = new pb::MessageParser<GMVisitorAddExpRequest>(() => new GMVisitorAddExpRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GMVisitorAddExpRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMVisitorAddExpRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMVisitorAddExpRequest(GMVisitorAddExpRequest other) : this() {
      cfgId_ = other.cfgId_;
      exp_ = other.exp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMVisitorAddExpRequest Clone() {
      return new GMVisitorAddExpRequest(this);
    }

    /// <summary>Field number for the "cfgId" field.</summary>
    public const int CfgIdFieldNumber = 1;
    private int cfgId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CfgId {
      get { return cfgId_; }
      set {
        cfgId_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 2;
    private int exp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GMVisitorAddExpRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GMVisitorAddExpRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CfgId != other.CfgId) return false;
      if (Exp != other.Exp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CfgId != 0) hash ^= CfgId.GetHashCode();
      if (Exp != 0) hash ^= Exp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CfgId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CfgId);
      }
      if (Exp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Exp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CfgId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CfgId);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GMVisitorAddExpRequest other) {
      if (other == null) {
        return;
      }
      if (other.CfgId != 0) {
        CfgId = other.CfgId;
      }
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CfgId = input.ReadInt32();
            break;
          }
          case 16: {
            Exp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GMVisitorAddExpResponse : pb::IMessage<GMVisitorAddExpResponse> {
    private static readonly pb::MessageParser<GMVisitorAddExpResponse> _parser = new pb::MessageParser<GMVisitorAddExpResponse>(() => new GMVisitorAddExpResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GMVisitorAddExpResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMVisitorAddExpResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMVisitorAddExpResponse(GMVisitorAddExpResponse other) : this() {
      cfgId_ = other.cfgId_;
      exp_ = other.exp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMVisitorAddExpResponse Clone() {
      return new GMVisitorAddExpResponse(this);
    }

    /// <summary>Field number for the "cfgId" field.</summary>
    public const int CfgIdFieldNumber = 1;
    private int cfgId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CfgId {
      get { return cfgId_; }
      set {
        cfgId_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 2;
    private int exp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GMVisitorAddExpResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GMVisitorAddExpResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CfgId != other.CfgId) return false;
      if (Exp != other.Exp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CfgId != 0) hash ^= CfgId.GetHashCode();
      if (Exp != 0) hash ^= Exp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CfgId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CfgId);
      }
      if (Exp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Exp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CfgId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CfgId);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GMVisitorAddExpResponse other) {
      if (other == null) {
        return;
      }
      if (other.CfgId != 0) {
        CfgId = other.CfgId;
      }
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CfgId = input.ReadInt32();
            break;
          }
          case 16: {
            Exp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GMAddCollectionLvRequest : pb::IMessage<GMAddCollectionLvRequest> {
    private static readonly pb::MessageParser<GMAddCollectionLvRequest> _parser = new pb::MessageParser<GMAddCollectionLvRequest>(() => new GMAddCollectionLvRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GMAddCollectionLvRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMAddCollectionLvRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMAddCollectionLvRequest(GMAddCollectionLvRequest other) : this() {
      collectionId_ = other.collectionId_;
      addLevel_ = other.addLevel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMAddCollectionLvRequest Clone() {
      return new GMAddCollectionLvRequest(this);
    }

    /// <summary>Field number for the "collectionId" field.</summary>
    public const int CollectionIdFieldNumber = 1;
    private int collectionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CollectionId {
      get { return collectionId_; }
      set {
        collectionId_ = value;
      }
    }

    /// <summary>Field number for the "addLevel" field.</summary>
    public const int AddLevelFieldNumber = 2;
    private int addLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AddLevel {
      get { return addLevel_; }
      set {
        addLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GMAddCollectionLvRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GMAddCollectionLvRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CollectionId != other.CollectionId) return false;
      if (AddLevel != other.AddLevel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CollectionId != 0) hash ^= CollectionId.GetHashCode();
      if (AddLevel != 0) hash ^= AddLevel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CollectionId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CollectionId);
      }
      if (AddLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AddLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CollectionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CollectionId);
      }
      if (AddLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AddLevel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GMAddCollectionLvRequest other) {
      if (other == null) {
        return;
      }
      if (other.CollectionId != 0) {
        CollectionId = other.CollectionId;
      }
      if (other.AddLevel != 0) {
        AddLevel = other.AddLevel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CollectionId = input.ReadInt32();
            break;
          }
          case 16: {
            AddLevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GMAddCollectionLvResponse : pb::IMessage<GMAddCollectionLvResponse> {
    private static readonly pb::MessageParser<GMAddCollectionLvResponse> _parser = new pb::MessageParser<GMAddCollectionLvResponse>(() => new GMAddCollectionLvResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GMAddCollectionLvResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMAddCollectionLvResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMAddCollectionLvResponse(GMAddCollectionLvResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMAddCollectionLvResponse Clone() {
      return new GMAddCollectionLvResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GMAddCollectionLvResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GMAddCollectionLvResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GMAddCollectionLvResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class GMUnlockHandbookRequest : pb::IMessage<GMUnlockHandbookRequest> {
    private static readonly pb::MessageParser<GMUnlockHandbookRequest> _parser = new pb::MessageParser<GMUnlockHandbookRequest>(() => new GMUnlockHandbookRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GMUnlockHandbookRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMUnlockHandbookRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMUnlockHandbookRequest(GMUnlockHandbookRequest other) : this() {
      collectionItemId_ = other.collectionItemId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMUnlockHandbookRequest Clone() {
      return new GMUnlockHandbookRequest(this);
    }

    /// <summary>Field number for the "collectionItemId" field.</summary>
    public const int CollectionItemIdFieldNumber = 1;
    private int collectionItemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CollectionItemId {
      get { return collectionItemId_; }
      set {
        collectionItemId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GMUnlockHandbookRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GMUnlockHandbookRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CollectionItemId != other.CollectionItemId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CollectionItemId != 0) hash ^= CollectionItemId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CollectionItemId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CollectionItemId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CollectionItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CollectionItemId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GMUnlockHandbookRequest other) {
      if (other == null) {
        return;
      }
      if (other.CollectionItemId != 0) {
        CollectionItemId = other.CollectionItemId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CollectionItemId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GMUnlockHandbookResponse : pb::IMessage<GMUnlockHandbookResponse> {
    private static readonly pb::MessageParser<GMUnlockHandbookResponse> _parser = new pb::MessageParser<GMUnlockHandbookResponse>(() => new GMUnlockHandbookResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GMUnlockHandbookResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMUnlockHandbookResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMUnlockHandbookResponse(GMUnlockHandbookResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMUnlockHandbookResponse Clone() {
      return new GMUnlockHandbookResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GMUnlockHandbookResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GMUnlockHandbookResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GMUnlockHandbookResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class GMUnlockAllHandbookRequest : pb::IMessage<GMUnlockAllHandbookRequest> {
    private static readonly pb::MessageParser<GMUnlockAllHandbookRequest> _parser = new pb::MessageParser<GMUnlockAllHandbookRequest>(() => new GMUnlockAllHandbookRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GMUnlockAllHandbookRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMUnlockAllHandbookRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMUnlockAllHandbookRequest(GMUnlockAllHandbookRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMUnlockAllHandbookRequest Clone() {
      return new GMUnlockAllHandbookRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GMUnlockAllHandbookRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GMUnlockAllHandbookRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GMUnlockAllHandbookRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class GMUnlockAllHandbookResponse : pb::IMessage<GMUnlockAllHandbookResponse> {
    private static readonly pb::MessageParser<GMUnlockAllHandbookResponse> _parser = new pb::MessageParser<GMUnlockAllHandbookResponse>(() => new GMUnlockAllHandbookResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GMUnlockAllHandbookResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMUnlockAllHandbookResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMUnlockAllHandbookResponse(GMUnlockAllHandbookResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMUnlockAllHandbookResponse Clone() {
      return new GMUnlockAllHandbookResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GMUnlockAllHandbookResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GMUnlockAllHandbookResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GMUnlockAllHandbookResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class GMUnlockMuseumAreaRequest : pb::IMessage<GMUnlockMuseumAreaRequest> {
    private static readonly pb::MessageParser<GMUnlockMuseumAreaRequest> _parser = new pb::MessageParser<GMUnlockMuseumAreaRequest>(() => new GMUnlockMuseumAreaRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GMUnlockMuseumAreaRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMUnlockMuseumAreaRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMUnlockMuseumAreaRequest(GMUnlockMuseumAreaRequest other) : this() {
      areaId_ = other.areaId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMUnlockMuseumAreaRequest Clone() {
      return new GMUnlockMuseumAreaRequest(this);
    }

    /// <summary>Field number for the "areaId" field.</summary>
    public const int AreaIdFieldNumber = 1;
    private int areaId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AreaId {
      get { return areaId_; }
      set {
        areaId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GMUnlockMuseumAreaRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GMUnlockMuseumAreaRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AreaId != other.AreaId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AreaId != 0) hash ^= AreaId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AreaId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AreaId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AreaId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AreaId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GMUnlockMuseumAreaRequest other) {
      if (other == null) {
        return;
      }
      if (other.AreaId != 0) {
        AreaId = other.AreaId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AreaId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GMUnlockMuseumAreaResponse : pb::IMessage<GMUnlockMuseumAreaResponse> {
    private static readonly pb::MessageParser<GMUnlockMuseumAreaResponse> _parser = new pb::MessageParser<GMUnlockMuseumAreaResponse>(() => new GMUnlockMuseumAreaResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GMUnlockMuseumAreaResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMUnlockMuseumAreaResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMUnlockMuseumAreaResponse(GMUnlockMuseumAreaResponse other) : this() {
      areaId_ = other.areaId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMUnlockMuseumAreaResponse Clone() {
      return new GMUnlockMuseumAreaResponse(this);
    }

    /// <summary>Field number for the "areaId" field.</summary>
    public const int AreaIdFieldNumber = 1;
    private int areaId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AreaId {
      get { return areaId_; }
      set {
        areaId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GMUnlockMuseumAreaResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GMUnlockMuseumAreaResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AreaId != other.AreaId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AreaId != 0) hash ^= AreaId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AreaId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AreaId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AreaId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AreaId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GMUnlockMuseumAreaResponse other) {
      if (other == null) {
        return;
      }
      if (other.AreaId != 0) {
        AreaId = other.AreaId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AreaId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GmFinishMissionRequest : pb::IMessage<GmFinishMissionRequest> {
    private static readonly pb::MessageParser<GmFinishMissionRequest> _parser = new pb::MessageParser<GmFinishMissionRequest>(() => new GmFinishMissionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GmFinishMissionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GmFinishMissionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GmFinishMissionRequest(GmFinishMissionRequest other) : this() {
      missionId_ = other.missionId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GmFinishMissionRequest Clone() {
      return new GmFinishMissionRequest(this);
    }

    /// <summary>Field number for the "missionId" field.</summary>
    public const int MissionIdFieldNumber = 1;
    private int missionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MissionId {
      get { return missionId_; }
      set {
        missionId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GmFinishMissionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GmFinishMissionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MissionId != other.MissionId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MissionId != 0) hash ^= MissionId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MissionId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MissionId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MissionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MissionId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GmFinishMissionRequest other) {
      if (other == null) {
        return;
      }
      if (other.MissionId != 0) {
        MissionId = other.MissionId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MissionId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GmFinishMissionResponse : pb::IMessage<GmFinishMissionResponse> {
    private static readonly pb::MessageParser<GmFinishMissionResponse> _parser = new pb::MessageParser<GmFinishMissionResponse>(() => new GmFinishMissionResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GmFinishMissionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GmFinishMissionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GmFinishMissionResponse(GmFinishMissionResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GmFinishMissionResponse Clone() {
      return new GmFinishMissionResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GmFinishMissionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GmFinishMissionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GmFinishMissionResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class GMUnlockResearchRequest : pb::IMessage<GMUnlockResearchRequest> {
    private static readonly pb::MessageParser<GMUnlockResearchRequest> _parser = new pb::MessageParser<GMUnlockResearchRequest>(() => new GMUnlockResearchRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GMUnlockResearchRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMUnlockResearchRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMUnlockResearchRequest(GMUnlockResearchRequest other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMUnlockResearchRequest Clone() {
      return new GMUnlockResearchRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GMUnlockResearchRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GMUnlockResearchRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GMUnlockResearchRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GMUnlockResearchResponse : pb::IMessage<GMUnlockResearchResponse> {
    private static readonly pb::MessageParser<GMUnlockResearchResponse> _parser = new pb::MessageParser<GMUnlockResearchResponse>(() => new GMUnlockResearchResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GMUnlockResearchResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMUnlockResearchResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMUnlockResearchResponse(GMUnlockResearchResponse other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMUnlockResearchResponse Clone() {
      return new GMUnlockResearchResponse(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GMUnlockResearchResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GMUnlockResearchResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GMUnlockResearchResponse other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GMSkipMissionByIdRequest : pb::IMessage<GMSkipMissionByIdRequest> {
    private static readonly pb::MessageParser<GMSkipMissionByIdRequest> _parser = new pb::MessageParser<GMSkipMissionByIdRequest>(() => new GMSkipMissionByIdRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GMSkipMissionByIdRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMSkipMissionByIdRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMSkipMissionByIdRequest(GMSkipMissionByIdRequest other) : this() {
      missionId_ = other.missionId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMSkipMissionByIdRequest Clone() {
      return new GMSkipMissionByIdRequest(this);
    }

    /// <summary>Field number for the "missionId" field.</summary>
    public const int MissionIdFieldNumber = 1;
    private int missionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MissionId {
      get { return missionId_; }
      set {
        missionId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GMSkipMissionByIdRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GMSkipMissionByIdRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MissionId != other.MissionId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MissionId != 0) hash ^= MissionId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MissionId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MissionId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MissionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MissionId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GMSkipMissionByIdRequest other) {
      if (other == null) {
        return;
      }
      if (other.MissionId != 0) {
        MissionId = other.MissionId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MissionId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GMSkipMissionByIdResponse : pb::IMessage<GMSkipMissionByIdResponse> {
    private static readonly pb::MessageParser<GMSkipMissionByIdResponse> _parser = new pb::MessageParser<GMSkipMissionByIdResponse>(() => new GMSkipMissionByIdResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GMSkipMissionByIdResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMSkipMissionByIdResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMSkipMissionByIdResponse(GMSkipMissionByIdResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMSkipMissionByIdResponse Clone() {
      return new GMSkipMissionByIdResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GMSkipMissionByIdResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GMSkipMissionByIdResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GMSkipMissionByIdResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class HandbookCollection : pb::IMessage<HandbookCollection> {
    private static readonly pb::MessageParser<HandbookCollection> _parser = new pb::MessageParser<HandbookCollection>(() => new HandbookCollection());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HandbookCollection> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HandbookCollection() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HandbookCollection(HandbookCollection other) : this() {
      collectionId_ = other.collectionId_;
      lv_ = other.lv_;
      exp_ = other.exp_;
      min_ = other.min_;
      max_ = other.max_;
      rewards_ = other.rewards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HandbookCollection Clone() {
      return new HandbookCollection(this);
    }

    /// <summary>Field number for the "collectionId" field.</summary>
    public const int CollectionIdFieldNumber = 1;
    private int collectionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CollectionId {
      get { return collectionId_; }
      set {
        collectionId_ = value;
      }
    }

    /// <summary>Field number for the "lv" field.</summary>
    public const int LvFieldNumber = 2;
    private int lv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Lv {
      get { return lv_; }
      set {
        lv_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 3;
    private int exp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "min" field.</summary>
    public const int MinFieldNumber = 4;
    private int min_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Min {
      get { return min_; }
      set {
        min_ = value;
      }
    }

    /// <summary>Field number for the "max" field.</summary>
    public const int MaxFieldNumber = 5;
    private int max_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Max {
      get { return max_; }
      set {
        max_ = value;
      }
    }

    /// <summary>Field number for the "rewards" field.</summary>
    public const int RewardsFieldNumber = 6;
    private static readonly pbc::MapField<int, int>.Codec _map_rewards_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 50);
    private readonly pbc::MapField<int, int> rewards_ = new pbc::MapField<int, int>();
    /// <summary>
    ///&lt;level,state=[1有奖励 2已领取]>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> Rewards {
      get { return rewards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HandbookCollection);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HandbookCollection other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CollectionId != other.CollectionId) return false;
      if (Lv != other.Lv) return false;
      if (Exp != other.Exp) return false;
      if (Min != other.Min) return false;
      if (Max != other.Max) return false;
      if (!Rewards.Equals(other.Rewards)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CollectionId != 0) hash ^= CollectionId.GetHashCode();
      if (Lv != 0) hash ^= Lv.GetHashCode();
      if (Exp != 0) hash ^= Exp.GetHashCode();
      if (Min != 0) hash ^= Min.GetHashCode();
      if (Max != 0) hash ^= Max.GetHashCode();
      hash ^= Rewards.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CollectionId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CollectionId);
      }
      if (Lv != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Lv);
      }
      if (Exp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Exp);
      }
      if (Min != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Min);
      }
      if (Max != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Max);
      }
      rewards_.WriteTo(output, _map_rewards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CollectionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CollectionId);
      }
      if (Lv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lv);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      if (Min != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Min);
      }
      if (Max != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Max);
      }
      size += rewards_.CalculateSize(_map_rewards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HandbookCollection other) {
      if (other == null) {
        return;
      }
      if (other.CollectionId != 0) {
        CollectionId = other.CollectionId;
      }
      if (other.Lv != 0) {
        Lv = other.Lv;
      }
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
      if (other.Min != 0) {
        Min = other.Min;
      }
      if (other.Max != 0) {
        Max = other.Max;
      }
      rewards_.Add(other.rewards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CollectionId = input.ReadInt32();
            break;
          }
          case 16: {
            Lv = input.ReadInt32();
            break;
          }
          case 24: {
            Exp = input.ReadInt32();
            break;
          }
          case 32: {
            Min = input.ReadInt32();
            break;
          }
          case 40: {
            Max = input.ReadInt32();
            break;
          }
          case 50: {
            rewards_.AddEntriesFrom(input, _map_rewards_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 收集物列表
  /// </summary>
  public sealed partial class HandbookInfoRequest : pb::IMessage<HandbookInfoRequest> {
    private static readonly pb::MessageParser<HandbookInfoRequest> _parser = new pb::MessageParser<HandbookInfoRequest>(() => new HandbookInfoRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HandbookInfoRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HandbookInfoRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HandbookInfoRequest(HandbookInfoRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HandbookInfoRequest Clone() {
      return new HandbookInfoRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HandbookInfoRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HandbookInfoRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HandbookInfoRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class HandbookInfoResponse : pb::IMessage<HandbookInfoResponse> {
    private static readonly pb::MessageParser<HandbookInfoResponse> _parser = new pb::MessageParser<HandbookInfoResponse>(() => new HandbookInfoResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HandbookInfoResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HandbookInfoResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HandbookInfoResponse(HandbookInfoResponse other) : this() {
      lv_ = other.lv_;
      exp_ = other.exp_;
      rewards_ = other.rewards_.Clone();
      collectionList_ = other.collectionList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HandbookInfoResponse Clone() {
      return new HandbookInfoResponse(this);
    }

    /// <summary>Field number for the "lv" field.</summary>
    public const int LvFieldNumber = 1;
    private int lv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Lv {
      get { return lv_; }
      set {
        lv_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 2;
    private int exp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "rewards" field.</summary>
    public const int RewardsFieldNumber = 3;
    private static readonly pbc::MapField<int, int>.Codec _map_rewards_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 26);
    private readonly pbc::MapField<int, int> rewards_ = new pbc::MapField<int, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> Rewards {
      get { return rewards_; }
    }

    /// <summary>Field number for the "collectionList" field.</summary>
    public const int CollectionListFieldNumber = 4;
    private static readonly pb::FieldCodec<global::SmalBox.HandbookCollection> _repeated_collectionList_codec
        = pb::FieldCodec.ForMessage(34, global::SmalBox.HandbookCollection.Parser);
    private readonly pbc::RepeatedField<global::SmalBox.HandbookCollection> collectionList_ = new pbc::RepeatedField<global::SmalBox.HandbookCollection>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SmalBox.HandbookCollection> CollectionList {
      get { return collectionList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HandbookInfoResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HandbookInfoResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Lv != other.Lv) return false;
      if (Exp != other.Exp) return false;
      if (!Rewards.Equals(other.Rewards)) return false;
      if(!collectionList_.Equals(other.collectionList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Lv != 0) hash ^= Lv.GetHashCode();
      if (Exp != 0) hash ^= Exp.GetHashCode();
      hash ^= Rewards.GetHashCode();
      hash ^= collectionList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Lv != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Lv);
      }
      if (Exp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Exp);
      }
      rewards_.WriteTo(output, _map_rewards_codec);
      collectionList_.WriteTo(output, _repeated_collectionList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Lv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lv);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      size += rewards_.CalculateSize(_map_rewards_codec);
      size += collectionList_.CalculateSize(_repeated_collectionList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HandbookInfoResponse other) {
      if (other == null) {
        return;
      }
      if (other.Lv != 0) {
        Lv = other.Lv;
      }
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
      rewards_.Add(other.rewards_);
      collectionList_.Add(other.collectionList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Lv = input.ReadInt32();
            break;
          }
          case 16: {
            Exp = input.ReadInt32();
            break;
          }
          case 26: {
            rewards_.AddEntriesFrom(input, _map_rewards_codec);
            break;
          }
          case 34: {
            collectionList_.AddEntriesFrom(input, _repeated_collectionList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///领取奖励
  /// </summary>
  public sealed partial class HandbookReceiveRequest : pb::IMessage<HandbookReceiveRequest> {
    private static readonly pb::MessageParser<HandbookReceiveRequest> _parser = new pb::MessageParser<HandbookReceiveRequest>(() => new HandbookReceiveRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HandbookReceiveRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HandbookReceiveRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HandbookReceiveRequest(HandbookReceiveRequest other) : this() {
      confId_ = other.confId_;
      lv_ = other.lv_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HandbookReceiveRequest Clone() {
      return new HandbookReceiveRequest(this);
    }

    /// <summary>Field number for the "confId" field.</summary>
    public const int ConfIdFieldNumber = 1;
    private int confId_;
    /// <summary>
    ///图鉴ID 0=整体图鉴
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfId {
      get { return confId_; }
      set {
        confId_ = value;
      }
    }

    /// <summary>Field number for the "lv" field.</summary>
    public const int LvFieldNumber = 2;
    private int lv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Lv {
      get { return lv_; }
      set {
        lv_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HandbookReceiveRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HandbookReceiveRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConfId != other.ConfId) return false;
      if (Lv != other.Lv) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConfId != 0) hash ^= ConfId.GetHashCode();
      if (Lv != 0) hash ^= Lv.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfId);
      }
      if (Lv != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Lv);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfId);
      }
      if (Lv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lv);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HandbookReceiveRequest other) {
      if (other == null) {
        return;
      }
      if (other.ConfId != 0) {
        ConfId = other.ConfId;
      }
      if (other.Lv != 0) {
        Lv = other.Lv;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ConfId = input.ReadInt32();
            break;
          }
          case 16: {
            Lv = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HandbookReceiveResponse : pb::IMessage<HandbookReceiveResponse> {
    private static readonly pb::MessageParser<HandbookReceiveResponse> _parser = new pb::MessageParser<HandbookReceiveResponse>(() => new HandbookReceiveResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HandbookReceiveResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HandbookReceiveResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HandbookReceiveResponse(HandbookReceiveResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HandbookReceiveResponse Clone() {
      return new HandbookReceiveResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HandbookReceiveResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HandbookReceiveResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HandbookReceiveResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///HandbookChangePush 收集物 变动
  /// </summary>
  public sealed partial class HandbookChangePush : pb::IMessage<HandbookChangePush> {
    private static readonly pb::MessageParser<HandbookChangePush> _parser = new pb::MessageParser<HandbookChangePush>(() => new HandbookChangePush());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HandbookChangePush> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HandbookChangePush() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HandbookChangePush(HandbookChangePush other) : this() {
      lv_ = other.lv_;
      exp_ = other.exp_;
      rewards_ = other.rewards_.Clone();
      changeList_ = other.changeList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HandbookChangePush Clone() {
      return new HandbookChangePush(this);
    }

    /// <summary>Field number for the "lv" field.</summary>
    public const int LvFieldNumber = 1;
    private int lv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Lv {
      get { return lv_; }
      set {
        lv_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 2;
    private int exp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "rewards" field.</summary>
    public const int RewardsFieldNumber = 3;
    private static readonly pbc::MapField<int, int>.Codec _map_rewards_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 26);
    private readonly pbc::MapField<int, int> rewards_ = new pbc::MapField<int, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> Rewards {
      get { return rewards_; }
    }

    /// <summary>Field number for the "changeList" field.</summary>
    public const int ChangeListFieldNumber = 4;
    private static readonly pb::FieldCodec<global::SmalBox.HandbookCollection> _repeated_changeList_codec
        = pb::FieldCodec.ForMessage(34, global::SmalBox.HandbookCollection.Parser);
    private readonly pbc::RepeatedField<global::SmalBox.HandbookCollection> changeList_ = new pbc::RepeatedField<global::SmalBox.HandbookCollection>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SmalBox.HandbookCollection> ChangeList {
      get { return changeList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HandbookChangePush);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HandbookChangePush other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Lv != other.Lv) return false;
      if (Exp != other.Exp) return false;
      if (!Rewards.Equals(other.Rewards)) return false;
      if(!changeList_.Equals(other.changeList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Lv != 0) hash ^= Lv.GetHashCode();
      if (Exp != 0) hash ^= Exp.GetHashCode();
      hash ^= Rewards.GetHashCode();
      hash ^= changeList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Lv != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Lv);
      }
      if (Exp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Exp);
      }
      rewards_.WriteTo(output, _map_rewards_codec);
      changeList_.WriteTo(output, _repeated_changeList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Lv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lv);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      size += rewards_.CalculateSize(_map_rewards_codec);
      size += changeList_.CalculateSize(_repeated_changeList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HandbookChangePush other) {
      if (other == null) {
        return;
      }
      if (other.Lv != 0) {
        Lv = other.Lv;
      }
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
      rewards_.Add(other.rewards_);
      changeList_.Add(other.changeList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Lv = input.ReadInt32();
            break;
          }
          case 16: {
            Exp = input.ReadInt32();
            break;
          }
          case 26: {
            rewards_.AddEntriesFrom(input, _map_rewards_codec);
            break;
          }
          case 34: {
            changeList_.AddEntriesFrom(input, _repeated_changeList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///最小虫 单元
  /// </summary>
  public sealed partial class InsectUnit : pb::IMessage<InsectUnit> {
    private static readonly pb::MessageParser<InsectUnit> _parser = new pb::MessageParser<InsectUnit>(() => new InsectUnit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InsectUnit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsectUnit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsectUnit(InsectUnit other) : this() {
      id_ = other.id_;
      confId_ = other.confId_;
      size_ = other.size_;
      swarm_ = other.swarm_;
      overTime_ = other.overTime_;
      missionId_ = other.missionId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsectUnit Clone() {
      return new InsectUnit(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "confId" field.</summary>
    public const int ConfIdFieldNumber = 2;
    private int confId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfId {
      get { return confId_; }
      set {
        confId_ = value;
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 3;
    private int size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "swarm" field.</summary>
    public const int SwarmFieldNumber = 4;
    private ulong swarm_;
    /// <summary>
    /// !=0 表示是虫群点刷新
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Swarm {
      get { return swarm_; }
      set {
        swarm_ = value;
      }
    }

    /// <summary>Field number for the "overTime" field.</summary>
    public const int OverTimeFieldNumber = 5;
    private long overTime_;
    /// <summary>
    ///结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OverTime {
      get { return overTime_; }
      set {
        overTime_ = value;
      }
    }

    /// <summary>Field number for the "missionId" field.</summary>
    public const int MissionIdFieldNumber = 6;
    private int missionId_;
    /// <summary>
    ///任务生成
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MissionId {
      get { return missionId_; }
      set {
        missionId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InsectUnit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InsectUnit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ConfId != other.ConfId) return false;
      if (Size != other.Size) return false;
      if (Swarm != other.Swarm) return false;
      if (OverTime != other.OverTime) return false;
      if (MissionId != other.MissionId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (ConfId != 0) hash ^= ConfId.GetHashCode();
      if (Size != 0) hash ^= Size.GetHashCode();
      if (Swarm != 0UL) hash ^= Swarm.GetHashCode();
      if (OverTime != 0L) hash ^= OverTime.GetHashCode();
      if (MissionId != 0) hash ^= MissionId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (ConfId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ConfId);
      }
      if (Size != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Size);
      }
      if (Swarm != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Swarm);
      }
      if (OverTime != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(OverTime);
      }
      if (MissionId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MissionId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (ConfId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfId);
      }
      if (Size != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Size);
      }
      if (Swarm != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Swarm);
      }
      if (OverTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OverTime);
      }
      if (MissionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MissionId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InsectUnit other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.ConfId != 0) {
        ConfId = other.ConfId;
      }
      if (other.Size != 0) {
        Size = other.Size;
      }
      if (other.Swarm != 0UL) {
        Swarm = other.Swarm;
      }
      if (other.OverTime != 0L) {
        OverTime = other.OverTime;
      }
      if (other.MissionId != 0) {
        MissionId = other.MissionId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 16: {
            ConfId = input.ReadInt32();
            break;
          }
          case 24: {
            Size = input.ReadInt32();
            break;
          }
          case 32: {
            Swarm = input.ReadUInt64();
            break;
          }
          case 40: {
            OverTime = input.ReadInt64();
            break;
          }
          case 48: {
            MissionId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///虫群
  /// </summary>
  public sealed partial class InsectSwarm : pb::IMessage<InsectSwarm> {
    private static readonly pb::MessageParser<InsectSwarm> _parser = new pb::MessageParser<InsectSwarm>(() => new InsectSwarm());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InsectSwarm> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsectSwarm() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsectSwarm(InsectSwarm other) : this() {
      id_ = other.id_;
      confId_ = other.confId_;
      refreshCount_ = other.refreshCount_;
      cd_ = other.cd_;
      itemId_ = other.itemId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsectSwarm Clone() {
      return new InsectSwarm(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "confId" field.</summary>
    public const int ConfIdFieldNumber = 2;
    private int confId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfId {
      get { return confId_; }
      set {
        confId_ = value;
      }
    }

    /// <summary>Field number for the "refreshCount" field.</summary>
    public const int RefreshCountFieldNumber = 3;
    private int refreshCount_;
    /// <summary>
    ///剩余刷新次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RefreshCount {
      get { return refreshCount_; }
      set {
        refreshCount_ = value;
      }
    }

    /// <summary>Field number for the "cd" field.</summary>
    public const int CdFieldNumber = 4;
    private long cd_;
    /// <summary>
    ///结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Cd {
      get { return cd_; }
      set {
        cd_ = value;
      }
    }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 5;
    private int itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InsectSwarm);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InsectSwarm other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ConfId != other.ConfId) return false;
      if (RefreshCount != other.RefreshCount) return false;
      if (Cd != other.Cd) return false;
      if (ItemId != other.ItemId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (ConfId != 0) hash ^= ConfId.GetHashCode();
      if (RefreshCount != 0) hash ^= RefreshCount.GetHashCode();
      if (Cd != 0L) hash ^= Cd.GetHashCode();
      if (ItemId != 0) hash ^= ItemId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (ConfId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ConfId);
      }
      if (RefreshCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RefreshCount);
      }
      if (Cd != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Cd);
      }
      if (ItemId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ItemId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (ConfId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfId);
      }
      if (RefreshCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RefreshCount);
      }
      if (Cd != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Cd);
      }
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InsectSwarm other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.ConfId != 0) {
        ConfId = other.ConfId;
      }
      if (other.RefreshCount != 0) {
        RefreshCount = other.RefreshCount;
      }
      if (other.Cd != 0L) {
        Cd = other.Cd;
      }
      if (other.ItemId != 0) {
        ItemId = other.ItemId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 16: {
            ConfId = input.ReadInt32();
            break;
          }
          case 24: {
            RefreshCount = input.ReadInt32();
            break;
          }
          case 32: {
            Cd = input.ReadInt64();
            break;
          }
          case 40: {
            ItemId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///区域
  /// </summary>
  public sealed partial class InsectArea : pb::IMessage<InsectArea> {
    private static readonly pb::MessageParser<InsectArea> _parser = new pb::MessageParser<InsectArea>(() => new InsectArea());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InsectArea> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsectArea() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsectArea(InsectArea other) : this() {
      areaId_ = other.areaId_;
      swarmList_ = other.swarmList_.Clone();
      insectList_ = other.insectList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsectArea Clone() {
      return new InsectArea(this);
    }

    /// <summary>Field number for the "areaId" field.</summary>
    public const int AreaIdFieldNumber = 1;
    private int areaId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AreaId {
      get { return areaId_; }
      set {
        areaId_ = value;
      }
    }

    /// <summary>Field number for the "swarmList" field.</summary>
    public const int SwarmListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SmalBox.InsectSwarm> _repeated_swarmList_codec
        = pb::FieldCodec.ForMessage(18, global::SmalBox.InsectSwarm.Parser);
    private readonly pbc::RepeatedField<global::SmalBox.InsectSwarm> swarmList_ = new pbc::RepeatedField<global::SmalBox.InsectSwarm>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SmalBox.InsectSwarm> SwarmList {
      get { return swarmList_; }
    }

    /// <summary>Field number for the "insectList" field.</summary>
    public const int InsectListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::SmalBox.InsectUnit> _repeated_insectList_codec
        = pb::FieldCodec.ForMessage(26, global::SmalBox.InsectUnit.Parser);
    private readonly pbc::RepeatedField<global::SmalBox.InsectUnit> insectList_ = new pbc::RepeatedField<global::SmalBox.InsectUnit>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SmalBox.InsectUnit> InsectList {
      get { return insectList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InsectArea);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InsectArea other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AreaId != other.AreaId) return false;
      if(!swarmList_.Equals(other.swarmList_)) return false;
      if(!insectList_.Equals(other.insectList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AreaId != 0) hash ^= AreaId.GetHashCode();
      hash ^= swarmList_.GetHashCode();
      hash ^= insectList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AreaId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AreaId);
      }
      swarmList_.WriteTo(output, _repeated_swarmList_codec);
      insectList_.WriteTo(output, _repeated_insectList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AreaId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AreaId);
      }
      size += swarmList_.CalculateSize(_repeated_swarmList_codec);
      size += insectList_.CalculateSize(_repeated_insectList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InsectArea other) {
      if (other == null) {
        return;
      }
      if (other.AreaId != 0) {
        AreaId = other.AreaId;
      }
      swarmList_.Add(other.swarmList_);
      insectList_.Add(other.insectList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AreaId = input.ReadInt32();
            break;
          }
          case 18: {
            swarmList_.AddEntriesFrom(input, _repeated_swarmList_codec);
            break;
          }
          case 26: {
            insectList_.AddEntriesFrom(input, _repeated_insectList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///捕虫场所信息
  /// </summary>
  public sealed partial class InsectInfoPush : pb::IMessage<InsectInfoPush> {
    private static readonly pb::MessageParser<InsectInfoPush> _parser = new pb::MessageParser<InsectInfoPush>(() => new InsectInfoPush());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InsectInfoPush> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsectInfoPush() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsectInfoPush(InsectInfoPush other) : this() {
      catchToolId_ = other.catchToolId_;
      areaList_ = other.areaList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsectInfoPush Clone() {
      return new InsectInfoPush(this);
    }

    /// <summary>Field number for the "catchToolId" field.</summary>
    public const int CatchToolIdFieldNumber = 1;
    private ulong catchToolId_;
    /// <summary>
    ///捕虫网道具唯一ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CatchToolId {
      get { return catchToolId_; }
      set {
        catchToolId_ = value;
      }
    }

    /// <summary>Field number for the "area_list" field.</summary>
    public const int AreaListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SmalBox.InsectArea> _repeated_areaList_codec
        = pb::FieldCodec.ForMessage(18, global::SmalBox.InsectArea.Parser);
    private readonly pbc::RepeatedField<global::SmalBox.InsectArea> areaList_ = new pbc::RepeatedField<global::SmalBox.InsectArea>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SmalBox.InsectArea> AreaList {
      get { return areaList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InsectInfoPush);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InsectInfoPush other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CatchToolId != other.CatchToolId) return false;
      if(!areaList_.Equals(other.areaList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CatchToolId != 0UL) hash ^= CatchToolId.GetHashCode();
      hash ^= areaList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CatchToolId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(CatchToolId);
      }
      areaList_.WriteTo(output, _repeated_areaList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CatchToolId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CatchToolId);
      }
      size += areaList_.CalculateSize(_repeated_areaList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InsectInfoPush other) {
      if (other == null) {
        return;
      }
      if (other.CatchToolId != 0UL) {
        CatchToolId = other.CatchToolId;
      }
      areaList_.Add(other.areaList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CatchToolId = input.ReadUInt64();
            break;
          }
          case 18: {
            areaList_.AddEntriesFrom(input, _repeated_areaList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///消耗体力
  /// </summary>
  public sealed partial class InsectStartRequest : pb::IMessage<InsectStartRequest> {
    private static readonly pb::MessageParser<InsectStartRequest> _parser = new pb::MessageParser<InsectStartRequest>(() => new InsectStartRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InsectStartRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsectStartRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsectStartRequest(InsectStartRequest other) : this() {
      areaId_ = other.areaId_;
      insectId_ = other.insectId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsectStartRequest Clone() {
      return new InsectStartRequest(this);
    }

    /// <summary>Field number for the "areaId" field.</summary>
    public const int AreaIdFieldNumber = 1;
    private int areaId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AreaId {
      get { return areaId_; }
      set {
        areaId_ = value;
      }
    }

    /// <summary>Field number for the "insectId" field.</summary>
    public const int InsectIdFieldNumber = 2;
    private ulong insectId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong InsectId {
      get { return insectId_; }
      set {
        insectId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InsectStartRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InsectStartRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AreaId != other.AreaId) return false;
      if (InsectId != other.InsectId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AreaId != 0) hash ^= AreaId.GetHashCode();
      if (InsectId != 0UL) hash ^= InsectId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AreaId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AreaId);
      }
      if (InsectId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(InsectId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AreaId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AreaId);
      }
      if (InsectId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(InsectId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InsectStartRequest other) {
      if (other == null) {
        return;
      }
      if (other.AreaId != 0) {
        AreaId = other.AreaId;
      }
      if (other.InsectId != 0UL) {
        InsectId = other.InsectId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AreaId = input.ReadInt32();
            break;
          }
          case 16: {
            InsectId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InsectStartResponse : pb::IMessage<InsectStartResponse> {
    private static readonly pb::MessageParser<InsectStartResponse> _parser = new pb::MessageParser<InsectStartResponse>(() => new InsectStartResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InsectStartResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsectStartResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsectStartResponse(InsectStartResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsectStartResponse Clone() {
      return new InsectStartResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InsectStartResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InsectStartResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InsectStartResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class InsectCatchRequest : pb::IMessage<InsectCatchRequest> {
    private static readonly pb::MessageParser<InsectCatchRequest> _parser = new pb::MessageParser<InsectCatchRequest>(() => new InsectCatchRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InsectCatchRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsectCatchRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsectCatchRequest(InsectCatchRequest other) : this() {
      areaId_ = other.areaId_;
      insectId_ = other.insectId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsectCatchRequest Clone() {
      return new InsectCatchRequest(this);
    }

    /// <summary>Field number for the "areaId" field.</summary>
    public const int AreaIdFieldNumber = 1;
    private int areaId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AreaId {
      get { return areaId_; }
      set {
        areaId_ = value;
      }
    }

    /// <summary>Field number for the "insectId" field.</summary>
    public const int InsectIdFieldNumber = 2;
    private ulong insectId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong InsectId {
      get { return insectId_; }
      set {
        insectId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InsectCatchRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InsectCatchRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AreaId != other.AreaId) return false;
      if (InsectId != other.InsectId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AreaId != 0) hash ^= AreaId.GetHashCode();
      if (InsectId != 0UL) hash ^= InsectId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AreaId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AreaId);
      }
      if (InsectId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(InsectId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AreaId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AreaId);
      }
      if (InsectId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(InsectId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InsectCatchRequest other) {
      if (other == null) {
        return;
      }
      if (other.AreaId != 0) {
        AreaId = other.AreaId;
      }
      if (other.InsectId != 0UL) {
        InsectId = other.InsectId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AreaId = input.ReadInt32();
            break;
          }
          case 16: {
            InsectId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InsectCatchResponse : pb::IMessage<InsectCatchResponse> {
    private static readonly pb::MessageParser<InsectCatchResponse> _parser = new pb::MessageParser<InsectCatchResponse>(() => new InsectCatchResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InsectCatchResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsectCatchResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsectCatchResponse(InsectCatchResponse other) : this() {
      isFirst_ = other.isFirst_;
      success_ = other.success_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsectCatchResponse Clone() {
      return new InsectCatchResponse(this);
    }

    /// <summary>Field number for the "isFirst" field.</summary>
    public const int IsFirstFieldNumber = 1;
    private bool isFirst_;
    /// <summary>
    ///是否第一次捕获
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFirst {
      get { return isFirst_; }
      set {
        isFirst_ = value;
      }
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 2;
    private bool success_;
    /// <summary>
    ///是否
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InsectCatchResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InsectCatchResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsFirst != other.IsFirst) return false;
      if (Success != other.Success) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsFirst != false) hash ^= IsFirst.GetHashCode();
      if (Success != false) hash ^= Success.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsFirst != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsFirst);
      }
      if (Success != false) {
        output.WriteRawTag(16);
        output.WriteBool(Success);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsFirst != false) {
        size += 1 + 1;
      }
      if (Success != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InsectCatchResponse other) {
      if (other == null) {
        return;
      }
      if (other.IsFirst != false) {
        IsFirst = other.IsFirst;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsFirst = input.ReadBool();
            break;
          }
          case 16: {
            Success = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InsectQTERequest : pb::IMessage<InsectQTERequest> {
    private static readonly pb::MessageParser<InsectQTERequest> _parser = new pb::MessageParser<InsectQTERequest>(() => new InsectQTERequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InsectQTERequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsectQTERequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsectQTERequest(InsectQTERequest other) : this() {
      areaId_ = other.areaId_;
      swarmId_ = other.swarmId_;
      itemUniqueId_ = other.itemUniqueId_;
      effectValue_ = other.effectValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsectQTERequest Clone() {
      return new InsectQTERequest(this);
    }

    /// <summary>Field number for the "areaId" field.</summary>
    public const int AreaIdFieldNumber = 1;
    private int areaId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AreaId {
      get { return areaId_; }
      set {
        areaId_ = value;
      }
    }

    /// <summary>Field number for the "swarmId" field.</summary>
    public const int SwarmIdFieldNumber = 2;
    private ulong swarmId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SwarmId {
      get { return swarmId_; }
      set {
        swarmId_ = value;
      }
    }

    /// <summary>Field number for the "itemUniqueId" field.</summary>
    public const int ItemUniqueIdFieldNumber = 3;
    private ulong itemUniqueId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ItemUniqueId {
      get { return itemUniqueId_; }
      set {
        itemUniqueId_ = value;
      }
    }

    /// <summary>Field number for the "effectValue" field.</summary>
    public const int EffectValueFieldNumber = 4;
    private int effectValue_;
    /// <summary>
    ///1 2 3  3种效果值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EffectValue {
      get { return effectValue_; }
      set {
        effectValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InsectQTERequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InsectQTERequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AreaId != other.AreaId) return false;
      if (SwarmId != other.SwarmId) return false;
      if (ItemUniqueId != other.ItemUniqueId) return false;
      if (EffectValue != other.EffectValue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AreaId != 0) hash ^= AreaId.GetHashCode();
      if (SwarmId != 0UL) hash ^= SwarmId.GetHashCode();
      if (ItemUniqueId != 0UL) hash ^= ItemUniqueId.GetHashCode();
      if (EffectValue != 0) hash ^= EffectValue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AreaId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AreaId);
      }
      if (SwarmId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(SwarmId);
      }
      if (ItemUniqueId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(ItemUniqueId);
      }
      if (EffectValue != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EffectValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AreaId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AreaId);
      }
      if (SwarmId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SwarmId);
      }
      if (ItemUniqueId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ItemUniqueId);
      }
      if (EffectValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EffectValue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InsectQTERequest other) {
      if (other == null) {
        return;
      }
      if (other.AreaId != 0) {
        AreaId = other.AreaId;
      }
      if (other.SwarmId != 0UL) {
        SwarmId = other.SwarmId;
      }
      if (other.ItemUniqueId != 0UL) {
        ItemUniqueId = other.ItemUniqueId;
      }
      if (other.EffectValue != 0) {
        EffectValue = other.EffectValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AreaId = input.ReadInt32();
            break;
          }
          case 16: {
            SwarmId = input.ReadUInt64();
            break;
          }
          case 24: {
            ItemUniqueId = input.ReadUInt64();
            break;
          }
          case 32: {
            EffectValue = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InsectQTEResponse : pb::IMessage<InsectQTEResponse> {
    private static readonly pb::MessageParser<InsectQTEResponse> _parser = new pb::MessageParser<InsectQTEResponse>(() => new InsectQTEResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InsectQTEResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsectQTEResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsectQTEResponse(InsectQTEResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsectQTEResponse Clone() {
      return new InsectQTEResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InsectQTEResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InsectQTEResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InsectQTEResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class InsectChangeToolRequest : pb::IMessage<InsectChangeToolRequest> {
    private static readonly pb::MessageParser<InsectChangeToolRequest> _parser = new pb::MessageParser<InsectChangeToolRequest>(() => new InsectChangeToolRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InsectChangeToolRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsectChangeToolRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsectChangeToolRequest(InsectChangeToolRequest other) : this() {
      catchToolId_ = other.catchToolId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsectChangeToolRequest Clone() {
      return new InsectChangeToolRequest(this);
    }

    /// <summary>Field number for the "catchToolId" field.</summary>
    public const int CatchToolIdFieldNumber = 1;
    private ulong catchToolId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CatchToolId {
      get { return catchToolId_; }
      set {
        catchToolId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InsectChangeToolRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InsectChangeToolRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CatchToolId != other.CatchToolId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CatchToolId != 0UL) hash ^= CatchToolId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CatchToolId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(CatchToolId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CatchToolId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CatchToolId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InsectChangeToolRequest other) {
      if (other == null) {
        return;
      }
      if (other.CatchToolId != 0UL) {
        CatchToolId = other.CatchToolId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CatchToolId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InsectChangeToolResponse : pb::IMessage<InsectChangeToolResponse> {
    private static readonly pb::MessageParser<InsectChangeToolResponse> _parser = new pb::MessageParser<InsectChangeToolResponse>(() => new InsectChangeToolResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InsectChangeToolResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsectChangeToolResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsectChangeToolResponse(InsectChangeToolResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsectChangeToolResponse Clone() {
      return new InsectChangeToolResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InsectChangeToolResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InsectChangeToolResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InsectChangeToolResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class InsectRefreshPush : pb::IMessage<InsectRefreshPush> {
    private static readonly pb::MessageParser<InsectRefreshPush> _parser = new pb::MessageParser<InsectRefreshPush>(() => new InsectRefreshPush());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InsectRefreshPush> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsectRefreshPush() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsectRefreshPush(InsectRefreshPush other) : this() {
      areaList_ = other.areaList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsectRefreshPush Clone() {
      return new InsectRefreshPush(this);
    }

    /// <summary>Field number for the "area_list" field.</summary>
    public const int AreaListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SmalBox.InsectArea> _repeated_areaList_codec
        = pb::FieldCodec.ForMessage(10, global::SmalBox.InsectArea.Parser);
    private readonly pbc::RepeatedField<global::SmalBox.InsectArea> areaList_ = new pbc::RepeatedField<global::SmalBox.InsectArea>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SmalBox.InsectArea> AreaList {
      get { return areaList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InsectRefreshPush);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InsectRefreshPush other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!areaList_.Equals(other.areaList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= areaList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      areaList_.WriteTo(output, _repeated_areaList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += areaList_.CalculateSize(_repeated_areaList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InsectRefreshPush other) {
      if (other == null) {
        return;
      }
      areaList_.Add(other.areaList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            areaList_.AddEntriesFrom(input, _repeated_areaList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ItemInfo : pb::IMessage<ItemInfo> {
    private static readonly pb::MessageParser<ItemInfo> _parser = new pb::MessageParser<ItemInfo>(() => new ItemInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemInfo(ItemInfo other) : this() {
      propType_ = other.propType_;
      confId_ = other.confId_;
      num_ = other.num_;
      switch (other.ExtraInfoCase) {
        case ExtraInfoOneofCase.CatchToolInfo:
          CatchToolInfo = other.CatchToolInfo.Clone();
          break;
        case ExtraInfoOneofCase.RoleShowcaseInfo:
          RoleShowcaseInfo = other.RoleShowcaseInfo.Clone();
          break;
        case ExtraInfoOneofCase.CollectionItemInfo:
          CollectionItemInfo = other.CollectionItemInfo.Clone();
          break;
        case ExtraInfoOneofCase.AttrExtraInfo:
          AttrExtraInfo = other.AttrExtraInfo.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemInfo Clone() {
      return new ItemInfo(this);
    }

    /// <summary>Field number for the "propType" field.</summary>
    public const int PropTypeFieldNumber = 1;
    private global::SmalBox.ItemType propType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SmalBox.ItemType PropType {
      get { return propType_; }
      set {
        propType_ = value;
      }
    }

    /// <summary>Field number for the "confId" field.</summary>
    public const int ConfIdFieldNumber = 2;
    private int confId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfId {
      get { return confId_; }
      set {
        confId_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 3;
    private int num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    /// <summary>Field number for the "catchToolInfo" field.</summary>
    public const int CatchToolInfoFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SmalBox.CatchToolInfo CatchToolInfo {
      get { return extraInfoCase_ == ExtraInfoOneofCase.CatchToolInfo ? (global::SmalBox.CatchToolInfo) extraInfo_ : null; }
      set {
        extraInfo_ = value;
        extraInfoCase_ = value == null ? ExtraInfoOneofCase.None : ExtraInfoOneofCase.CatchToolInfo;
      }
    }

    /// <summary>Field number for the "roleShowcaseInfo" field.</summary>
    public const int RoleShowcaseInfoFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SmalBox.RoleShowcaseInfo RoleShowcaseInfo {
      get { return extraInfoCase_ == ExtraInfoOneofCase.RoleShowcaseInfo ? (global::SmalBox.RoleShowcaseInfo) extraInfo_ : null; }
      set {
        extraInfo_ = value;
        extraInfoCase_ = value == null ? ExtraInfoOneofCase.None : ExtraInfoOneofCase.RoleShowcaseInfo;
      }
    }

    /// <summary>Field number for the "collectionItemInfo" field.</summary>
    public const int CollectionItemInfoFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SmalBox.CollectionItemExtraInfo CollectionItemInfo {
      get { return extraInfoCase_ == ExtraInfoOneofCase.CollectionItemInfo ? (global::SmalBox.CollectionItemExtraInfo) extraInfo_ : null; }
      set {
        extraInfo_ = value;
        extraInfoCase_ = value == null ? ExtraInfoOneofCase.None : ExtraInfoOneofCase.CollectionItemInfo;
      }
    }

    /// <summary>Field number for the "attrExtraInfo" field.</summary>
    public const int AttrExtraInfoFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SmalBox.AttrExtraInfo AttrExtraInfo {
      get { return extraInfoCase_ == ExtraInfoOneofCase.AttrExtraInfo ? (global::SmalBox.AttrExtraInfo) extraInfo_ : null; }
      set {
        extraInfo_ = value;
        extraInfoCase_ = value == null ? ExtraInfoOneofCase.None : ExtraInfoOneofCase.AttrExtraInfo;
      }
    }

    private object extraInfo_;
    /// <summary>Enum of possible cases for the "extraInfo" oneof.</summary>
    public enum ExtraInfoOneofCase {
      None = 0,
      CatchToolInfo = 4,
      RoleShowcaseInfo = 5,
      CollectionItemInfo = 6,
      AttrExtraInfo = 7,
    }
    private ExtraInfoOneofCase extraInfoCase_ = ExtraInfoOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExtraInfoOneofCase ExtraInfoCase {
      get { return extraInfoCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearExtraInfo() {
      extraInfoCase_ = ExtraInfoOneofCase.None;
      extraInfo_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PropType != other.PropType) return false;
      if (ConfId != other.ConfId) return false;
      if (Num != other.Num) return false;
      if (!object.Equals(CatchToolInfo, other.CatchToolInfo)) return false;
      if (!object.Equals(RoleShowcaseInfo, other.RoleShowcaseInfo)) return false;
      if (!object.Equals(CollectionItemInfo, other.CollectionItemInfo)) return false;
      if (!object.Equals(AttrExtraInfo, other.AttrExtraInfo)) return false;
      if (ExtraInfoCase != other.ExtraInfoCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PropType != 0) hash ^= PropType.GetHashCode();
      if (ConfId != 0) hash ^= ConfId.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      if (extraInfoCase_ == ExtraInfoOneofCase.CatchToolInfo) hash ^= CatchToolInfo.GetHashCode();
      if (extraInfoCase_ == ExtraInfoOneofCase.RoleShowcaseInfo) hash ^= RoleShowcaseInfo.GetHashCode();
      if (extraInfoCase_ == ExtraInfoOneofCase.CollectionItemInfo) hash ^= CollectionItemInfo.GetHashCode();
      if (extraInfoCase_ == ExtraInfoOneofCase.AttrExtraInfo) hash ^= AttrExtraInfo.GetHashCode();
      hash ^= (int) extraInfoCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PropType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PropType);
      }
      if (ConfId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ConfId);
      }
      if (Num != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Num);
      }
      if (extraInfoCase_ == ExtraInfoOneofCase.CatchToolInfo) {
        output.WriteRawTag(34);
        output.WriteMessage(CatchToolInfo);
      }
      if (extraInfoCase_ == ExtraInfoOneofCase.RoleShowcaseInfo) {
        output.WriteRawTag(42);
        output.WriteMessage(RoleShowcaseInfo);
      }
      if (extraInfoCase_ == ExtraInfoOneofCase.CollectionItemInfo) {
        output.WriteRawTag(50);
        output.WriteMessage(CollectionItemInfo);
      }
      if (extraInfoCase_ == ExtraInfoOneofCase.AttrExtraInfo) {
        output.WriteRawTag(58);
        output.WriteMessage(AttrExtraInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PropType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PropType);
      }
      if (ConfId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfId);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (extraInfoCase_ == ExtraInfoOneofCase.CatchToolInfo) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CatchToolInfo);
      }
      if (extraInfoCase_ == ExtraInfoOneofCase.RoleShowcaseInfo) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoleShowcaseInfo);
      }
      if (extraInfoCase_ == ExtraInfoOneofCase.CollectionItemInfo) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CollectionItemInfo);
      }
      if (extraInfoCase_ == ExtraInfoOneofCase.AttrExtraInfo) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AttrExtraInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemInfo other) {
      if (other == null) {
        return;
      }
      if (other.PropType != 0) {
        PropType = other.PropType;
      }
      if (other.ConfId != 0) {
        ConfId = other.ConfId;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      switch (other.ExtraInfoCase) {
        case ExtraInfoOneofCase.CatchToolInfo:
          if (CatchToolInfo == null) {
            CatchToolInfo = new global::SmalBox.CatchToolInfo();
          }
          CatchToolInfo.MergeFrom(other.CatchToolInfo);
          break;
        case ExtraInfoOneofCase.RoleShowcaseInfo:
          if (RoleShowcaseInfo == null) {
            RoleShowcaseInfo = new global::SmalBox.RoleShowcaseInfo();
          }
          RoleShowcaseInfo.MergeFrom(other.RoleShowcaseInfo);
          break;
        case ExtraInfoOneofCase.CollectionItemInfo:
          if (CollectionItemInfo == null) {
            CollectionItemInfo = new global::SmalBox.CollectionItemExtraInfo();
          }
          CollectionItemInfo.MergeFrom(other.CollectionItemInfo);
          break;
        case ExtraInfoOneofCase.AttrExtraInfo:
          if (AttrExtraInfo == null) {
            AttrExtraInfo = new global::SmalBox.AttrExtraInfo();
          }
          AttrExtraInfo.MergeFrom(other.AttrExtraInfo);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            propType_ = (global::SmalBox.ItemType) input.ReadEnum();
            break;
          }
          case 16: {
            ConfId = input.ReadInt32();
            break;
          }
          case 24: {
            Num = input.ReadInt32();
            break;
          }
          case 34: {
            global::SmalBox.CatchToolInfo subBuilder = new global::SmalBox.CatchToolInfo();
            if (extraInfoCase_ == ExtraInfoOneofCase.CatchToolInfo) {
              subBuilder.MergeFrom(CatchToolInfo);
            }
            input.ReadMessage(subBuilder);
            CatchToolInfo = subBuilder;
            break;
          }
          case 42: {
            global::SmalBox.RoleShowcaseInfo subBuilder = new global::SmalBox.RoleShowcaseInfo();
            if (extraInfoCase_ == ExtraInfoOneofCase.RoleShowcaseInfo) {
              subBuilder.MergeFrom(RoleShowcaseInfo);
            }
            input.ReadMessage(subBuilder);
            RoleShowcaseInfo = subBuilder;
            break;
          }
          case 50: {
            global::SmalBox.CollectionItemExtraInfo subBuilder = new global::SmalBox.CollectionItemExtraInfo();
            if (extraInfoCase_ == ExtraInfoOneofCase.CollectionItemInfo) {
              subBuilder.MergeFrom(CollectionItemInfo);
            }
            input.ReadMessage(subBuilder);
            CollectionItemInfo = subBuilder;
            break;
          }
          case 58: {
            global::SmalBox.AttrExtraInfo subBuilder = new global::SmalBox.AttrExtraInfo();
            if (extraInfoCase_ == ExtraInfoOneofCase.AttrExtraInfo) {
              subBuilder.MergeFrom(AttrExtraInfo);
            }
            input.ReadMessage(subBuilder);
            AttrExtraInfo = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///拓展类型 捕捉工具
  /// </summary>
  public sealed partial class CatchToolInfo : pb::IMessage<CatchToolInfo> {
    private static readonly pb::MessageParser<CatchToolInfo> _parser = new pb::MessageParser<CatchToolInfo>(() => new CatchToolInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CatchToolInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CatchToolInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CatchToolInfo(CatchToolInfo other) : this() {
      uniqueId_ = other.uniqueId_;
      durability_ = other.durability_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CatchToolInfo Clone() {
      return new CatchToolInfo(this);
    }

    /// <summary>Field number for the "uniqueId" field.</summary>
    public const int UniqueIdFieldNumber = 1;
    private ulong uniqueId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UniqueId {
      get { return uniqueId_; }
      set {
        uniqueId_ = value;
      }
    }

    /// <summary>Field number for the "durability" field.</summary>
    public const int DurabilityFieldNumber = 2;
    private int durability_;
    /// <summary>
    ///耐久度 -1表示永久  0为销毁
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Durability {
      get { return durability_; }
      set {
        durability_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CatchToolInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CatchToolInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UniqueId != other.UniqueId) return false;
      if (Durability != other.Durability) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UniqueId != 0UL) hash ^= UniqueId.GetHashCode();
      if (Durability != 0) hash ^= Durability.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UniqueId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UniqueId);
      }
      if (Durability != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Durability);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UniqueId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UniqueId);
      }
      if (Durability != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Durability);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CatchToolInfo other) {
      if (other == null) {
        return;
      }
      if (other.UniqueId != 0UL) {
        UniqueId = other.UniqueId;
      }
      if (other.Durability != 0) {
        Durability = other.Durability;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UniqueId = input.ReadUInt64();
            break;
          }
          case 16: {
            Durability = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///背包中的展柜
  /// </summary>
  public sealed partial class RoleShowcaseInfo : pb::IMessage<RoleShowcaseInfo> {
    private static readonly pb::MessageParser<RoleShowcaseInfo> _parser = new pb::MessageParser<RoleShowcaseInfo>(() => new RoleShowcaseInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleShowcaseInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleShowcaseInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleShowcaseInfo(RoleShowcaseInfo other) : this() {
      uniqueId_ = other.uniqueId_;
      level_ = other.level_;
      exp_ = other.exp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleShowcaseInfo Clone() {
      return new RoleShowcaseInfo(this);
    }

    /// <summary>Field number for the "uniqueId" field.</summary>
    public const int UniqueIdFieldNumber = 1;
    private ulong uniqueId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UniqueId {
      get { return uniqueId_; }
      set {
        uniqueId_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 3;
    private int exp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoleShowcaseInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoleShowcaseInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UniqueId != other.UniqueId) return false;
      if (Level != other.Level) return false;
      if (Exp != other.Exp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UniqueId != 0UL) hash ^= UniqueId.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Exp != 0) hash ^= Exp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UniqueId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UniqueId);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
      if (Exp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Exp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UniqueId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UniqueId);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoleShowcaseInfo other) {
      if (other == null) {
        return;
      }
      if (other.UniqueId != 0UL) {
        UniqueId = other.UniqueId;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UniqueId = input.ReadUInt64();
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
          case 24: {
            Exp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///背包中的收集物信息
  /// </summary>
  public sealed partial class CollectionItemExtraInfo : pb::IMessage<CollectionItemExtraInfo> {
    private static readonly pb::MessageParser<CollectionItemExtraInfo> _parser = new pb::MessageParser<CollectionItemExtraInfo>(() => new CollectionItemExtraInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CollectionItemExtraInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CollectionItemExtraInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CollectionItemExtraInfo(CollectionItemExtraInfo other) : this() {
      uniqueId_ = other.uniqueId_;
      size_ = other.size_;
      manualId_ = other.manualId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CollectionItemExtraInfo Clone() {
      return new CollectionItemExtraInfo(this);
    }

    /// <summary>Field number for the "uniqueId" field.</summary>
    public const int UniqueIdFieldNumber = 1;
    private ulong uniqueId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UniqueId {
      get { return uniqueId_; }
      set {
        uniqueId_ = value;
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 2;
    private int size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "manualId" field.</summary>
    public const int ManualIdFieldNumber = 3;
    private int manualId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ManualId {
      get { return manualId_; }
      set {
        manualId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CollectionItemExtraInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CollectionItemExtraInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UniqueId != other.UniqueId) return false;
      if (Size != other.Size) return false;
      if (ManualId != other.ManualId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UniqueId != 0UL) hash ^= UniqueId.GetHashCode();
      if (Size != 0) hash ^= Size.GetHashCode();
      if (ManualId != 0) hash ^= ManualId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UniqueId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UniqueId);
      }
      if (Size != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Size);
      }
      if (ManualId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ManualId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UniqueId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UniqueId);
      }
      if (Size != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Size);
      }
      if (ManualId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ManualId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CollectionItemExtraInfo other) {
      if (other == null) {
        return;
      }
      if (other.UniqueId != 0UL) {
        UniqueId = other.UniqueId;
      }
      if (other.Size != 0) {
        Size = other.Size;
      }
      if (other.ManualId != 0) {
        ManualId = other.ManualId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UniqueId = input.ReadUInt64();
            break;
          }
          case 16: {
            Size = input.ReadInt32();
            break;
          }
          case 24: {
            ManualId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///使用道具
  /// </summary>
  public sealed partial class UseItemRequest : pb::IMessage<UseItemRequest> {
    private static readonly pb::MessageParser<UseItemRequest> _parser = new pb::MessageParser<UseItemRequest>(() => new UseItemRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UseItemRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UseItemRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UseItemRequest(UseItemRequest other) : this() {
      item_ = other.item_ != null ? other.item_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UseItemRequest Clone() {
      return new UseItemRequest(this);
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 1;
    private global::SmalBox.ItemInfo item_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SmalBox.ItemInfo Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UseItemRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UseItemRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Item, other.Item)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (item_ != null) hash ^= Item.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (item_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Item);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UseItemRequest other) {
      if (other == null) {
        return;
      }
      if (other.item_ != null) {
        if (item_ == null) {
          item_ = new global::SmalBox.ItemInfo();
        }
        Item.MergeFrom(other.Item);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (item_ == null) {
              item_ = new global::SmalBox.ItemInfo();
            }
            input.ReadMessage(item_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UseItemResponse : pb::IMessage<UseItemResponse> {
    private static readonly pb::MessageParser<UseItemResponse> _parser = new pb::MessageParser<UseItemResponse>(() => new UseItemResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UseItemResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UseItemResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UseItemResponse(UseItemResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UseItemResponse Clone() {
      return new UseItemResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UseItemResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UseItemResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UseItemResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class AttrExtraInfo : pb::IMessage<AttrExtraInfo> {
    private static readonly pb::MessageParser<AttrExtraInfo> _parser = new pb::MessageParser<AttrExtraInfo>(() => new AttrExtraInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttrExtraInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttrExtraInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttrExtraInfo(AttrExtraInfo other) : this() {
      diffTime_ = other.diffTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttrExtraInfo Clone() {
      return new AttrExtraInfo(this);
    }

    /// <summary>Field number for the "diffTime" field.</summary>
    public const int DiffTimeFieldNumber = 1;
    private long diffTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DiffTime {
      get { return diffTime_; }
      set {
        diffTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttrExtraInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttrExtraInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DiffTime != other.DiffTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DiffTime != 0L) hash ^= DiffTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DiffTime != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(DiffTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DiffTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DiffTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttrExtraInfo other) {
      if (other == null) {
        return;
      }
      if (other.DiffTime != 0L) {
        DiffTime = other.DiffTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DiffTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ItemUseInfo : pb::IMessage<ItemUseInfo> {
    private static readonly pb::MessageParser<ItemUseInfo> _parser = new pb::MessageParser<ItemUseInfo>(() => new ItemUseInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemUseInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemUseInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemUseInfo(ItemUseInfo other) : this() {
      propType_ = other.propType_;
      confId_ = other.confId_;
      num_ = other.num_;
      uniqueId_ = other.uniqueId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemUseInfo Clone() {
      return new ItemUseInfo(this);
    }

    /// <summary>Field number for the "propType" field.</summary>
    public const int PropTypeFieldNumber = 1;
    private global::SmalBox.ItemType propType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SmalBox.ItemType PropType {
      get { return propType_; }
      set {
        propType_ = value;
      }
    }

    /// <summary>Field number for the "confId" field.</summary>
    public const int ConfIdFieldNumber = 2;
    private int confId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfId {
      get { return confId_; }
      set {
        confId_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 3;
    private int num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    /// <summary>Field number for the "uniqueId" field.</summary>
    public const int UniqueIdFieldNumber = 4;
    private ulong uniqueId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UniqueId {
      get { return uniqueId_; }
      set {
        uniqueId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemUseInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemUseInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PropType != other.PropType) return false;
      if (ConfId != other.ConfId) return false;
      if (Num != other.Num) return false;
      if (UniqueId != other.UniqueId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PropType != 0) hash ^= PropType.GetHashCode();
      if (ConfId != 0) hash ^= ConfId.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      if (UniqueId != 0UL) hash ^= UniqueId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PropType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PropType);
      }
      if (ConfId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ConfId);
      }
      if (Num != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Num);
      }
      if (UniqueId != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(UniqueId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PropType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PropType);
      }
      if (ConfId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfId);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (UniqueId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UniqueId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemUseInfo other) {
      if (other == null) {
        return;
      }
      if (other.PropType != 0) {
        PropType = other.PropType;
      }
      if (other.ConfId != 0) {
        ConfId = other.ConfId;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      if (other.UniqueId != 0UL) {
        UniqueId = other.UniqueId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            propType_ = (global::SmalBox.ItemType) input.ReadEnum();
            break;
          }
          case 16: {
            ConfId = input.ReadInt32();
            break;
          }
          case 24: {
            Num = input.ReadInt32();
            break;
          }
          case 32: {
            UniqueId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///道具数量变动推送
  /// </summary>
  public sealed partial class ItemChangePush : pb::IMessage<ItemChangePush> {
    private static readonly pb::MessageParser<ItemChangePush> _parser = new pb::MessageParser<ItemChangePush>(() => new ItemChangePush());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemChangePush> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemChangePush() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemChangePush(ItemChangePush other) : this() {
      itemList_ = other.itemList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemChangePush Clone() {
      return new ItemChangePush(this);
    }

    /// <summary>Field number for the "itemList" field.</summary>
    public const int ItemListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SmalBox.ItemInfo> _repeated_itemList_codec
        = pb::FieldCodec.ForMessage(10, global::SmalBox.ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::SmalBox.ItemInfo> itemList_ = new pbc::RepeatedField<global::SmalBox.ItemInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SmalBox.ItemInfo> ItemList {
      get { return itemList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemChangePush);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemChangePush other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!itemList_.Equals(other.itemList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= itemList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      itemList_.WriteTo(output, _repeated_itemList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += itemList_.CalculateSize(_repeated_itemList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemChangePush other) {
      if (other == null) {
        return;
      }
      itemList_.Add(other.itemList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            itemList_.AddEntriesFrom(input, _repeated_itemList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Login cmd = 10000
  /// </summary>
  public sealed partial class LoginRequest : pb::IMessage<LoginRequest> {
    private static readonly pb::MessageParser<LoginRequest> _parser = new pb::MessageParser<LoginRequest>(() => new LoginRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequest(LoginRequest other) : this() {
      account_ = other.account_;
      token_ = other.token_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequest Clone() {
      return new LoginRequest(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private string account_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 2;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      if (Token != other.Token) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Token);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginRequest other) {
      if (other == null) {
        return;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 18: {
            Token = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginResponse : pb::IMessage<LoginResponse> {
    private static readonly pb::MessageParser<LoginResponse> _parser = new pb::MessageParser<LoginResponse>(() => new LoginResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResponse(LoginResponse other) : this() {
      userInfo_ = other.userInfo_ != null ? other.userInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResponse Clone() {
      return new LoginResponse(this);
    }

    /// <summary>Field number for the "userInfo" field.</summary>
    public const int UserInfoFieldNumber = 1;
    private global::SmalBox.UserInfo userInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SmalBox.UserInfo UserInfo {
      get { return userInfo_; }
      set {
        userInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(UserInfo, other.UserInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (userInfo_ != null) hash ^= UserInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (userInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UserInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (userInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginResponse other) {
      if (other == null) {
        return;
      }
      if (other.userInfo_ != null) {
        if (userInfo_ == null) {
          userInfo_ = new global::SmalBox.UserInfo();
        }
        UserInfo.MergeFrom(other.UserInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (userInfo_ == null) {
              userInfo_ = new global::SmalBox.UserInfo();
            }
            input.ReadMessage(userInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///心跳
  /// </summary>
  public sealed partial class HeartBeatRequest : pb::IMessage<HeartBeatRequest> {
    private static readonly pb::MessageParser<HeartBeatRequest> _parser = new pb::MessageParser<HeartBeatRequest>(() => new HeartBeatRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeartBeatRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeatRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeatRequest(HeartBeatRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeatRequest Clone() {
      return new HeartBeatRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeartBeatRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeartBeatRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeartBeatRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class HeartBeatResponse : pb::IMessage<HeartBeatResponse> {
    private static readonly pb::MessageParser<HeartBeatResponse> _parser = new pb::MessageParser<HeartBeatResponse>(() => new HeartBeatResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeartBeatResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeatResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeatResponse(HeartBeatResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeatResponse Clone() {
      return new HeartBeatResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeartBeatResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeartBeatResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeartBeatResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class UserInfo : pb::IMessage<UserInfo> {
    private static readonly pb::MessageParser<UserInfo> _parser = new pb::MessageParser<UserInfo>(() => new UserInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo(UserInfo other) : this() {
      roleId_ = other.roleId_;
      name_ = other.name_;
      itemList_ = other.itemList_.Clone();
      unlockedMapId_ = other.unlockedMapId_.Clone();
      headUrl_ = other.headUrl_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo Clone() {
      return new UserInfo(this);
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "itemList" field.</summary>
    public const int ItemListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::SmalBox.ItemInfo> _repeated_itemList_codec
        = pb::FieldCodec.ForMessage(26, global::SmalBox.ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::SmalBox.ItemInfo> itemList_ = new pbc::RepeatedField<global::SmalBox.ItemInfo>();
    /// <summary>
    ///登录推送 所有道具相关(属性|捕捉工具|展柜...)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SmalBox.ItemInfo> ItemList {
      get { return itemList_; }
    }

    /// <summary>Field number for the "unlockedMapId" field.</summary>
    public const int UnlockedMapIdFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_unlockedMapId_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> unlockedMapId_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> UnlockedMapId {
      get { return unlockedMapId_; }
    }

    /// <summary>Field number for the "headUrl" field.</summary>
    public const int HeadUrlFieldNumber = 5;
    private string headUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeadUrl {
      get { return headUrl_; }
      set {
        headUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoleId != other.RoleId) return false;
      if (Name != other.Name) return false;
      if(!itemList_.Equals(other.itemList_)) return false;
      if(!unlockedMapId_.Equals(other.unlockedMapId_)) return false;
      if (HeadUrl != other.HeadUrl) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoleId != 0UL) hash ^= RoleId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= itemList_.GetHashCode();
      hash ^= unlockedMapId_.GetHashCode();
      if (HeadUrl.Length != 0) hash ^= HeadUrl.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      itemList_.WriteTo(output, _repeated_itemList_codec);
      unlockedMapId_.WriteTo(output, _repeated_unlockedMapId_codec);
      if (HeadUrl.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(HeadUrl);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += itemList_.CalculateSize(_repeated_itemList_codec);
      size += unlockedMapId_.CalculateSize(_repeated_unlockedMapId_codec);
      if (HeadUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeadUrl);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserInfo other) {
      if (other == null) {
        return;
      }
      if (other.RoleId != 0UL) {
        RoleId = other.RoleId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      itemList_.Add(other.itemList_);
      unlockedMapId_.Add(other.unlockedMapId_);
      if (other.HeadUrl.Length != 0) {
        HeadUrl = other.HeadUrl;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            itemList_.AddEntriesFrom(input, _repeated_itemList_codec);
            break;
          }
          case 34:
          case 32: {
            unlockedMapId_.AddEntriesFrom(input, _repeated_unlockedMapId_codec);
            break;
          }
          case 42: {
            HeadUrl = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///任务信息
  /// </summary>
  public sealed partial class MissionUnit : pb::IMessage<MissionUnit> {
    private static readonly pb::MessageParser<MissionUnit> _parser = new pb::MessageParser<MissionUnit>(() => new MissionUnit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MissionUnit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[72]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissionUnit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissionUnit(MissionUnit other) : this() {
      missionId_ = other.missionId_;
      state_ = other.state_;
      progress_ = other.progress_.Clone();
      receiveTime_ = other.receiveTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissionUnit Clone() {
      return new MissionUnit(this);
    }

    /// <summary>Field number for the "mission_id" field.</summary>
    public const int MissionIdFieldNumber = 1;
    private int missionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MissionId {
      get { return missionId_; }
      set {
        missionId_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private global::SmalBox.MissionState state_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SmalBox.MissionState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "progress" field.</summary>
    public const int ProgressFieldNumber = 3;
    private static readonly pb::FieldCodec<global::SmalBox.MissionProgress> _repeated_progress_codec
        = pb::FieldCodec.ForMessage(26, global::SmalBox.MissionProgress.Parser);
    private readonly pbc::RepeatedField<global::SmalBox.MissionProgress> progress_ = new pbc::RepeatedField<global::SmalBox.MissionProgress>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SmalBox.MissionProgress> Progress {
      get { return progress_; }
    }

    /// <summary>Field number for the "receiveTime" field.</summary>
    public const int ReceiveTimeFieldNumber = 4;
    private long receiveTime_;
    /// <summary>
    ///领取时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ReceiveTime {
      get { return receiveTime_; }
      set {
        receiveTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MissionUnit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MissionUnit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MissionId != other.MissionId) return false;
      if (State != other.State) return false;
      if(!progress_.Equals(other.progress_)) return false;
      if (ReceiveTime != other.ReceiveTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MissionId != 0) hash ^= MissionId.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      hash ^= progress_.GetHashCode();
      if (ReceiveTime != 0L) hash ^= ReceiveTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MissionId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MissionId);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) State);
      }
      progress_.WriteTo(output, _repeated_progress_codec);
      if (ReceiveTime != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ReceiveTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MissionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MissionId);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      size += progress_.CalculateSize(_repeated_progress_codec);
      if (ReceiveTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReceiveTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MissionUnit other) {
      if (other == null) {
        return;
      }
      if (other.MissionId != 0) {
        MissionId = other.MissionId;
      }
      if (other.State != 0) {
        State = other.State;
      }
      progress_.Add(other.progress_);
      if (other.ReceiveTime != 0L) {
        ReceiveTime = other.ReceiveTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MissionId = input.ReadInt32();
            break;
          }
          case 16: {
            state_ = (global::SmalBox.MissionState) input.ReadEnum();
            break;
          }
          case 26: {
            progress_.AddEntriesFrom(input, _repeated_progress_codec);
            break;
          }
          case 32: {
            ReceiveTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///进度信息
  /// </summary>
  public sealed partial class MissionProgress : pb::IMessage<MissionProgress> {
    private static readonly pb::MessageParser<MissionProgress> _parser = new pb::MessageParser<MissionProgress>(() => new MissionProgress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MissionProgress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[73]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissionProgress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissionProgress(MissionProgress other) : this() {
      triggerId_ = other.triggerId_;
      confId_ = other.confId_;
      num_ = other.num_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissionProgress Clone() {
      return new MissionProgress(this);
    }

    /// <summary>Field number for the "triggerId" field.</summary>
    public const int TriggerIdFieldNumber = 1;
    private int triggerId_;
    /// <summary>
    ///触发类型 taskDesc - id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TriggerId {
      get { return triggerId_; }
      set {
        triggerId_ = value;
      }
    }

    /// <summary>Field number for the "confId" field.</summary>
    public const int ConfIdFieldNumber = 2;
    private int confId_;
    /// <summary>
    ///目标配置ID(只有数量的话 该项=0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfId {
      get { return confId_; }
      set {
        confId_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 3;
    private int num_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MissionProgress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MissionProgress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TriggerId != other.TriggerId) return false;
      if (ConfId != other.ConfId) return false;
      if (Num != other.Num) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TriggerId != 0) hash ^= TriggerId.GetHashCode();
      if (ConfId != 0) hash ^= ConfId.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TriggerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TriggerId);
      }
      if (ConfId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ConfId);
      }
      if (Num != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Num);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TriggerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TriggerId);
      }
      if (ConfId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfId);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MissionProgress other) {
      if (other == null) {
        return;
      }
      if (other.TriggerId != 0) {
        TriggerId = other.TriggerId;
      }
      if (other.ConfId != 0) {
        ConfId = other.ConfId;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TriggerId = input.ReadInt32();
            break;
          }
          case 16: {
            ConfId = input.ReadInt32();
            break;
          }
          case 24: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MissionQueryRequest : pb::IMessage<MissionQueryRequest> {
    private static readonly pb::MessageParser<MissionQueryRequest> _parser = new pb::MessageParser<MissionQueryRequest>(() => new MissionQueryRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MissionQueryRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[74]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissionQueryRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissionQueryRequest(MissionQueryRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissionQueryRequest Clone() {
      return new MissionQueryRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MissionQueryRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MissionQueryRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MissionQueryRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class MissionQueryResponse : pb::IMessage<MissionQueryResponse> {
    private static readonly pb::MessageParser<MissionQueryResponse> _parser = new pb::MessageParser<MissionQueryResponse>(() => new MissionQueryResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MissionQueryResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[75]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissionQueryResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissionQueryResponse(MissionQueryResponse other) : this() {
      missionList_ = other.missionList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissionQueryResponse Clone() {
      return new MissionQueryResponse(this);
    }

    /// <summary>Field number for the "mission_list" field.</summary>
    public const int MissionListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SmalBox.MissionUnit> _repeated_missionList_codec
        = pb::FieldCodec.ForMessage(10, global::SmalBox.MissionUnit.Parser);
    private readonly pbc::RepeatedField<global::SmalBox.MissionUnit> missionList_ = new pbc::RepeatedField<global::SmalBox.MissionUnit>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SmalBox.MissionUnit> MissionList {
      get { return missionList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MissionQueryResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MissionQueryResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!missionList_.Equals(other.missionList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= missionList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      missionList_.WriteTo(output, _repeated_missionList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += missionList_.CalculateSize(_repeated_missionList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MissionQueryResponse other) {
      if (other == null) {
        return;
      }
      missionList_.Add(other.missionList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            missionList_.AddEntriesFrom(input, _repeated_missionList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MissionReceiveRequest : pb::IMessage<MissionReceiveRequest> {
    private static readonly pb::MessageParser<MissionReceiveRequest> _parser = new pb::MessageParser<MissionReceiveRequest>(() => new MissionReceiveRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MissionReceiveRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[76]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissionReceiveRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissionReceiveRequest(MissionReceiveRequest other) : this() {
      missionId_ = other.missionId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissionReceiveRequest Clone() {
      return new MissionReceiveRequest(this);
    }

    /// <summary>Field number for the "mission_id" field.</summary>
    public const int MissionIdFieldNumber = 1;
    private int missionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MissionId {
      get { return missionId_; }
      set {
        missionId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MissionReceiveRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MissionReceiveRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MissionId != other.MissionId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MissionId != 0) hash ^= MissionId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MissionId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MissionId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MissionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MissionId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MissionReceiveRequest other) {
      if (other == null) {
        return;
      }
      if (other.MissionId != 0) {
        MissionId = other.MissionId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MissionId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MissionReceiveResponse : pb::IMessage<MissionReceiveResponse> {
    private static readonly pb::MessageParser<MissionReceiveResponse> _parser = new pb::MessageParser<MissionReceiveResponse>(() => new MissionReceiveResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MissionReceiveResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[77]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissionReceiveResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissionReceiveResponse(MissionReceiveResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissionReceiveResponse Clone() {
      return new MissionReceiveResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MissionReceiveResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MissionReceiveResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MissionReceiveResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class MissionRewardRequest : pb::IMessage<MissionRewardRequest> {
    private static readonly pb::MessageParser<MissionRewardRequest> _parser = new pb::MessageParser<MissionRewardRequest>(() => new MissionRewardRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MissionRewardRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[78]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissionRewardRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissionRewardRequest(MissionRewardRequest other) : this() {
      missionId_ = other.missionId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissionRewardRequest Clone() {
      return new MissionRewardRequest(this);
    }

    /// <summary>Field number for the "mission_id" field.</summary>
    public const int MissionIdFieldNumber = 1;
    private int missionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MissionId {
      get { return missionId_; }
      set {
        missionId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MissionRewardRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MissionRewardRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MissionId != other.MissionId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MissionId != 0) hash ^= MissionId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MissionId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MissionId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MissionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MissionId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MissionRewardRequest other) {
      if (other == null) {
        return;
      }
      if (other.MissionId != 0) {
        MissionId = other.MissionId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MissionId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MissionRewardResponse : pb::IMessage<MissionRewardResponse> {
    private static readonly pb::MessageParser<MissionRewardResponse> _parser = new pb::MessageParser<MissionRewardResponse>(() => new MissionRewardResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MissionRewardResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[79]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissionRewardResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissionRewardResponse(MissionRewardResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissionRewardResponse Clone() {
      return new MissionRewardResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MissionRewardResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MissionRewardResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MissionRewardResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class MissionChangeOnePush : pb::IMessage<MissionChangeOnePush> {
    private static readonly pb::MessageParser<MissionChangeOnePush> _parser = new pb::MessageParser<MissionChangeOnePush>(() => new MissionChangeOnePush());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MissionChangeOnePush> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[80]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissionChangeOnePush() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissionChangeOnePush(MissionChangeOnePush other) : this() {
      mission_ = other.mission_ != null ? other.mission_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissionChangeOnePush Clone() {
      return new MissionChangeOnePush(this);
    }

    /// <summary>Field number for the "mission" field.</summary>
    public const int MissionFieldNumber = 1;
    private global::SmalBox.MissionUnit mission_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SmalBox.MissionUnit Mission {
      get { return mission_; }
      set {
        mission_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MissionChangeOnePush);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MissionChangeOnePush other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Mission, other.Mission)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (mission_ != null) hash ^= Mission.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (mission_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Mission);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (mission_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mission);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MissionChangeOnePush other) {
      if (other == null) {
        return;
      }
      if (other.mission_ != null) {
        if (mission_ == null) {
          mission_ = new global::SmalBox.MissionUnit();
        }
        Mission.MergeFrom(other.Mission);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (mission_ == null) {
              mission_ = new global::SmalBox.MissionUnit();
            }
            input.ReadMessage(mission_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MissionChangeManyPush : pb::IMessage<MissionChangeManyPush> {
    private static readonly pb::MessageParser<MissionChangeManyPush> _parser = new pb::MessageParser<MissionChangeManyPush>(() => new MissionChangeManyPush());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MissionChangeManyPush> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[81]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissionChangeManyPush() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissionChangeManyPush(MissionChangeManyPush other) : this() {
      missionList_ = other.missionList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissionChangeManyPush Clone() {
      return new MissionChangeManyPush(this);
    }

    /// <summary>Field number for the "mission_list" field.</summary>
    public const int MissionListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SmalBox.MissionUnit> _repeated_missionList_codec
        = pb::FieldCodec.ForMessage(10, global::SmalBox.MissionUnit.Parser);
    private readonly pbc::RepeatedField<global::SmalBox.MissionUnit> missionList_ = new pbc::RepeatedField<global::SmalBox.MissionUnit>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SmalBox.MissionUnit> MissionList {
      get { return missionList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MissionChangeManyPush);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MissionChangeManyPush other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!missionList_.Equals(other.missionList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= missionList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      missionList_.WriteTo(output, _repeated_missionList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += missionList_.CalculateSize(_repeated_missionList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MissionChangeManyPush other) {
      if (other == null) {
        return;
      }
      missionList_.Add(other.missionList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            missionList_.AddEntriesFrom(input, _repeated_missionList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///进入博物馆
  /// </summary>
  public sealed partial class EnterMuseumInfoPush : pb::IMessage<EnterMuseumInfoPush> {
    private static readonly pb::MessageParser<EnterMuseumInfoPush> _parser = new pb::MessageParser<EnterMuseumInfoPush>(() => new EnterMuseumInfoPush());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnterMuseumInfoPush> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[82]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterMuseumInfoPush() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterMuseumInfoPush(EnterMuseumInfoPush other) : this() {
      unlockAreaId_ = other.unlockAreaId_.Clone();
      showcases_ = other.showcases_.Clone();
      researchPoints_ = other.researchPoints_;
      coin_ = other.coin_;
      boxInfos_ = other.boxInfos_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterMuseumInfoPush Clone() {
      return new EnterMuseumInfoPush(this);
    }

    /// <summary>Field number for the "unlockAreaId" field.</summary>
    public const int UnlockAreaIdFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_unlockAreaId_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> unlockAreaId_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> UnlockAreaId {
      get { return unlockAreaId_; }
    }

    /// <summary>Field number for the "showcases" field.</summary>
    public const int ShowcasesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SmalBox.ShowcaseInfo> _repeated_showcases_codec
        = pb::FieldCodec.ForMessage(18, global::SmalBox.ShowcaseInfo.Parser);
    private readonly pbc::RepeatedField<global::SmalBox.ShowcaseInfo> showcases_ = new pbc::RepeatedField<global::SmalBox.ShowcaseInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SmalBox.ShowcaseInfo> Showcases {
      get { return showcases_; }
    }

    /// <summary>Field number for the "researchPoints" field.</summary>
    public const int ResearchPointsFieldNumber = 3;
    private int researchPoints_;
    /// <summary>
    ///研究点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ResearchPoints {
      get { return researchPoints_; }
      set {
        researchPoints_ = value;
      }
    }

    /// <summary>Field number for the "coin" field.</summary>
    public const int CoinFieldNumber = 4;
    private int coin_;
    /// <summary>
    ///金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Coin {
      get { return coin_; }
      set {
        coin_ = value;
      }
    }

    /// <summary>Field number for the "boxInfos" field.</summary>
    public const int BoxInfosFieldNumber = 5;
    private static readonly pb::FieldCodec<global::SmalBox.BoxInfo> _repeated_boxInfos_codec
        = pb::FieldCodec.ForMessage(42, global::SmalBox.BoxInfo.Parser);
    private readonly pbc::RepeatedField<global::SmalBox.BoxInfo> boxInfos_ = new pbc::RepeatedField<global::SmalBox.BoxInfo>();
    /// <summary>
    ///宝箱信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SmalBox.BoxInfo> BoxInfos {
      get { return boxInfos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnterMuseumInfoPush);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnterMuseumInfoPush other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!unlockAreaId_.Equals(other.unlockAreaId_)) return false;
      if(!showcases_.Equals(other.showcases_)) return false;
      if (ResearchPoints != other.ResearchPoints) return false;
      if (Coin != other.Coin) return false;
      if(!boxInfos_.Equals(other.boxInfos_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= unlockAreaId_.GetHashCode();
      hash ^= showcases_.GetHashCode();
      if (ResearchPoints != 0) hash ^= ResearchPoints.GetHashCode();
      if (Coin != 0) hash ^= Coin.GetHashCode();
      hash ^= boxInfos_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      unlockAreaId_.WriteTo(output, _repeated_unlockAreaId_codec);
      showcases_.WriteTo(output, _repeated_showcases_codec);
      if (ResearchPoints != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ResearchPoints);
      }
      if (Coin != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Coin);
      }
      boxInfos_.WriteTo(output, _repeated_boxInfos_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += unlockAreaId_.CalculateSize(_repeated_unlockAreaId_codec);
      size += showcases_.CalculateSize(_repeated_showcases_codec);
      if (ResearchPoints != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResearchPoints);
      }
      if (Coin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Coin);
      }
      size += boxInfos_.CalculateSize(_repeated_boxInfos_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnterMuseumInfoPush other) {
      if (other == null) {
        return;
      }
      unlockAreaId_.Add(other.unlockAreaId_);
      showcases_.Add(other.showcases_);
      if (other.ResearchPoints != 0) {
        ResearchPoints = other.ResearchPoints;
      }
      if (other.Coin != 0) {
        Coin = other.Coin;
      }
      boxInfos_.Add(other.boxInfos_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            unlockAreaId_.AddEntriesFrom(input, _repeated_unlockAreaId_codec);
            break;
          }
          case 18: {
            showcases_.AddEntriesFrom(input, _repeated_showcases_codec);
            break;
          }
          case 24: {
            ResearchPoints = input.ReadInt32();
            break;
          }
          case 32: {
            Coin = input.ReadInt32();
            break;
          }
          case 42: {
            boxInfos_.AddEntriesFrom(input, _repeated_boxInfos_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///展柜升级通知
  /// </summary>
  public sealed partial class LevelupShowcasePush : pb::IMessage<LevelupShowcasePush> {
    private static readonly pb::MessageParser<LevelupShowcasePush> _parser = new pb::MessageParser<LevelupShowcasePush>(() => new LevelupShowcasePush());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LevelupShowcasePush> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[83]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelupShowcasePush() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelupShowcasePush(LevelupShowcasePush other) : this() {
      showcaseId_ = other.showcaseId_;
      level_ = other.level_;
      exp_ = other.exp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelupShowcasePush Clone() {
      return new LevelupShowcasePush(this);
    }

    /// <summary>Field number for the "showcaseId" field.</summary>
    public const int ShowcaseIdFieldNumber = 1;
    private ulong showcaseId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ShowcaseId {
      get { return showcaseId_; }
      set {
        showcaseId_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 3;
    private int exp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LevelupShowcasePush);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LevelupShowcasePush other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShowcaseId != other.ShowcaseId) return false;
      if (Level != other.Level) return false;
      if (Exp != other.Exp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ShowcaseId != 0UL) hash ^= ShowcaseId.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Exp != 0) hash ^= Exp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShowcaseId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ShowcaseId);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
      if (Exp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Exp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShowcaseId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ShowcaseId);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LevelupShowcasePush other) {
      if (other == null) {
        return;
      }
      if (other.ShowcaseId != 0UL) {
        ShowcaseId = other.ShowcaseId;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ShowcaseId = input.ReadUInt64();
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
          case 24: {
            Exp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///放置展柜
  /// </summary>
  public sealed partial class PlaceShowcaseRequest : pb::IMessage<PlaceShowcaseRequest> {
    private static readonly pb::MessageParser<PlaceShowcaseRequest> _parser = new pb::MessageParser<PlaceShowcaseRequest>(() => new PlaceShowcaseRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlaceShowcaseRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[84]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaceShowcaseRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaceShowcaseRequest(PlaceShowcaseRequest other) : this() {
      showcaseItemId_ = other.showcaseItemId_;
      direction_ = other.direction_;
      point_ = other.point_ != null ? other.point_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaceShowcaseRequest Clone() {
      return new PlaceShowcaseRequest(this);
    }

    /// <summary>Field number for the "showcaseItemId" field.</summary>
    public const int ShowcaseItemIdFieldNumber = 1;
    private ulong showcaseItemId_;
    /// <summary>
    ///道具的唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ShowcaseItemId {
      get { return showcaseItemId_; }
      set {
        showcaseItemId_ = value;
      }
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 2;
    private global::SmalBox.Direction direction_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SmalBox.Direction Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 3;
    private global::SmalBox.Point2D point_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SmalBox.Point2D Point {
      get { return point_; }
      set {
        point_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlaceShowcaseRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlaceShowcaseRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShowcaseItemId != other.ShowcaseItemId) return false;
      if (Direction != other.Direction) return false;
      if (!object.Equals(Point, other.Point)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ShowcaseItemId != 0UL) hash ^= ShowcaseItemId.GetHashCode();
      if (Direction != 0) hash ^= Direction.GetHashCode();
      if (point_ != null) hash ^= Point.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShowcaseItemId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ShowcaseItemId);
      }
      if (Direction != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Direction);
      }
      if (point_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Point);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShowcaseItemId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ShowcaseItemId);
      }
      if (Direction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Direction);
      }
      if (point_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Point);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlaceShowcaseRequest other) {
      if (other == null) {
        return;
      }
      if (other.ShowcaseItemId != 0UL) {
        ShowcaseItemId = other.ShowcaseItemId;
      }
      if (other.Direction != 0) {
        Direction = other.Direction;
      }
      if (other.point_ != null) {
        if (point_ == null) {
          point_ = new global::SmalBox.Point2D();
        }
        Point.MergeFrom(other.Point);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ShowcaseItemId = input.ReadUInt64();
            break;
          }
          case 16: {
            direction_ = (global::SmalBox.Direction) input.ReadEnum();
            break;
          }
          case 26: {
            if (point_ == null) {
              point_ = new global::SmalBox.Point2D();
            }
            input.ReadMessage(point_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlaceShowcaseResponse : pb::IMessage<PlaceShowcaseResponse> {
    private static readonly pb::MessageParser<PlaceShowcaseResponse> _parser = new pb::MessageParser<PlaceShowcaseResponse>(() => new PlaceShowcaseResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlaceShowcaseResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[85]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaceShowcaseResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaceShowcaseResponse(PlaceShowcaseResponse other) : this() {
      info_ = other.info_ != null ? other.info_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaceShowcaseResponse Clone() {
      return new PlaceShowcaseResponse(this);
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private global::SmalBox.ShowcaseInfo info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SmalBox.ShowcaseInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlaceShowcaseResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlaceShowcaseResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Info, other.Info)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (info_ != null) hash ^= Info.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlaceShowcaseResponse other) {
      if (other == null) {
        return;
      }
      if (other.info_ != null) {
        if (info_ == null) {
          info_ = new global::SmalBox.ShowcaseInfo();
        }
        Info.MergeFrom(other.Info);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (info_ == null) {
              info_ = new global::SmalBox.ShowcaseInfo();
            }
            input.ReadMessage(info_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///移动展柜
  /// </summary>
  public sealed partial class MoveShowcaseRequest : pb::IMessage<MoveShowcaseRequest> {
    private static readonly pb::MessageParser<MoveShowcaseRequest> _parser = new pb::MessageParser<MoveShowcaseRequest>(() => new MoveShowcaseRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveShowcaseRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[86]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveShowcaseRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveShowcaseRequest(MoveShowcaseRequest other) : this() {
      showcaseId_ = other.showcaseId_;
      direction_ = other.direction_;
      point_ = other.point_ != null ? other.point_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveShowcaseRequest Clone() {
      return new MoveShowcaseRequest(this);
    }

    /// <summary>Field number for the "showcaseId" field.</summary>
    public const int ShowcaseIdFieldNumber = 1;
    private ulong showcaseId_;
    /// <summary>
    ///场景里的唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ShowcaseId {
      get { return showcaseId_; }
      set {
        showcaseId_ = value;
      }
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 2;
    private global::SmalBox.Direction direction_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SmalBox.Direction Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 3;
    private global::SmalBox.Point2D point_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SmalBox.Point2D Point {
      get { return point_; }
      set {
        point_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveShowcaseRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveShowcaseRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShowcaseId != other.ShowcaseId) return false;
      if (Direction != other.Direction) return false;
      if (!object.Equals(Point, other.Point)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ShowcaseId != 0UL) hash ^= ShowcaseId.GetHashCode();
      if (Direction != 0) hash ^= Direction.GetHashCode();
      if (point_ != null) hash ^= Point.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShowcaseId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ShowcaseId);
      }
      if (Direction != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Direction);
      }
      if (point_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Point);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShowcaseId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ShowcaseId);
      }
      if (Direction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Direction);
      }
      if (point_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Point);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveShowcaseRequest other) {
      if (other == null) {
        return;
      }
      if (other.ShowcaseId != 0UL) {
        ShowcaseId = other.ShowcaseId;
      }
      if (other.Direction != 0) {
        Direction = other.Direction;
      }
      if (other.point_ != null) {
        if (point_ == null) {
          point_ = new global::SmalBox.Point2D();
        }
        Point.MergeFrom(other.Point);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ShowcaseId = input.ReadUInt64();
            break;
          }
          case 16: {
            direction_ = (global::SmalBox.Direction) input.ReadEnum();
            break;
          }
          case 26: {
            if (point_ == null) {
              point_ = new global::SmalBox.Point2D();
            }
            input.ReadMessage(point_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MoveShowcaseResponse : pb::IMessage<MoveShowcaseResponse> {
    private static readonly pb::MessageParser<MoveShowcaseResponse> _parser = new pb::MessageParser<MoveShowcaseResponse>(() => new MoveShowcaseResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveShowcaseResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[87]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveShowcaseResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveShowcaseResponse(MoveShowcaseResponse other) : this() {
      info_ = other.info_ != null ? other.info_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveShowcaseResponse Clone() {
      return new MoveShowcaseResponse(this);
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private global::SmalBox.ShowcaseInfo info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SmalBox.ShowcaseInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveShowcaseResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveShowcaseResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Info, other.Info)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (info_ != null) hash ^= Info.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveShowcaseResponse other) {
      if (other == null) {
        return;
      }
      if (other.info_ != null) {
        if (info_ == null) {
          info_ = new global::SmalBox.ShowcaseInfo();
        }
        Info.MergeFrom(other.Info);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (info_ == null) {
              info_ = new global::SmalBox.ShowcaseInfo();
            }
            input.ReadMessage(info_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收起展柜 同时推送道具消耗
  /// </summary>
  public sealed partial class PackShowcaseRequest : pb::IMessage<PackShowcaseRequest> {
    private static readonly pb::MessageParser<PackShowcaseRequest> _parser = new pb::MessageParser<PackShowcaseRequest>(() => new PackShowcaseRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PackShowcaseRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[88]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackShowcaseRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackShowcaseRequest(PackShowcaseRequest other) : this() {
      showcaseId_ = other.showcaseId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackShowcaseRequest Clone() {
      return new PackShowcaseRequest(this);
    }

    /// <summary>Field number for the "showcaseId" field.</summary>
    public const int ShowcaseIdFieldNumber = 1;
    private ulong showcaseId_;
    /// <summary>
    ///场景里的唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ShowcaseId {
      get { return showcaseId_; }
      set {
        showcaseId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PackShowcaseRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PackShowcaseRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShowcaseId != other.ShowcaseId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ShowcaseId != 0UL) hash ^= ShowcaseId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShowcaseId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ShowcaseId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShowcaseId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ShowcaseId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PackShowcaseRequest other) {
      if (other == null) {
        return;
      }
      if (other.ShowcaseId != 0UL) {
        ShowcaseId = other.ShowcaseId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ShowcaseId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PackShowcaseResponse : pb::IMessage<PackShowcaseResponse> {
    private static readonly pb::MessageParser<PackShowcaseResponse> _parser = new pb::MessageParser<PackShowcaseResponse>(() => new PackShowcaseResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PackShowcaseResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[89]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackShowcaseResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackShowcaseResponse(PackShowcaseResponse other) : this() {
      showcaseId_ = other.showcaseId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackShowcaseResponse Clone() {
      return new PackShowcaseResponse(this);
    }

    /// <summary>Field number for the "showcaseId" field.</summary>
    public const int ShowcaseIdFieldNumber = 1;
    private ulong showcaseId_;
    /// <summary>
    ///场景里的唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ShowcaseId {
      get { return showcaseId_; }
      set {
        showcaseId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PackShowcaseResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PackShowcaseResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShowcaseId != other.ShowcaseId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ShowcaseId != 0UL) hash ^= ShowcaseId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShowcaseId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ShowcaseId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShowcaseId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ShowcaseId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PackShowcaseResponse other) {
      if (other == null) {
        return;
      }
      if (other.ShowcaseId != 0UL) {
        ShowcaseId = other.ShowcaseId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ShowcaseId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///放置展品
  /// </summary>
  public sealed partial class PlaceExhibitsRequest : pb::IMessage<PlaceExhibitsRequest> {
    private static readonly pb::MessageParser<PlaceExhibitsRequest> _parser = new pb::MessageParser<PlaceExhibitsRequest>(() => new PlaceExhibitsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlaceExhibitsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[90]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaceExhibitsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaceExhibitsRequest(PlaceExhibitsRequest other) : this() {
      showcaseId_ = other.showcaseId_;
      index_ = other.index_;
      collectionItemId_ = other.collectionItemId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaceExhibitsRequest Clone() {
      return new PlaceExhibitsRequest(this);
    }

    /// <summary>Field number for the "showcaseId" field.</summary>
    public const int ShowcaseIdFieldNumber = 1;
    private ulong showcaseId_;
    /// <summary>
    ///场景中展柜的唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ShowcaseId {
      get { return showcaseId_; }
      set {
        showcaseId_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private int index_;
    /// <summary>
    ///slot 0~n
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "collectionItemId" field.</summary>
    public const int CollectionItemIdFieldNumber = 3;
    private ulong collectionItemId_;
    /// <summary>
    ///收集物Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CollectionItemId {
      get { return collectionItemId_; }
      set {
        collectionItemId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlaceExhibitsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlaceExhibitsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShowcaseId != other.ShowcaseId) return false;
      if (Index != other.Index) return false;
      if (CollectionItemId != other.CollectionItemId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ShowcaseId != 0UL) hash ^= ShowcaseId.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (CollectionItemId != 0UL) hash ^= CollectionItemId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShowcaseId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ShowcaseId);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Index);
      }
      if (CollectionItemId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(CollectionItemId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShowcaseId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ShowcaseId);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (CollectionItemId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CollectionItemId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlaceExhibitsRequest other) {
      if (other == null) {
        return;
      }
      if (other.ShowcaseId != 0UL) {
        ShowcaseId = other.ShowcaseId;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.CollectionItemId != 0UL) {
        CollectionItemId = other.CollectionItemId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ShowcaseId = input.ReadUInt64();
            break;
          }
          case 16: {
            Index = input.ReadInt32();
            break;
          }
          case 24: {
            CollectionItemId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlaceExhibitsResponse : pb::IMessage<PlaceExhibitsResponse> {
    private static readonly pb::MessageParser<PlaceExhibitsResponse> _parser = new pb::MessageParser<PlaceExhibitsResponse>(() => new PlaceExhibitsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlaceExhibitsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[91]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaceExhibitsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaceExhibitsResponse(PlaceExhibitsResponse other) : this() {
      showcaseId_ = other.showcaseId_;
      index_ = other.index_;
      exhibits_ = other.exhibits_ != null ? other.exhibits_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaceExhibitsResponse Clone() {
      return new PlaceExhibitsResponse(this);
    }

    /// <summary>Field number for the "showcaseId" field.</summary>
    public const int ShowcaseIdFieldNumber = 1;
    private ulong showcaseId_;
    /// <summary>
    ///场景中展柜的唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ShowcaseId {
      get { return showcaseId_; }
      set {
        showcaseId_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private int index_;
    /// <summary>
    ///slot 0~n
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "exhibits" field.</summary>
    public const int ExhibitsFieldNumber = 3;
    private global::SmalBox.Exhibits exhibits_;
    /// <summary>
    ///收藏品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SmalBox.Exhibits Exhibits {
      get { return exhibits_; }
      set {
        exhibits_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlaceExhibitsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlaceExhibitsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShowcaseId != other.ShowcaseId) return false;
      if (Index != other.Index) return false;
      if (!object.Equals(Exhibits, other.Exhibits)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ShowcaseId != 0UL) hash ^= ShowcaseId.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (exhibits_ != null) hash ^= Exhibits.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShowcaseId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ShowcaseId);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Index);
      }
      if (exhibits_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Exhibits);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShowcaseId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ShowcaseId);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (exhibits_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Exhibits);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlaceExhibitsResponse other) {
      if (other == null) {
        return;
      }
      if (other.ShowcaseId != 0UL) {
        ShowcaseId = other.ShowcaseId;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.exhibits_ != null) {
        if (exhibits_ == null) {
          exhibits_ = new global::SmalBox.Exhibits();
        }
        Exhibits.MergeFrom(other.Exhibits);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ShowcaseId = input.ReadUInt64();
            break;
          }
          case 16: {
            Index = input.ReadInt32();
            break;
          }
          case 26: {
            if (exhibits_ == null) {
              exhibits_ = new global::SmalBox.Exhibits();
            }
            input.ReadMessage(exhibits_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RemoveExhibitsRequest : pb::IMessage<RemoveExhibitsRequest> {
    private static readonly pb::MessageParser<RemoveExhibitsRequest> _parser = new pb::MessageParser<RemoveExhibitsRequest>(() => new RemoveExhibitsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveExhibitsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[92]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveExhibitsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveExhibitsRequest(RemoveExhibitsRequest other) : this() {
      showcaseId_ = other.showcaseId_;
      index_ = other.index_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveExhibitsRequest Clone() {
      return new RemoveExhibitsRequest(this);
    }

    /// <summary>Field number for the "showcaseId" field.</summary>
    public const int ShowcaseIdFieldNumber = 1;
    private ulong showcaseId_;
    /// <summary>
    ///场景中展柜的唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ShowcaseId {
      get { return showcaseId_; }
      set {
        showcaseId_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private int index_;
    /// <summary>
    ///slot 0~n
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveExhibitsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveExhibitsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShowcaseId != other.ShowcaseId) return false;
      if (Index != other.Index) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ShowcaseId != 0UL) hash ^= ShowcaseId.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShowcaseId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ShowcaseId);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Index);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShowcaseId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ShowcaseId);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveExhibitsRequest other) {
      if (other == null) {
        return;
      }
      if (other.ShowcaseId != 0UL) {
        ShowcaseId = other.ShowcaseId;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ShowcaseId = input.ReadUInt64();
            break;
          }
          case 16: {
            Index = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RemoveExhibitsResponse : pb::IMessage<RemoveExhibitsResponse> {
    private static readonly pb::MessageParser<RemoveExhibitsResponse> _parser = new pb::MessageParser<RemoveExhibitsResponse>(() => new RemoveExhibitsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveExhibitsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[93]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveExhibitsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveExhibitsResponse(RemoveExhibitsResponse other) : this() {
      showcaseId_ = other.showcaseId_;
      index_ = other.index_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveExhibitsResponse Clone() {
      return new RemoveExhibitsResponse(this);
    }

    /// <summary>Field number for the "showcaseId" field.</summary>
    public const int ShowcaseIdFieldNumber = 1;
    private ulong showcaseId_;
    /// <summary>
    ///场景中展柜的唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ShowcaseId {
      get { return showcaseId_; }
      set {
        showcaseId_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private int index_;
    /// <summary>
    ///slot 0~n
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveExhibitsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveExhibitsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShowcaseId != other.ShowcaseId) return false;
      if (Index != other.Index) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ShowcaseId != 0UL) hash ^= ShowcaseId.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShowcaseId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ShowcaseId);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Index);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShowcaseId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ShowcaseId);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveExhibitsResponse other) {
      if (other == null) {
        return;
      }
      if (other.ShowcaseId != 0UL) {
        ShowcaseId = other.ShowcaseId;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ShowcaseId = input.ReadUInt64();
            break;
          }
          case 16: {
            Index = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReceiveShowcaseRewardRequest : pb::IMessage<ReceiveShowcaseRewardRequest> {
    private static readonly pb::MessageParser<ReceiveShowcaseRewardRequest> _parser = new pb::MessageParser<ReceiveShowcaseRewardRequest>(() => new ReceiveShowcaseRewardRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReceiveShowcaseRewardRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[94]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceiveShowcaseRewardRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceiveShowcaseRewardRequest(ReceiveShowcaseRewardRequest other) : this() {
      showcaseId_ = other.showcaseId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceiveShowcaseRewardRequest Clone() {
      return new ReceiveShowcaseRewardRequest(this);
    }

    /// <summary>Field number for the "showcaseId" field.</summary>
    public const int ShowcaseIdFieldNumber = 1;
    private ulong showcaseId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ShowcaseId {
      get { return showcaseId_; }
      set {
        showcaseId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReceiveShowcaseRewardRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReceiveShowcaseRewardRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShowcaseId != other.ShowcaseId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ShowcaseId != 0UL) hash ^= ShowcaseId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShowcaseId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ShowcaseId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShowcaseId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ShowcaseId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReceiveShowcaseRewardRequest other) {
      if (other == null) {
        return;
      }
      if (other.ShowcaseId != 0UL) {
        ShowcaseId = other.ShowcaseId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ShowcaseId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReceiveShowcaseRewardResponse : pb::IMessage<ReceiveShowcaseRewardResponse> {
    private static readonly pb::MessageParser<ReceiveShowcaseRewardResponse> _parser = new pb::MessageParser<ReceiveShowcaseRewardResponse>(() => new ReceiveShowcaseRewardResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReceiveShowcaseRewardResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[95]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceiveShowcaseRewardResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceiveShowcaseRewardResponse(ReceiveShowcaseRewardResponse other) : this() {
      showcaseId_ = other.showcaseId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceiveShowcaseRewardResponse Clone() {
      return new ReceiveShowcaseRewardResponse(this);
    }

    /// <summary>Field number for the "showcaseId" field.</summary>
    public const int ShowcaseIdFieldNumber = 1;
    private ulong showcaseId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ShowcaseId {
      get { return showcaseId_; }
      set {
        showcaseId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReceiveShowcaseRewardResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReceiveShowcaseRewardResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShowcaseId != other.ShowcaseId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ShowcaseId != 0UL) hash ^= ShowcaseId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShowcaseId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ShowcaseId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShowcaseId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ShowcaseId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReceiveShowcaseRewardResponse other) {
      if (other == null) {
        return;
      }
      if (other.ShowcaseId != 0UL) {
        ShowcaseId = other.ShowcaseId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ShowcaseId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///移动展品
  /// </summary>
  public sealed partial class MoveExhibitsRequest : pb::IMessage<MoveExhibitsRequest> {
    private static readonly pb::MessageParser<MoveExhibitsRequest> _parser = new pb::MessageParser<MoveExhibitsRequest>(() => new MoveExhibitsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveExhibitsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[96]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveExhibitsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveExhibitsRequest(MoveExhibitsRequest other) : this() {
      showcaseId_ = other.showcaseId_;
      fromIndex_ = other.fromIndex_;
      toIndex_ = other.toIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveExhibitsRequest Clone() {
      return new MoveExhibitsRequest(this);
    }

    /// <summary>Field number for the "showcaseId" field.</summary>
    public const int ShowcaseIdFieldNumber = 1;
    private ulong showcaseId_;
    /// <summary>
    ///场景中展柜的唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ShowcaseId {
      get { return showcaseId_; }
      set {
        showcaseId_ = value;
      }
    }

    /// <summary>Field number for the "fromIndex" field.</summary>
    public const int FromIndexFieldNumber = 2;
    private int fromIndex_;
    /// <summary>
    ///slot 0~n
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FromIndex {
      get { return fromIndex_; }
      set {
        fromIndex_ = value;
      }
    }

    /// <summary>Field number for the "toIndex" field.</summary>
    public const int ToIndexFieldNumber = 3;
    private int toIndex_;
    /// <summary>
    ///slot 0~n
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ToIndex {
      get { return toIndex_; }
      set {
        toIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveExhibitsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveExhibitsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShowcaseId != other.ShowcaseId) return false;
      if (FromIndex != other.FromIndex) return false;
      if (ToIndex != other.ToIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ShowcaseId != 0UL) hash ^= ShowcaseId.GetHashCode();
      if (FromIndex != 0) hash ^= FromIndex.GetHashCode();
      if (ToIndex != 0) hash ^= ToIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShowcaseId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ShowcaseId);
      }
      if (FromIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FromIndex);
      }
      if (ToIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ToIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShowcaseId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ShowcaseId);
      }
      if (FromIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FromIndex);
      }
      if (ToIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ToIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveExhibitsRequest other) {
      if (other == null) {
        return;
      }
      if (other.ShowcaseId != 0UL) {
        ShowcaseId = other.ShowcaseId;
      }
      if (other.FromIndex != 0) {
        FromIndex = other.FromIndex;
      }
      if (other.ToIndex != 0) {
        ToIndex = other.ToIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ShowcaseId = input.ReadUInt64();
            break;
          }
          case 16: {
            FromIndex = input.ReadInt32();
            break;
          }
          case 24: {
            ToIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MoveExhibitsResponse : pb::IMessage<MoveExhibitsResponse> {
    private static readonly pb::MessageParser<MoveExhibitsResponse> _parser = new pb::MessageParser<MoveExhibitsResponse>(() => new MoveExhibitsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveExhibitsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[97]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveExhibitsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveExhibitsResponse(MoveExhibitsResponse other) : this() {
      changed_ = other.changed_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveExhibitsResponse Clone() {
      return new MoveExhibitsResponse(this);
    }

    /// <summary>Field number for the "changed" field.</summary>
    public const int ChangedFieldNumber = 1;
    private static readonly pbc::MapField<int, global::SmalBox.Exhibits>.Codec _map_changed_codec
        = new pbc::MapField<int, global::SmalBox.Exhibits>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::SmalBox.Exhibits.Parser), 10);
    private readonly pbc::MapField<int, global::SmalBox.Exhibits> changed_ = new pbc::MapField<int, global::SmalBox.Exhibits>();
    /// <summary>
    ///发生过改边的展品k:位置 v:展品信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::SmalBox.Exhibits> Changed {
      get { return changed_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveExhibitsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveExhibitsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Changed.Equals(other.Changed)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Changed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      changed_.WriteTo(output, _map_changed_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += changed_.CalculateSize(_map_changed_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveExhibitsResponse other) {
      if (other == null) {
        return;
      }
      changed_.Add(other.changed_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            changed_.AddEntriesFrom(input, _map_changed_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///解锁区域
  /// </summary>
  public sealed partial class UnlockMuseumAreaRequest : pb::IMessage<UnlockMuseumAreaRequest> {
    private static readonly pb::MessageParser<UnlockMuseumAreaRequest> _parser = new pb::MessageParser<UnlockMuseumAreaRequest>(() => new UnlockMuseumAreaRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnlockMuseumAreaRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[98]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnlockMuseumAreaRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnlockMuseumAreaRequest(UnlockMuseumAreaRequest other) : this() {
      areaId_ = other.areaId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnlockMuseumAreaRequest Clone() {
      return new UnlockMuseumAreaRequest(this);
    }

    /// <summary>Field number for the "areaId" field.</summary>
    public const int AreaIdFieldNumber = 1;
    private int areaId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AreaId {
      get { return areaId_; }
      set {
        areaId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnlockMuseumAreaRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnlockMuseumAreaRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AreaId != other.AreaId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AreaId != 0) hash ^= AreaId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AreaId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AreaId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AreaId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AreaId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnlockMuseumAreaRequest other) {
      if (other == null) {
        return;
      }
      if (other.AreaId != 0) {
        AreaId = other.AreaId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AreaId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UnlockMuseumAreaResponse : pb::IMessage<UnlockMuseumAreaResponse> {
    private static readonly pb::MessageParser<UnlockMuseumAreaResponse> _parser = new pb::MessageParser<UnlockMuseumAreaResponse>(() => new UnlockMuseumAreaResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnlockMuseumAreaResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[99]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnlockMuseumAreaResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnlockMuseumAreaResponse(UnlockMuseumAreaResponse other) : this() {
      areaId_ = other.areaId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnlockMuseumAreaResponse Clone() {
      return new UnlockMuseumAreaResponse(this);
    }

    /// <summary>Field number for the "areaId" field.</summary>
    public const int AreaIdFieldNumber = 1;
    private int areaId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AreaId {
      get { return areaId_; }
      set {
        areaId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnlockMuseumAreaResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnlockMuseumAreaResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AreaId != other.AreaId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AreaId != 0) hash ^= AreaId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AreaId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AreaId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AreaId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AreaId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnlockMuseumAreaResponse other) {
      if (other == null) {
        return;
      }
      if (other.AreaId != 0) {
        AreaId = other.AreaId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AreaId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///修复宝箱
  /// </summary>
  public sealed partial class RepairBoxRequest : pb::IMessage<RepairBoxRequest> {
    private static readonly pb::MessageParser<RepairBoxRequest> _parser = new pb::MessageParser<RepairBoxRequest>(() => new RepairBoxRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RepairBoxRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[100]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RepairBoxRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RepairBoxRequest(RepairBoxRequest other) : this() {
      cfgId_ = other.cfgId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RepairBoxRequest Clone() {
      return new RepairBoxRequest(this);
    }

    /// <summary>Field number for the "cfgId" field.</summary>
    public const int CfgIdFieldNumber = 1;
    private int cfgId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CfgId {
      get { return cfgId_; }
      set {
        cfgId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RepairBoxRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RepairBoxRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CfgId != other.CfgId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CfgId != 0) hash ^= CfgId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CfgId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CfgId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CfgId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CfgId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RepairBoxRequest other) {
      if (other == null) {
        return;
      }
      if (other.CfgId != 0) {
        CfgId = other.CfgId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CfgId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RepairBoxResponse : pb::IMessage<RepairBoxResponse> {
    private static readonly pb::MessageParser<RepairBoxResponse> _parser = new pb::MessageParser<RepairBoxResponse>(() => new RepairBoxResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RepairBoxResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[101]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RepairBoxResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RepairBoxResponse(RepairBoxResponse other) : this() {
      showcase_ = other.showcase_ != null ? other.showcase_.Clone() : null;
      cfgId_ = other.cfgId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RepairBoxResponse Clone() {
      return new RepairBoxResponse(this);
    }

    /// <summary>Field number for the "showcase" field.</summary>
    public const int ShowcaseFieldNumber = 1;
    private global::SmalBox.ShowcaseInfo showcase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SmalBox.ShowcaseInfo Showcase {
      get { return showcase_; }
      set {
        showcase_ = value;
      }
    }

    /// <summary>Field number for the "cfgId" field.</summary>
    public const int CfgIdFieldNumber = 2;
    private int cfgId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CfgId {
      get { return cfgId_; }
      set {
        cfgId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RepairBoxResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RepairBoxResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Showcase, other.Showcase)) return false;
      if (CfgId != other.CfgId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (showcase_ != null) hash ^= Showcase.GetHashCode();
      if (CfgId != 0) hash ^= CfgId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (showcase_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Showcase);
      }
      if (CfgId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CfgId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (showcase_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Showcase);
      }
      if (CfgId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CfgId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RepairBoxResponse other) {
      if (other == null) {
        return;
      }
      if (other.showcase_ != null) {
        if (showcase_ == null) {
          showcase_ = new global::SmalBox.ShowcaseInfo();
        }
        Showcase.MergeFrom(other.Showcase);
      }
      if (other.CfgId != 0) {
        CfgId = other.CfgId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (showcase_ == null) {
              showcase_ = new global::SmalBox.ShowcaseInfo();
            }
            input.ReadMessage(showcase_);
            break;
          }
          case 16: {
            CfgId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///展柜信息
  /// </summary>
  public sealed partial class ShowcaseInfo : pb::IMessage<ShowcaseInfo> {
    private static readonly pb::MessageParser<ShowcaseInfo> _parser = new pb::MessageParser<ShowcaseInfo>(() => new ShowcaseInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShowcaseInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[102]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShowcaseInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShowcaseInfo(ShowcaseInfo other) : this() {
      showcaseId_ = other.showcaseId_;
      cfgId_ = other.cfgId_;
      direction_ = other.direction_;
      point_ = other.point_ != null ? other.point_.Clone() : null;
      exp_ = other.exp_;
      level_ = other.level_;
      researchPoint_ = other.researchPoint_;
      coin_ = other.coin_;
      exhibits_ = other.exhibits_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShowcaseInfo Clone() {
      return new ShowcaseInfo(this);
    }

    /// <summary>Field number for the "showcaseId" field.</summary>
    public const int ShowcaseIdFieldNumber = 1;
    private ulong showcaseId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ShowcaseId {
      get { return showcaseId_; }
      set {
        showcaseId_ = value;
      }
    }

    /// <summary>Field number for the "cfgId" field.</summary>
    public const int CfgIdFieldNumber = 2;
    private int cfgId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CfgId {
      get { return cfgId_; }
      set {
        cfgId_ = value;
      }
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 3;
    private global::SmalBox.Direction direction_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SmalBox.Direction Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 4;
    private global::SmalBox.Point2D point_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SmalBox.Point2D Point {
      get { return point_; }
      set {
        point_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 5;
    private int exp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 6;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "researchPoint" field.</summary>
    public const int ResearchPointFieldNumber = 7;
    private int researchPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ResearchPoint {
      get { return researchPoint_; }
      set {
        researchPoint_ = value;
      }
    }

    /// <summary>Field number for the "coin" field.</summary>
    public const int CoinFieldNumber = 8;
    private int coin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Coin {
      get { return coin_; }
      set {
        coin_ = value;
      }
    }

    /// <summary>Field number for the "exhibits" field.</summary>
    public const int ExhibitsFieldNumber = 9;
    private static readonly pbc::MapField<int, global::SmalBox.Exhibits>.Codec _map_exhibits_codec
        = new pbc::MapField<int, global::SmalBox.Exhibits>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::SmalBox.Exhibits.Parser), 74);
    private readonly pbc::MapField<int, global::SmalBox.Exhibits> exhibits_ = new pbc::MapField<int, global::SmalBox.Exhibits>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::SmalBox.Exhibits> Exhibits {
      get { return exhibits_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShowcaseInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShowcaseInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShowcaseId != other.ShowcaseId) return false;
      if (CfgId != other.CfgId) return false;
      if (Direction != other.Direction) return false;
      if (!object.Equals(Point, other.Point)) return false;
      if (Exp != other.Exp) return false;
      if (Level != other.Level) return false;
      if (ResearchPoint != other.ResearchPoint) return false;
      if (Coin != other.Coin) return false;
      if (!Exhibits.Equals(other.Exhibits)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ShowcaseId != 0UL) hash ^= ShowcaseId.GetHashCode();
      if (CfgId != 0) hash ^= CfgId.GetHashCode();
      if (Direction != 0) hash ^= Direction.GetHashCode();
      if (point_ != null) hash ^= Point.GetHashCode();
      if (Exp != 0) hash ^= Exp.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (ResearchPoint != 0) hash ^= ResearchPoint.GetHashCode();
      if (Coin != 0) hash ^= Coin.GetHashCode();
      hash ^= Exhibits.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShowcaseId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ShowcaseId);
      }
      if (CfgId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CfgId);
      }
      if (Direction != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Direction);
      }
      if (point_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Point);
      }
      if (Exp != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Exp);
      }
      if (Level != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Level);
      }
      if (ResearchPoint != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ResearchPoint);
      }
      if (Coin != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Coin);
      }
      exhibits_.WriteTo(output, _map_exhibits_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShowcaseId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ShowcaseId);
      }
      if (CfgId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CfgId);
      }
      if (Direction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Direction);
      }
      if (point_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Point);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (ResearchPoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResearchPoint);
      }
      if (Coin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Coin);
      }
      size += exhibits_.CalculateSize(_map_exhibits_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShowcaseInfo other) {
      if (other == null) {
        return;
      }
      if (other.ShowcaseId != 0UL) {
        ShowcaseId = other.ShowcaseId;
      }
      if (other.CfgId != 0) {
        CfgId = other.CfgId;
      }
      if (other.Direction != 0) {
        Direction = other.Direction;
      }
      if (other.point_ != null) {
        if (point_ == null) {
          point_ = new global::SmalBox.Point2D();
        }
        Point.MergeFrom(other.Point);
      }
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.ResearchPoint != 0) {
        ResearchPoint = other.ResearchPoint;
      }
      if (other.Coin != 0) {
        Coin = other.Coin;
      }
      exhibits_.Add(other.exhibits_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ShowcaseId = input.ReadUInt64();
            break;
          }
          case 16: {
            CfgId = input.ReadInt32();
            break;
          }
          case 24: {
            direction_ = (global::SmalBox.Direction) input.ReadEnum();
            break;
          }
          case 34: {
            if (point_ == null) {
              point_ = new global::SmalBox.Point2D();
            }
            input.ReadMessage(point_);
            break;
          }
          case 40: {
            Exp = input.ReadInt32();
            break;
          }
          case 48: {
            Level = input.ReadInt32();
            break;
          }
          case 56: {
            ResearchPoint = input.ReadInt32();
            break;
          }
          case 64: {
            Coin = input.ReadInt32();
            break;
          }
          case 74: {
            exhibits_.AddEntriesFrom(input, _map_exhibits_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///宝箱信息
  /// </summary>
  public sealed partial class BoxInfo : pb::IMessage<BoxInfo> {
    private static readonly pb::MessageParser<BoxInfo> _parser = new pb::MessageParser<BoxInfo>(() => new BoxInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BoxInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[103]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoxInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoxInfo(BoxInfo other) : this() {
      cfgId_ = other.cfgId_;
      point_ = other.point_ != null ? other.point_.Clone() : null;
      direction_ = other.direction_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoxInfo Clone() {
      return new BoxInfo(this);
    }

    /// <summary>Field number for the "cfgId" field.</summary>
    public const int CfgIdFieldNumber = 1;
    private int cfgId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CfgId {
      get { return cfgId_; }
      set {
        cfgId_ = value;
      }
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 2;
    private global::SmalBox.Point2D point_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SmalBox.Point2D Point {
      get { return point_; }
      set {
        point_ = value;
      }
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 3;
    private global::SmalBox.Direction direction_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SmalBox.Direction Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BoxInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BoxInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CfgId != other.CfgId) return false;
      if (!object.Equals(Point, other.Point)) return false;
      if (Direction != other.Direction) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CfgId != 0) hash ^= CfgId.GetHashCode();
      if (point_ != null) hash ^= Point.GetHashCode();
      if (Direction != 0) hash ^= Direction.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CfgId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CfgId);
      }
      if (point_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Point);
      }
      if (Direction != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Direction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CfgId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CfgId);
      }
      if (point_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Point);
      }
      if (Direction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Direction);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BoxInfo other) {
      if (other == null) {
        return;
      }
      if (other.CfgId != 0) {
        CfgId = other.CfgId;
      }
      if (other.point_ != null) {
        if (point_ == null) {
          point_ = new global::SmalBox.Point2D();
        }
        Point.MergeFrom(other.Point);
      }
      if (other.Direction != 0) {
        Direction = other.Direction;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CfgId = input.ReadInt32();
            break;
          }
          case 18: {
            if (point_ == null) {
              point_ = new global::SmalBox.Point2D();
            }
            input.ReadMessage(point_);
            break;
          }
          case 24: {
            direction_ = (global::SmalBox.Direction) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///展品信息
  /// </summary>
  public sealed partial class Exhibits : pb::IMessage<Exhibits> {
    private static readonly pb::MessageParser<Exhibits> _parser = new pb::MessageParser<Exhibits>(() => new Exhibits());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Exhibits> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[104]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Exhibits() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Exhibits(Exhibits other) : this() {
      id_ = other.id_;
      exhibitsId_ = other.exhibitsId_;
      size_ = other.size_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Exhibits Clone() {
      return new Exhibits(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "exhibitsId" field.</summary>
    public const int ExhibitsIdFieldNumber = 2;
    private int exhibitsId_;
    /// <summary>
    ///收藏品id(图鉴中配置表的id)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExhibitsId {
      get { return exhibitsId_; }
      set {
        exhibitsId_ = value;
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 3;
    private int size_;
    /// <summary>
    ///大小
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Exhibits);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Exhibits other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ExhibitsId != other.ExhibitsId) return false;
      if (Size != other.Size) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (ExhibitsId != 0) hash ^= ExhibitsId.GetHashCode();
      if (Size != 0) hash ^= Size.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (ExhibitsId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ExhibitsId);
      }
      if (Size != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Size);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (ExhibitsId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExhibitsId);
      }
      if (Size != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Size);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Exhibits other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.ExhibitsId != 0) {
        ExhibitsId = other.ExhibitsId;
      }
      if (other.Size != 0) {
        Size = other.Size;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 16: {
            ExhibitsId = input.ReadInt32();
            break;
          }
          case 24: {
            Size = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 进入博物馆的时候只推送一次
  /// </summary>
  public sealed partial class GetAllVisitorInfoPush : pb::IMessage<GetAllVisitorInfoPush> {
    private static readonly pb::MessageParser<GetAllVisitorInfoPush> _parser = new pb::MessageParser<GetAllVisitorInfoPush>(() => new GetAllVisitorInfoPush());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetAllVisitorInfoPush> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[105]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAllVisitorInfoPush() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAllVisitorInfoPush(GetAllVisitorInfoPush other) : this() {
      groupInfo_ = other.groupInfo_.Clone();
      visitors_ = other.visitors_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAllVisitorInfoPush Clone() {
      return new GetAllVisitorInfoPush(this);
    }

    /// <summary>Field number for the "groupInfo" field.</summary>
    public const int GroupInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SmalBox.VisitorGroup> _repeated_groupInfo_codec
        = pb::FieldCodec.ForMessage(10, global::SmalBox.VisitorGroup.Parser);
    private readonly pbc::RepeatedField<global::SmalBox.VisitorGroup> groupInfo_ = new pbc::RepeatedField<global::SmalBox.VisitorGroup>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SmalBox.VisitorGroup> GroupInfo {
      get { return groupInfo_; }
    }

    /// <summary>Field number for the "visitors" field.</summary>
    public const int VisitorsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SmalBox.VisitorInfo> _repeated_visitors_codec
        = pb::FieldCodec.ForMessage(18, global::SmalBox.VisitorInfo.Parser);
    private readonly pbc::RepeatedField<global::SmalBox.VisitorInfo> visitors_ = new pbc::RepeatedField<global::SmalBox.VisitorInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SmalBox.VisitorInfo> Visitors {
      get { return visitors_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetAllVisitorInfoPush);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetAllVisitorInfoPush other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!groupInfo_.Equals(other.groupInfo_)) return false;
      if(!visitors_.Equals(other.visitors_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= groupInfo_.GetHashCode();
      hash ^= visitors_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      groupInfo_.WriteTo(output, _repeated_groupInfo_codec);
      visitors_.WriteTo(output, _repeated_visitors_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += groupInfo_.CalculateSize(_repeated_groupInfo_codec);
      size += visitors_.CalculateSize(_repeated_visitors_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetAllVisitorInfoPush other) {
      if (other == null) {
        return;
      }
      groupInfo_.Add(other.groupInfo_);
      visitors_.Add(other.visitors_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            groupInfo_.AddEntriesFrom(input, _repeated_groupInfo_codec);
            break;
          }
          case 18: {
            visitors_.AddEntriesFrom(input, _repeated_visitors_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 游客被解锁
  /// </summary>
  public sealed partial class CreateVisitorGroupPush : pb::IMessage<CreateVisitorGroupPush> {
    private static readonly pb::MessageParser<CreateVisitorGroupPush> _parser = new pb::MessageParser<CreateVisitorGroupPush>(() => new CreateVisitorGroupPush());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateVisitorGroupPush> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[106]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateVisitorGroupPush() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateVisitorGroupPush(CreateVisitorGroupPush other) : this() {
      groups_ = other.groups_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateVisitorGroupPush Clone() {
      return new CreateVisitorGroupPush(this);
    }

    /// <summary>Field number for the "groups" field.</summary>
    public const int GroupsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SmalBox.VisitorGroup> _repeated_groups_codec
        = pb::FieldCodec.ForMessage(10, global::SmalBox.VisitorGroup.Parser);
    private readonly pbc::RepeatedField<global::SmalBox.VisitorGroup> groups_ = new pbc::RepeatedField<global::SmalBox.VisitorGroup>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SmalBox.VisitorGroup> Groups {
      get { return groups_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateVisitorGroupPush);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateVisitorGroupPush other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!groups_.Equals(other.groups_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= groups_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      groups_.WriteTo(output, _repeated_groups_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += groups_.CalculateSize(_repeated_groups_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateVisitorGroupPush other) {
      if (other == null) {
        return;
      }
      groups_.Add(other.groups_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            groups_.AddEntriesFrom(input, _repeated_groups_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///每次刷新游客都会推送  定时推送多次
  /// </summary>
  public sealed partial class CreateVisitorPush : pb::IMessage<CreateVisitorPush> {
    private static readonly pb::MessageParser<CreateVisitorPush> _parser = new pb::MessageParser<CreateVisitorPush>(() => new CreateVisitorPush());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateVisitorPush> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[107]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateVisitorPush() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateVisitorPush(CreateVisitorPush other) : this() {
      visitors_ = other.visitors_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateVisitorPush Clone() {
      return new CreateVisitorPush(this);
    }

    /// <summary>Field number for the "visitors" field.</summary>
    public const int VisitorsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SmalBox.VisitorInfo> _repeated_visitors_codec
        = pb::FieldCodec.ForMessage(10, global::SmalBox.VisitorInfo.Parser);
    private readonly pbc::RepeatedField<global::SmalBox.VisitorInfo> visitors_ = new pbc::RepeatedField<global::SmalBox.VisitorInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SmalBox.VisitorInfo> Visitors {
      get { return visitors_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateVisitorPush);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateVisitorPush other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!visitors_.Equals(other.visitors_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= visitors_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      visitors_.WriteTo(output, _repeated_visitors_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += visitors_.CalculateSize(_repeated_visitors_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateVisitorPush other) {
      if (other == null) {
        return;
      }
      visitors_.Add(other.visitors_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            visitors_.AddEntriesFrom(input, _repeated_visitors_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LevelupVisitorRequest : pb::IMessage<LevelupVisitorRequest> {
    private static readonly pb::MessageParser<LevelupVisitorRequest> _parser = new pb::MessageParser<LevelupVisitorRequest>(() => new LevelupVisitorRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LevelupVisitorRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[108]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelupVisitorRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelupVisitorRequest(LevelupVisitorRequest other) : this() {
      cfgId_ = other.cfgId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelupVisitorRequest Clone() {
      return new LevelupVisitorRequest(this);
    }

    /// <summary>Field number for the "cfgId" field.</summary>
    public const int CfgIdFieldNumber = 1;
    private int cfgId_;
    /// <summary>
    ///配置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CfgId {
      get { return cfgId_; }
      set {
        cfgId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LevelupVisitorRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LevelupVisitorRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CfgId != other.CfgId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CfgId != 0) hash ^= CfgId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CfgId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CfgId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CfgId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CfgId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LevelupVisitorRequest other) {
      if (other == null) {
        return;
      }
      if (other.CfgId != 0) {
        CfgId = other.CfgId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CfgId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LevelupVisitorResponse : pb::IMessage<LevelupVisitorResponse> {
    private static readonly pb::MessageParser<LevelupVisitorResponse> _parser = new pb::MessageParser<LevelupVisitorResponse>(() => new LevelupVisitorResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LevelupVisitorResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[109]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelupVisitorResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelupVisitorResponse(LevelupVisitorResponse other) : this() {
      groupInfo_ = other.groupInfo_ != null ? other.groupInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelupVisitorResponse Clone() {
      return new LevelupVisitorResponse(this);
    }

    /// <summary>Field number for the "groupInfo" field.</summary>
    public const int GroupInfoFieldNumber = 1;
    private global::SmalBox.VisitorGroup groupInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SmalBox.VisitorGroup GroupInfo {
      get { return groupInfo_; }
      set {
        groupInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LevelupVisitorResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LevelupVisitorResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GroupInfo, other.GroupInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (groupInfo_ != null) hash ^= GroupInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (groupInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GroupInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (groupInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GroupInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LevelupVisitorResponse other) {
      if (other == null) {
        return;
      }
      if (other.groupInfo_ != null) {
        if (groupInfo_ == null) {
          groupInfo_ = new global::SmalBox.VisitorGroup();
        }
        GroupInfo.MergeFrom(other.GroupInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (groupInfo_ == null) {
              groupInfo_ = new global::SmalBox.VisitorGroup();
            }
            input.ReadMessage(groupInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///离开博物馆
  /// </summary>
  public sealed partial class VisitorLeaveMuseumRequest : pb::IMessage<VisitorLeaveMuseumRequest> {
    private static readonly pb::MessageParser<VisitorLeaveMuseumRequest> _parser = new pb::MessageParser<VisitorLeaveMuseumRequest>(() => new VisitorLeaveMuseumRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VisitorLeaveMuseumRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[110]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitorLeaveMuseumRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitorLeaveMuseumRequest(VisitorLeaveMuseumRequest other) : this() {
      visitorId_ = other.visitorId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitorLeaveMuseumRequest Clone() {
      return new VisitorLeaveMuseumRequest(this);
    }

    /// <summary>Field number for the "visitorId" field.</summary>
    public const int VisitorIdFieldNumber = 1;
    private long visitorId_;
    /// <summary>
    ///唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long VisitorId {
      get { return visitorId_; }
      set {
        visitorId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VisitorLeaveMuseumRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VisitorLeaveMuseumRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VisitorId != other.VisitorId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VisitorId != 0L) hash ^= VisitorId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VisitorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(VisitorId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VisitorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(VisitorId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VisitorLeaveMuseumRequest other) {
      if (other == null) {
        return;
      }
      if (other.VisitorId != 0L) {
        VisitorId = other.VisitorId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            VisitorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VisitorLeaveMuseumResponse : pb::IMessage<VisitorLeaveMuseumResponse> {
    private static readonly pb::MessageParser<VisitorLeaveMuseumResponse> _parser = new pb::MessageParser<VisitorLeaveMuseumResponse>(() => new VisitorLeaveMuseumResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VisitorLeaveMuseumResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[111]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitorLeaveMuseumResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitorLeaveMuseumResponse(VisitorLeaveMuseumResponse other) : this() {
      visitorId_ = other.visitorId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitorLeaveMuseumResponse Clone() {
      return new VisitorLeaveMuseumResponse(this);
    }

    /// <summary>Field number for the "visitorId" field.</summary>
    public const int VisitorIdFieldNumber = 1;
    private long visitorId_;
    /// <summary>
    ///唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long VisitorId {
      get { return visitorId_; }
      set {
        visitorId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VisitorLeaveMuseumResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VisitorLeaveMuseumResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VisitorId != other.VisitorId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VisitorId != 0L) hash ^= VisitorId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VisitorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(VisitorId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VisitorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(VisitorId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VisitorLeaveMuseumResponse other) {
      if (other == null) {
        return;
      }
      if (other.VisitorId != 0L) {
        VisitorId = other.VisitorId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            VisitorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GiveUpPathRequest : pb::IMessage<GiveUpPathRequest> {
    private static readonly pb::MessageParser<GiveUpPathRequest> _parser = new pb::MessageParser<GiveUpPathRequest>(() => new GiveUpPathRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GiveUpPathRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[112]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiveUpPathRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiveUpPathRequest(GiveUpPathRequest other) : this() {
      visitorId_ = other.visitorId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiveUpPathRequest Clone() {
      return new GiveUpPathRequest(this);
    }

    /// <summary>Field number for the "visitorId" field.</summary>
    public const int VisitorIdFieldNumber = 1;
    private long visitorId_;
    /// <summary>
    ///唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long VisitorId {
      get { return visitorId_; }
      set {
        visitorId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GiveUpPathRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GiveUpPathRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VisitorId != other.VisitorId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VisitorId != 0L) hash ^= VisitorId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VisitorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(VisitorId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VisitorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(VisitorId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GiveUpPathRequest other) {
      if (other == null) {
        return;
      }
      if (other.VisitorId != 0L) {
        VisitorId = other.VisitorId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            VisitorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GiveUpPathResponse : pb::IMessage<GiveUpPathResponse> {
    private static readonly pb::MessageParser<GiveUpPathResponse> _parser = new pb::MessageParser<GiveUpPathResponse>(() => new GiveUpPathResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GiveUpPathResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[113]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiveUpPathResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiveUpPathResponse(GiveUpPathResponse other) : this() {
      visitorId_ = other.visitorId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiveUpPathResponse Clone() {
      return new GiveUpPathResponse(this);
    }

    /// <summary>Field number for the "visitorId" field.</summary>
    public const int VisitorIdFieldNumber = 1;
    private long visitorId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long VisitorId {
      get { return visitorId_; }
      set {
        visitorId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GiveUpPathResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GiveUpPathResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VisitorId != other.VisitorId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VisitorId != 0L) hash ^= VisitorId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VisitorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(VisitorId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VisitorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(VisitorId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GiveUpPathResponse other) {
      if (other == null) {
        return;
      }
      if (other.VisitorId != 0L) {
        VisitorId = other.VisitorId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            VisitorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///参观完
  /// </summary>
  public sealed partial class VisitShowcaseRequest : pb::IMessage<VisitShowcaseRequest> {
    private static readonly pb::MessageParser<VisitShowcaseRequest> _parser = new pb::MessageParser<VisitShowcaseRequest>(() => new VisitShowcaseRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VisitShowcaseRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[114]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitShowcaseRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitShowcaseRequest(VisitShowcaseRequest other) : this() {
      visitorId_ = other.visitorId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitShowcaseRequest Clone() {
      return new VisitShowcaseRequest(this);
    }

    /// <summary>Field number for the "visitorId" field.</summary>
    public const int VisitorIdFieldNumber = 1;
    private long visitorId_;
    /// <summary>
    ///唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long VisitorId {
      get { return visitorId_; }
      set {
        visitorId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VisitShowcaseRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VisitShowcaseRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VisitorId != other.VisitorId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VisitorId != 0L) hash ^= VisitorId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VisitorId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(VisitorId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VisitorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(VisitorId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VisitShowcaseRequest other) {
      if (other == null) {
        return;
      }
      if (other.VisitorId != 0L) {
        VisitorId = other.VisitorId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            VisitorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VisitShowcaseResponse : pb::IMessage<VisitShowcaseResponse> {
    private static readonly pb::MessageParser<VisitShowcaseResponse> _parser = new pb::MessageParser<VisitShowcaseResponse>(() => new VisitShowcaseResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VisitShowcaseResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[115]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitShowcaseResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitShowcaseResponse(VisitShowcaseResponse other) : this() {
      showcaseInfo_ = other.showcaseInfo_ != null ? other.showcaseInfo_.Clone() : null;
      group_ = other.group_ != null ? other.group_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitShowcaseResponse Clone() {
      return new VisitShowcaseResponse(this);
    }

    /// <summary>Field number for the "showcaseInfo" field.</summary>
    public const int ShowcaseInfoFieldNumber = 1;
    private global::SmalBox.ShowcaseInfo showcaseInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SmalBox.ShowcaseInfo ShowcaseInfo {
      get { return showcaseInfo_; }
      set {
        showcaseInfo_ = value;
      }
    }

    /// <summary>Field number for the "group" field.</summary>
    public const int GroupFieldNumber = 2;
    private global::SmalBox.VisitorGroup group_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SmalBox.VisitorGroup Group {
      get { return group_; }
      set {
        group_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VisitShowcaseResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VisitShowcaseResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ShowcaseInfo, other.ShowcaseInfo)) return false;
      if (!object.Equals(Group, other.Group)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (showcaseInfo_ != null) hash ^= ShowcaseInfo.GetHashCode();
      if (group_ != null) hash ^= Group.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (showcaseInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ShowcaseInfo);
      }
      if (group_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Group);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (showcaseInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ShowcaseInfo);
      }
      if (group_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Group);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VisitShowcaseResponse other) {
      if (other == null) {
        return;
      }
      if (other.showcaseInfo_ != null) {
        if (showcaseInfo_ == null) {
          showcaseInfo_ = new global::SmalBox.ShowcaseInfo();
        }
        ShowcaseInfo.MergeFrom(other.ShowcaseInfo);
      }
      if (other.group_ != null) {
        if (group_ == null) {
          group_ = new global::SmalBox.VisitorGroup();
        }
        Group.MergeFrom(other.Group);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (showcaseInfo_ == null) {
              showcaseInfo_ = new global::SmalBox.ShowcaseInfo();
            }
            input.ReadMessage(showcaseInfo_);
            break;
          }
          case 18: {
            if (group_ == null) {
              group_ = new global::SmalBox.VisitorGroup();
            }
            input.ReadMessage(group_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class VisitorInfo : pb::IMessage<VisitorInfo> {
    private static readonly pb::MessageParser<VisitorInfo> _parser = new pb::MessageParser<VisitorInfo>(() => new VisitorInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VisitorInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[116]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitorInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitorInfo(VisitorInfo other) : this() {
      id_ = other.id_;
      cfgId_ = other.cfgId_;
      level_ = other.level_;
      researchPoints_ = other.researchPoints_;
      coin_ = other.coin_;
      pathInfo_ = other.pathInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitorInfo Clone() {
      return new VisitorInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    /// <summary>
    ///唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "cfgId" field.</summary>
    public const int CfgIdFieldNumber = 2;
    private int cfgId_;
    /// <summary>
    ///配置表里的游客id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CfgId {
      get { return cfgId_; }
      set {
        cfgId_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    /// <summary>
    ///等级 (客户端暂时用不到)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "researchPoints" field.</summary>
    public const int ResearchPointsFieldNumber = 4;
    private int researchPoints_;
    /// <summary>
    ///研究点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ResearchPoints {
      get { return researchPoints_; }
      set {
        researchPoints_ = value;
      }
    }

    /// <summary>Field number for the "coin" field.</summary>
    public const int CoinFieldNumber = 5;
    private int coin_;
    /// <summary>
    ///游客的金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Coin {
      get { return coin_; }
      set {
        coin_ = value;
      }
    }

    /// <summary>Field number for the "pathInfo" field.</summary>
    public const int PathInfoFieldNumber = 6;
    private static readonly pb::FieldCodec<global::SmalBox.VisitorPathInfo> _repeated_pathInfo_codec
        = pb::FieldCodec.ForMessage(50, global::SmalBox.VisitorPathInfo.Parser);
    private readonly pbc::RepeatedField<global::SmalBox.VisitorPathInfo> pathInfo_ = new pbc::RepeatedField<global::SmalBox.VisitorPathInfo>();
    /// <summary>
    ///游客的任务节点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SmalBox.VisitorPathInfo> PathInfo {
      get { return pathInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VisitorInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VisitorInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (CfgId != other.CfgId) return false;
      if (Level != other.Level) return false;
      if (ResearchPoints != other.ResearchPoints) return false;
      if (Coin != other.Coin) return false;
      if(!pathInfo_.Equals(other.pathInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (CfgId != 0) hash ^= CfgId.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (ResearchPoints != 0) hash ^= ResearchPoints.GetHashCode();
      if (Coin != 0) hash ^= Coin.GetHashCode();
      hash ^= pathInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (CfgId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CfgId);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (ResearchPoints != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ResearchPoints);
      }
      if (Coin != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Coin);
      }
      pathInfo_.WriteTo(output, _repeated_pathInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (CfgId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CfgId);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (ResearchPoints != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResearchPoints);
      }
      if (Coin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Coin);
      }
      size += pathInfo_.CalculateSize(_repeated_pathInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VisitorInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.CfgId != 0) {
        CfgId = other.CfgId;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.ResearchPoints != 0) {
        ResearchPoints = other.ResearchPoints;
      }
      if (other.Coin != 0) {
        Coin = other.Coin;
      }
      pathInfo_.Add(other.pathInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            CfgId = input.ReadInt32();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 32: {
            ResearchPoints = input.ReadInt32();
            break;
          }
          case 40: {
            Coin = input.ReadInt32();
            break;
          }
          case 50: {
            pathInfo_.AddEntriesFrom(input, _repeated_pathInfo_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class VisitorGroup : pb::IMessage<VisitorGroup> {
    private static readonly pb::MessageParser<VisitorGroup> _parser = new pb::MessageParser<VisitorGroup>(() => new VisitorGroup());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VisitorGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[117]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitorGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitorGroup(VisitorGroup other) : this() {
      cfgId_ = other.cfgId_;
      exp_ = other.exp_;
      level_ = other.level_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitorGroup Clone() {
      return new VisitorGroup(this);
    }

    /// <summary>Field number for the "cfgId" field.</summary>
    public const int CfgIdFieldNumber = 1;
    private int cfgId_;
    /// <summary>
    ///游客组Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CfgId {
      get { return cfgId_; }
      set {
        cfgId_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 2;
    private int exp_;
    /// <summary>
    ///游客经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    /// <summary>
    ///游客的等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VisitorGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VisitorGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CfgId != other.CfgId) return false;
      if (Exp != other.Exp) return false;
      if (Level != other.Level) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CfgId != 0) hash ^= CfgId.GetHashCode();
      if (Exp != 0) hash ^= Exp.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CfgId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CfgId);
      }
      if (Exp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Exp);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CfgId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CfgId);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VisitorGroup other) {
      if (other == null) {
        return;
      }
      if (other.CfgId != 0) {
        CfgId = other.CfgId;
      }
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CfgId = input.ReadInt32();
            break;
          }
          case 16: {
            Exp = input.ReadInt32();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VisitorPathInfo : pb::IMessage<VisitorPathInfo> {
    private static readonly pb::MessageParser<VisitorPathInfo> _parser = new pb::MessageParser<VisitorPathInfo>(() => new VisitorPathInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VisitorPathInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[118]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitorPathInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitorPathInfo(VisitorPathInfo other) : this() {
      showcaseId_ = other.showcaseId_;
      exhibitsId_ = other.exhibitsId_;
      eventId_ = other.eventId_;
      functionBuildId_ = other.functionBuildId_;
      step_ = other.step_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitorPathInfo Clone() {
      return new VisitorPathInfo(this);
    }

    /// <summary>Field number for the "showcaseId" field.</summary>
    public const int ShowcaseIdFieldNumber = 1;
    private long showcaseId_;
    /// <summary>
    ///展柜id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ShowcaseId {
      get { return showcaseId_; }
      set {
        showcaseId_ = value;
      }
    }

    /// <summary>Field number for the "exhibitsId" field.</summary>
    public const int ExhibitsIdFieldNumber = 2;
    private int exhibitsId_;
    /// <summary>
    ///展品id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExhibitsId {
      get { return exhibitsId_; }
      set {
        exhibitsId_ = value;
      }
    }

    /// <summary>Field number for the "eventId" field.</summary>
    public const int EventIdFieldNumber = 3;
    private int eventId_;
    /// <summary>
    ///事件id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventId {
      get { return eventId_; }
      set {
        eventId_ = value;
      }
    }

    /// <summary>Field number for the "functionBuildId" field.</summary>
    public const int FunctionBuildIdFieldNumber = 4;
    private long functionBuildId_;
    /// <summary>
    ///功能性建筑id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FunctionBuildId {
      get { return functionBuildId_; }
      set {
        functionBuildId_ = value;
      }
    }

    /// <summary>Field number for the "step" field.</summary>
    public const int StepFieldNumber = 5;
    private int step_;
    /// <summary>
    ///0.展柜 1.功能性建筑
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Step {
      get { return step_; }
      set {
        step_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VisitorPathInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VisitorPathInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShowcaseId != other.ShowcaseId) return false;
      if (ExhibitsId != other.ExhibitsId) return false;
      if (EventId != other.EventId) return false;
      if (FunctionBuildId != other.FunctionBuildId) return false;
      if (Step != other.Step) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ShowcaseId != 0L) hash ^= ShowcaseId.GetHashCode();
      if (ExhibitsId != 0) hash ^= ExhibitsId.GetHashCode();
      if (EventId != 0) hash ^= EventId.GetHashCode();
      if (FunctionBuildId != 0L) hash ^= FunctionBuildId.GetHashCode();
      if (Step != 0) hash ^= Step.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShowcaseId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ShowcaseId);
      }
      if (ExhibitsId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ExhibitsId);
      }
      if (EventId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EventId);
      }
      if (FunctionBuildId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(FunctionBuildId);
      }
      if (Step != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Step);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShowcaseId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ShowcaseId);
      }
      if (ExhibitsId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExhibitsId);
      }
      if (EventId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventId);
      }
      if (FunctionBuildId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FunctionBuildId);
      }
      if (Step != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Step);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VisitorPathInfo other) {
      if (other == null) {
        return;
      }
      if (other.ShowcaseId != 0L) {
        ShowcaseId = other.ShowcaseId;
      }
      if (other.ExhibitsId != 0) {
        ExhibitsId = other.ExhibitsId;
      }
      if (other.EventId != 0) {
        EventId = other.EventId;
      }
      if (other.FunctionBuildId != 0L) {
        FunctionBuildId = other.FunctionBuildId;
      }
      if (other.Step != 0) {
        Step = other.Step;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ShowcaseId = input.ReadInt64();
            break;
          }
          case 16: {
            ExhibitsId = input.ReadInt32();
            break;
          }
          case 24: {
            EventId = input.ReadInt32();
            break;
          }
          case 32: {
            FunctionBuildId = input.ReadInt64();
            break;
          }
          case 40: {
            Step = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NpcTalkRequest : pb::IMessage<NpcTalkRequest> {
    private static readonly pb::MessageParser<NpcTalkRequest> _parser = new pb::MessageParser<NpcTalkRequest>(() => new NpcTalkRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NpcTalkRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[119]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcTalkRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcTalkRequest(NpcTalkRequest other) : this() {
      npcId_ = other.npcId_;
      plotId_ = other.plotId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcTalkRequest Clone() {
      return new NpcTalkRequest(this);
    }

    /// <summary>Field number for the "npcId" field.</summary>
    public const int NpcIdFieldNumber = 1;
    private int npcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NpcId {
      get { return npcId_; }
      set {
        npcId_ = value;
      }
    }

    /// <summary>Field number for the "plotId" field.</summary>
    public const int PlotIdFieldNumber = 2;
    private int plotId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlotId {
      get { return plotId_; }
      set {
        plotId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NpcTalkRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NpcTalkRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NpcId != other.NpcId) return false;
      if (PlotId != other.PlotId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NpcId != 0) hash ^= NpcId.GetHashCode();
      if (PlotId != 0) hash ^= PlotId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NpcId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NpcId);
      }
      if (PlotId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PlotId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NpcId);
      }
      if (PlotId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlotId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NpcTalkRequest other) {
      if (other == null) {
        return;
      }
      if (other.NpcId != 0) {
        NpcId = other.NpcId;
      }
      if (other.PlotId != 0) {
        PlotId = other.PlotId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NpcId = input.ReadInt32();
            break;
          }
          case 16: {
            PlotId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NpcTalkResponse : pb::IMessage<NpcTalkResponse> {
    private static readonly pb::MessageParser<NpcTalkResponse> _parser = new pb::MessageParser<NpcTalkResponse>(() => new NpcTalkResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NpcTalkResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[120]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcTalkResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcTalkResponse(NpcTalkResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcTalkResponse Clone() {
      return new NpcTalkResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NpcTalkResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NpcTalkResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NpcTalkResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class Point2D : pb::IMessage<Point2D> {
    private static readonly pb::MessageParser<Point2D> _parser = new pb::MessageParser<Point2D>(() => new Point2D());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Point2D> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[121]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Point2D() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Point2D(Point2D other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Point2D Clone() {
      return new Point2D(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Point2D);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Point2D other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Point2D other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetAllResearchIdRequest : pb::IMessage<GetAllResearchIdRequest> {
    private static readonly pb::MessageParser<GetAllResearchIdRequest> _parser = new pb::MessageParser<GetAllResearchIdRequest>(() => new GetAllResearchIdRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetAllResearchIdRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[122]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAllResearchIdRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAllResearchIdRequest(GetAllResearchIdRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAllResearchIdRequest Clone() {
      return new GetAllResearchIdRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetAllResearchIdRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetAllResearchIdRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetAllResearchIdRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class GetAllResearchIdResponse : pb::IMessage<GetAllResearchIdResponse> {
    private static readonly pb::MessageParser<GetAllResearchIdResponse> _parser = new pb::MessageParser<GetAllResearchIdResponse>(() => new GetAllResearchIdResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetAllResearchIdResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[123]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAllResearchIdResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAllResearchIdResponse(GetAllResearchIdResponse other) : this() {
      infoList_ = other.infoList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAllResearchIdResponse Clone() {
      return new GetAllResearchIdResponse(this);
    }

    /// <summary>Field number for the "infoList" field.</summary>
    public const int InfoListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SmalBox.ResearchInfo> _repeated_infoList_codec
        = pb::FieldCodec.ForMessage(10, global::SmalBox.ResearchInfo.Parser);
    private readonly pbc::RepeatedField<global::SmalBox.ResearchInfo> infoList_ = new pbc::RepeatedField<global::SmalBox.ResearchInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SmalBox.ResearchInfo> InfoList {
      get { return infoList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetAllResearchIdResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetAllResearchIdResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!infoList_.Equals(other.infoList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= infoList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      infoList_.WriteTo(output, _repeated_infoList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += infoList_.CalculateSize(_repeated_infoList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetAllResearchIdResponse other) {
      if (other == null) {
        return;
      }
      infoList_.Add(other.infoList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            infoList_.AddEntriesFrom(input, _repeated_infoList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResearchInfo : pb::IMessage<ResearchInfo> {
    private static readonly pb::MessageParser<ResearchInfo> _parser = new pb::MessageParser<ResearchInfo>(() => new ResearchInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResearchInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[124]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResearchInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResearchInfo(ResearchInfo other) : this() {
      id_ = other.id_;
      researched_ = other.researched_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResearchInfo Clone() {
      return new ResearchInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "researched" field.</summary>
    public const int ResearchedFieldNumber = 2;
    private bool researched_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Researched {
      get { return researched_; }
      set {
        researched_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResearchInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResearchInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Researched != other.Researched) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Researched != false) hash ^= Researched.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Researched != false) {
        output.WriteRawTag(16);
        output.WriteBool(Researched);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Researched != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResearchInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Researched != false) {
        Researched = other.Researched;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Researched = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResearchRequest : pb::IMessage<ResearchRequest> {
    private static readonly pb::MessageParser<ResearchRequest> _parser = new pb::MessageParser<ResearchRequest>(() => new ResearchRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResearchRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[125]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResearchRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResearchRequest(ResearchRequest other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResearchRequest Clone() {
      return new ResearchRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResearchRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResearchRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResearchRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResearchResponse : pb::IMessage<ResearchResponse> {
    private static readonly pb::MessageParser<ResearchResponse> _parser = new pb::MessageParser<ResearchResponse>(() => new ResearchResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResearchResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[126]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResearchResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResearchResponse(ResearchResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResearchResponse Clone() {
      return new ResearchResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResearchResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResearchResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResearchResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class RodUnit : pb::IMessage<RodUnit> {
    private static readonly pb::MessageParser<RodUnit> _parser = new pb::MessageParser<RodUnit>(() => new RodUnit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RodUnit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[127]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RodUnit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RodUnit(RodUnit other) : this() {
      id_ = other.id_;
      confId_ = other.confId_;
      hp_ = other.hp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RodUnit Clone() {
      return new RodUnit(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "conf_id" field.</summary>
    public const int ConfIdFieldNumber = 2;
    private uint confId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ConfId {
      get { return confId_; }
      set {
        confId_ = value;
      }
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 3;
    private uint hp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RodUnit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RodUnit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ConfId != other.ConfId) return false;
      if (Hp != other.Hp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (ConfId != 0) hash ^= ConfId.GetHashCode();
      if (Hp != 0) hash ^= Hp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (ConfId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ConfId);
      }
      if (Hp != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Hp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (ConfId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ConfId);
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Hp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RodUnit other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.ConfId != 0) {
        ConfId = other.ConfId;
      }
      if (other.Hp != 0) {
        Hp = other.Hp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 16: {
            ConfId = input.ReadUInt32();
            break;
          }
          case 24: {
            Hp = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RodBagRequest : pb::IMessage<RodBagRequest> {
    private static readonly pb::MessageParser<RodBagRequest> _parser = new pb::MessageParser<RodBagRequest>(() => new RodBagRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RodBagRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[128]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RodBagRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RodBagRequest(RodBagRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RodBagRequest Clone() {
      return new RodBagRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RodBagRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RodBagRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RodBagRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class RodBagResponse : pb::IMessage<RodBagResponse> {
    private static readonly pb::MessageParser<RodBagResponse> _parser = new pb::MessageParser<RodBagResponse>(() => new RodBagResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RodBagResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[129]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RodBagResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RodBagResponse(RodBagResponse other) : this() {
      rodList_ = other.rodList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RodBagResponse Clone() {
      return new RodBagResponse(this);
    }

    /// <summary>Field number for the "rod_list" field.</summary>
    public const int RodListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SmalBox.RodUnit> _repeated_rodList_codec
        = pb::FieldCodec.ForMessage(10, global::SmalBox.RodUnit.Parser);
    private readonly pbc::RepeatedField<global::SmalBox.RodUnit> rodList_ = new pbc::RepeatedField<global::SmalBox.RodUnit>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SmalBox.RodUnit> RodList {
      get { return rodList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RodBagResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RodBagResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rodList_.Equals(other.rodList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rodList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rodList_.WriteTo(output, _repeated_rodList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rodList_.CalculateSize(_repeated_rodList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RodBagResponse other) {
      if (other == null) {
        return;
      }
      rodList_.Add(other.rodList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            rodList_.AddEntriesFrom(input, _repeated_rodList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RodChangePush : pb::IMessage<RodChangePush> {
    private static readonly pb::MessageParser<RodChangePush> _parser = new pb::MessageParser<RodChangePush>(() => new RodChangePush());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RodChangePush> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[130]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RodChangePush() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RodChangePush(RodChangePush other) : this() {
      rodList_ = other.rodList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RodChangePush Clone() {
      return new RodChangePush(this);
    }

    /// <summary>Field number for the "rod_list" field.</summary>
    public const int RodListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SmalBox.RodUnit> _repeated_rodList_codec
        = pb::FieldCodec.ForMessage(10, global::SmalBox.RodUnit.Parser);
    private readonly pbc::RepeatedField<global::SmalBox.RodUnit> rodList_ = new pbc::RepeatedField<global::SmalBox.RodUnit>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SmalBox.RodUnit> RodList {
      get { return rodList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RodChangePush);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RodChangePush other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rodList_.Equals(other.rodList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rodList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rodList_.WriteTo(output, _repeated_rodList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rodList_.CalculateSize(_repeated_rodList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RodChangePush other) {
      if (other == null) {
        return;
      }
      rodList_.Add(other.rodList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            rodList_.AddEntriesFrom(input, _repeated_rodList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SceneChangeRequest : pb::IMessage<SceneChangeRequest> {
    private static readonly pb::MessageParser<SceneChangeRequest> _parser = new pb::MessageParser<SceneChangeRequest>(() => new SceneChangeRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SceneChangeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[131]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneChangeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneChangeRequest(SceneChangeRequest other) : this() {
      position_ = other.position_;
      mapId_ = other.mapId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneChangeRequest Clone() {
      return new SceneChangeRequest(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private global::SmalBox.ScenePosition position_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SmalBox.ScenePosition Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "mapId" field.</summary>
    public const int MapIdFieldNumber = 2;
    private int mapId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MapId {
      get { return mapId_; }
      set {
        mapId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SceneChangeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SceneChangeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Position != other.Position) return false;
      if (MapId != other.MapId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Position != 0) hash ^= Position.GetHashCode();
      if (MapId != 0) hash ^= MapId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Position != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Position);
      }
      if (MapId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MapId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Position);
      }
      if (MapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SceneChangeRequest other) {
      if (other == null) {
        return;
      }
      if (other.Position != 0) {
        Position = other.Position;
      }
      if (other.MapId != 0) {
        MapId = other.MapId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            position_ = (global::SmalBox.ScenePosition) input.ReadEnum();
            break;
          }
          case 16: {
            MapId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SceneChangeResponse : pb::IMessage<SceneChangeResponse> {
    private static readonly pb::MessageParser<SceneChangeResponse> _parser = new pb::MessageParser<SceneChangeResponse>(() => new SceneChangeResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SceneChangeResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[132]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneChangeResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneChangeResponse(SceneChangeResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneChangeResponse Clone() {
      return new SceneChangeResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SceneChangeResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SceneChangeResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SceneChangeResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class SceneUnlockPush : pb::IMessage<SceneUnlockPush> {
    private static readonly pb::MessageParser<SceneUnlockPush> _parser = new pb::MessageParser<SceneUnlockPush>(() => new SceneUnlockPush());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SceneUnlockPush> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[133]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneUnlockPush() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneUnlockPush(SceneUnlockPush other) : this() {
      mapId_ = other.mapId_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneUnlockPush Clone() {
      return new SceneUnlockPush(this);
    }

    /// <summary>Field number for the "mapId" field.</summary>
    public const int MapIdFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_mapId_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> mapId_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> MapId {
      get { return mapId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SceneUnlockPush);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SceneUnlockPush other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!mapId_.Equals(other.mapId_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= mapId_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      mapId_.WriteTo(output, _repeated_mapId_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += mapId_.CalculateSize(_repeated_mapId_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SceneUnlockPush other) {
      if (other == null) {
        return;
      }
      mapId_.Add(other.mapId_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            mapId_.AddEntriesFrom(input, _repeated_mapId_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PurchaseGoodsRequest : pb::IMessage<PurchaseGoodsRequest> {
    private static readonly pb::MessageParser<PurchaseGoodsRequest> _parser = new pb::MessageParser<PurchaseGoodsRequest>(() => new PurchaseGoodsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PurchaseGoodsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[134]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PurchaseGoodsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PurchaseGoodsRequest(PurchaseGoodsRequest other) : this() {
      configId_ = other.configId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PurchaseGoodsRequest Clone() {
      return new PurchaseGoodsRequest(this);
    }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 1;
    private int configId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PurchaseGoodsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PurchaseGoodsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConfigId != other.ConfigId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConfigId != 0) hash ^= ConfigId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PurchaseGoodsRequest other) {
      if (other == null) {
        return;
      }
      if (other.ConfigId != 0) {
        ConfigId = other.ConfigId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ConfigId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PurchaseGoodsResponse : pb::IMessage<PurchaseGoodsResponse> {
    private static readonly pb::MessageParser<PurchaseGoodsResponse> _parser = new pb::MessageParser<PurchaseGoodsResponse>(() => new PurchaseGoodsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PurchaseGoodsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[135]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PurchaseGoodsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PurchaseGoodsResponse(PurchaseGoodsResponse other) : this() {
      configId_ = other.configId_;
      age_ = other.age_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PurchaseGoodsResponse Clone() {
      return new PurchaseGoodsResponse(this);
    }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 1;
    private int configId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    /// <summary>Field number for the "age" field.</summary>
    public const int AgeFieldNumber = 2;
    private int age_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Age {
      get { return age_; }
      set {
        age_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PurchaseGoodsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PurchaseGoodsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConfigId != other.ConfigId) return false;
      if (Age != other.Age) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConfigId != 0) hash ^= ConfigId.GetHashCode();
      if (Age != 0) hash ^= Age.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigId);
      }
      if (Age != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Age);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      if (Age != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Age);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PurchaseGoodsResponse other) {
      if (other == null) {
        return;
      }
      if (other.ConfigId != 0) {
        ConfigId = other.ConfigId;
      }
      if (other.Age != 0) {
        Age = other.Age;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ConfigId = input.ReadInt32();
            break;
          }
          case 16: {
            Age = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReplaceNickNameRequest : pb::IMessage<ReplaceNickNameRequest> {
    private static readonly pb::MessageParser<ReplaceNickNameRequest> _parser = new pb::MessageParser<ReplaceNickNameRequest>(() => new ReplaceNickNameRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReplaceNickNameRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[136]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplaceNickNameRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplaceNickNameRequest(ReplaceNickNameRequest other) : this() {
      newName_ = other.newName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplaceNickNameRequest Clone() {
      return new ReplaceNickNameRequest(this);
    }

    /// <summary>Field number for the "newName" field.</summary>
    public const int NewNameFieldNumber = 1;
    private string newName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NewName {
      get { return newName_; }
      set {
        newName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReplaceNickNameRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReplaceNickNameRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NewName != other.NewName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NewName.Length != 0) hash ^= NewName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NewName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NewName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NewName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NewName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReplaceNickNameRequest other) {
      if (other == null) {
        return;
      }
      if (other.NewName.Length != 0) {
        NewName = other.NewName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            NewName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReplaceNickNameResponse : pb::IMessage<ReplaceNickNameResponse> {
    private static readonly pb::MessageParser<ReplaceNickNameResponse> _parser = new pb::MessageParser<ReplaceNickNameResponse>(() => new ReplaceNickNameResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReplaceNickNameResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[137]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplaceNickNameResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplaceNickNameResponse(ReplaceNickNameResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplaceNickNameResponse Clone() {
      return new ReplaceNickNameResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReplaceNickNameResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReplaceNickNameResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReplaceNickNameResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class ReplaceHeadUrlRequest : pb::IMessage<ReplaceHeadUrlRequest> {
    private static readonly pb::MessageParser<ReplaceHeadUrlRequest> _parser = new pb::MessageParser<ReplaceHeadUrlRequest>(() => new ReplaceHeadUrlRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReplaceHeadUrlRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[138]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplaceHeadUrlRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplaceHeadUrlRequest(ReplaceHeadUrlRequest other) : this() {
      headUrl_ = other.headUrl_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplaceHeadUrlRequest Clone() {
      return new ReplaceHeadUrlRequest(this);
    }

    /// <summary>Field number for the "headUrl" field.</summary>
    public const int HeadUrlFieldNumber = 2;
    private string headUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeadUrl {
      get { return headUrl_; }
      set {
        headUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReplaceHeadUrlRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReplaceHeadUrlRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HeadUrl != other.HeadUrl) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HeadUrl.Length != 0) hash ^= HeadUrl.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeadUrl.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(HeadUrl);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeadUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeadUrl);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReplaceHeadUrlRequest other) {
      if (other == null) {
        return;
      }
      if (other.HeadUrl.Length != 0) {
        HeadUrl = other.HeadUrl;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            HeadUrl = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReplaceHeadUrlResponse : pb::IMessage<ReplaceHeadUrlResponse> {
    private static readonly pb::MessageParser<ReplaceHeadUrlResponse> _parser = new pb::MessageParser<ReplaceHeadUrlResponse>(() => new ReplaceHeadUrlResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReplaceHeadUrlResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmalBox.LoginReflection.Descriptor.MessageTypes[139]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplaceHeadUrlResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplaceHeadUrlResponse(ReplaceHeadUrlResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplaceHeadUrlResponse Clone() {
      return new ReplaceHeadUrlResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReplaceHeadUrlResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReplaceHeadUrlResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReplaceHeadUrlResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
